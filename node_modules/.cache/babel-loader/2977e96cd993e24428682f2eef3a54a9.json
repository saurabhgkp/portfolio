{"ast":null,"code":"import { Triangle, Vector3, Line3, Sphere } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\nexport class SeparatingAxisTriangle extends Triangle {\n  constructor() {\n    super(...arguments);\n    this.isSeparatingAxisTriangle = true;\n    this.satAxes = new Array(4).fill().map(() => new Vector3());\n    this.satBounds = new Array(4).fill().map(() => new SeparatingAxisBounds());\n    this.points = [this.a, this.b, this.c];\n    this.sphere = new Sphere();\n    this.needsUpdate = false;\n  }\n\n  intersectsSphere(sphere) {\n    return sphereIntersectTriangle(sphere, this);\n  }\n\n  update() {\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    const points = this.points;\n    const satAxes = this.satAxes;\n    const satBounds = this.satBounds;\n    const axis0 = satAxes[0];\n    const sab0 = satBounds[0];\n    this.getNormal(axis0);\n    sab0.setFromPoints(axis0, points);\n    const axis1 = satAxes[1];\n    const sab1 = satBounds[1];\n    axis1.subVectors(a, b);\n    sab1.setFromPoints(axis1, points);\n    const axis2 = satAxes[2];\n    const sab2 = satBounds[2];\n    axis2.subVectors(b, c);\n    sab2.setFromPoints(axis2, points);\n    const axis3 = satAxes[3];\n    const sab3 = satBounds[3];\n    axis3.subVectors(c, a);\n    sab3.setFromPoints(axis3, points);\n    this.sphere.setFromPoints(this.points);\n    this.needsUpdate = false;\n  }\n\n}\n\nSeparatingAxisTriangle.prototype.closestPointToSegment = function () {\n  const point1 = new Vector3();\n  const point2 = new Vector3();\n  const edge = new Line3();\n  return function distanceToSegment(segment) {\n    let target1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let target2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    const {\n      start,\n      end\n    } = segment;\n    const points = this.points;\n    let distSq;\n    let closestDistanceSq = Infinity; // check the triangle edges\n\n    for (let i = 0; i < 3; i++) {\n      const nexti = (i + 1) % 3;\n      edge.start.copy(points[i]);\n      edge.end.copy(points[nexti]);\n      closestPointsSegmentToSegment(edge, segment, point1, point2);\n      distSq = point1.distanceToSquared(point2);\n\n      if (distSq < closestDistanceSq) {\n        closestDistanceSq = distSq;\n        if (target1) target1.copy(point1);\n        if (target2) target2.copy(point2);\n      }\n    } // check end points\n\n\n    this.closestPointToPoint(start, point1);\n    distSq = start.distanceToSquared(point1);\n\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1) target1.copy(point1);\n      if (target2) target2.copy(start);\n    }\n\n    this.closestPointToPoint(end, point1);\n    distSq = end.distanceToSquared(point1);\n\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1) target1.copy(point1);\n      if (target2) target2.copy(end);\n    }\n\n    return Math.sqrt(closestDistanceSq);\n  };\n}();\n\nSeparatingAxisTriangle.prototype.intersectsTriangle = function () {\n  const saTri2 = new SeparatingAxisTriangle();\n  const arr1 = new Array(3);\n  const arr2 = new Array(3);\n  const cachedSatBounds = new SeparatingAxisBounds();\n  const cachedSatBounds2 = new SeparatingAxisBounds();\n  const cachedAxis = new Vector3();\n  return function intersectsTriangle(other) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n\n    if (!other.isSeparatingAxisTriangle) {\n      saTri2.copy(other);\n      saTri2.update();\n      other = saTri2;\n    } else if (other.needsUpdate) {\n      other.update();\n    }\n\n    const satBounds1 = this.satBounds;\n    const satAxes1 = this.satAxes;\n    arr2[0] = other.a;\n    arr2[1] = other.b;\n    arr2[2] = other.c;\n\n    for (let i = 0; i < 4; i++) {\n      const sb = satBounds1[i];\n      const sa = satAxes1[i];\n      cachedSatBounds.setFromPoints(sa, arr2);\n      if (sb.isSeparated(cachedSatBounds)) return false;\n    }\n\n    const satBounds2 = other.satBounds;\n    const satAxes2 = other.satAxes;\n    arr1[0] = this.a;\n    arr1[1] = this.b;\n    arr1[2] = this.c;\n\n    for (let i = 0; i < 4; i++) {\n      const sb = satBounds2[i];\n      const sa = satAxes2[i];\n      cachedSatBounds.setFromPoints(sa, arr1);\n      if (sb.isSeparated(cachedSatBounds)) return false;\n    } // check crossed axes\n\n\n    for (let i = 0; i < 4; i++) {\n      const sa1 = satAxes1[i];\n\n      for (let i2 = 0; i2 < 4; i2++) {\n        const sa2 = satAxes2[i2];\n        cachedAxis.crossVectors(sa1, sa2);\n        cachedSatBounds.setFromPoints(cachedAxis, arr1);\n        cachedSatBounds2.setFromPoints(cachedAxis, arr2);\n        if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;\n      }\n    }\n\n    return true;\n  };\n}();\n\nSeparatingAxisTriangle.prototype.distanceToPoint = function () {\n  const target = new Vector3();\n  return function distanceToPoint(point) {\n    this.closestPointToPoint(point, target);\n    return point.distanceTo(target);\n  };\n}();\n\nSeparatingAxisTriangle.prototype.distanceToTriangle = function () {\n  const point = new Vector3();\n  const point2 = new Vector3();\n  const cornerFields = ['a', 'b', 'c'];\n  const line1 = new Line3();\n  const line2 = new Line3();\n  return function distanceToTriangle(other) {\n    let target1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let target2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    if (this.intersectsTriangle(other)) {\n      // TODO: This will not result in a point that lies on\n      // the intersection line of the triangles\n      if (target1 || target2) {\n        this.getMidpoint(point);\n        other.closestPointToPoint(point, point2);\n        this.closestPointToPoint(point2, point);\n        if (target1) target1.copy(point);\n        if (target2) target2.copy(point2);\n      }\n\n      return 0;\n    }\n\n    let closestDistanceSq = Infinity; // check all point distances\n\n    for (let i = 0; i < 3; i++) {\n      let dist;\n      const field = cornerFields[i];\n      const otherVec = other[field];\n      this.closestPointToPoint(otherVec, point);\n      dist = otherVec.distanceToSquared(point);\n\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(point);\n        if (target2) target2.copy(otherVec);\n      }\n\n      const thisVec = this[field];\n      other.closestPointToPoint(thisVec, point);\n      dist = thisVec.distanceToSquared(point);\n\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(thisVec);\n        if (target2) target2.copy(point);\n      }\n    }\n\n    for (let i = 0; i < 3; i++) {\n      const f11 = cornerFields[i];\n      const f12 = cornerFields[(i + 1) % 3];\n      line1.set(this[f11], this[f12]);\n\n      for (let i2 = 0; i2 < 3; i2++) {\n        const f21 = cornerFields[i2];\n        const f22 = cornerFields[(i2 + 1) % 3];\n        line2.set(other[f21], other[f22]);\n        closestPointsSegmentToSegment(line1, line2, point, point2);\n        const dist = point.distanceToSquared(point2);\n\n        if (dist < closestDistanceSq) {\n          closestDistanceSq = dist;\n          if (target1) target1.copy(point);\n          if (target2) target2.copy(point2);\n        }\n      }\n    }\n\n    return Math.sqrt(closestDistanceSq);\n  };\n}();","map":{"version":3,"names":["Triangle","Vector3","Line3","Sphere","SeparatingAxisBounds","closestPointsSegmentToSegment","sphereIntersectTriangle","SeparatingAxisTriangle","constructor","isSeparatingAxisTriangle","satAxes","Array","fill","map","satBounds","points","a","b","c","sphere","needsUpdate","intersectsSphere","update","axis0","sab0","getNormal","setFromPoints","axis1","sab1","subVectors","axis2","sab2","axis3","sab3","prototype","closestPointToSegment","point1","point2","edge","distanceToSegment","segment","target1","target2","start","end","distSq","closestDistanceSq","Infinity","i","nexti","copy","distanceToSquared","closestPointToPoint","Math","sqrt","intersectsTriangle","saTri2","arr1","arr2","cachedSatBounds","cachedSatBounds2","cachedAxis","other","satBounds1","satAxes1","sb","sa","isSeparated","satBounds2","satAxes2","sa1","i2","sa2","crossVectors","distanceToPoint","target","point","distanceTo","distanceToTriangle","cornerFields","line1","line2","getMidpoint","dist","field","otherVec","thisVec","f11","f12","set","f21","f22"],"sources":["/home/cliffexpc63/my example/portfolio/node_modules/three-mesh-bvh/src/Utils/SeparatingAxisTriangle.js"],"sourcesContent":["import { Triangle, Vector3, Line3, Sphere } from 'three';\r\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\r\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\r\n\r\nexport class SeparatingAxisTriangle extends Triangle {\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\r\n\t\tthis.isSeparatingAxisTriangle = true;\r\n\t\tthis.satAxes = new Array( 4 ).fill().map( () => new Vector3() );\r\n\t\tthis.satBounds = new Array( 4 ).fill().map( () => new SeparatingAxisBounds() );\r\n\t\tthis.points = [ this.a, this.b, this.c ];\r\n\t\tthis.sphere = new Sphere();\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\treturn sphereIntersectTriangle( sphere, this );\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst a = this.a;\r\n\t\tconst b = this.b;\r\n\t\tconst c = this.c;\r\n\t\tconst points = this.points;\r\n\r\n\t\tconst satAxes = this.satAxes;\r\n\t\tconst satBounds = this.satBounds;\r\n\r\n\t\tconst axis0 = satAxes[ 0 ];\r\n\t\tconst sab0 = satBounds[ 0 ];\r\n\t\tthis.getNormal( axis0 );\r\n\t\tsab0.setFromPoints( axis0, points );\r\n\r\n\t\tconst axis1 = satAxes[ 1 ];\r\n\t\tconst sab1 = satBounds[ 1 ];\r\n\t\taxis1.subVectors( a, b );\r\n\t\tsab1.setFromPoints( axis1, points );\r\n\r\n\t\tconst axis2 = satAxes[ 2 ];\r\n\t\tconst sab2 = satBounds[ 2 ];\r\n\t\taxis2.subVectors( b, c );\r\n\t\tsab2.setFromPoints( axis2, points );\r\n\r\n\t\tconst axis3 = satAxes[ 3 ];\r\n\t\tconst sab3 = satBounds[ 3 ];\r\n\t\taxis3.subVectors( c, a );\r\n\t\tsab3.setFromPoints( axis3, points );\r\n\r\n\t\tthis.sphere.setFromPoints( this.points );\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t}\r\n\r\n}\r\n\r\nSeparatingAxisTriangle.prototype.closestPointToSegment = ( function () {\r\n\r\n\tconst point1 = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\tconst edge = new Line3();\r\n\r\n\treturn function distanceToSegment( segment, target1 = null, target2 = null ) {\r\n\r\n\t\tconst { start, end } = segment;\r\n\t\tconst points = this.points;\r\n\t\tlet distSq;\r\n\t\tlet closestDistanceSq = Infinity;\r\n\r\n\t\t// check the triangle edges\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst nexti = ( i + 1 ) % 3;\r\n\t\t\tedge.start.copy( points[ i ] );\r\n\t\t\tedge.end.copy( points[ nexti ] );\r\n\r\n\t\t\tclosestPointsSegmentToSegment( edge, segment, point1, point2 );\r\n\r\n\t\t\tdistSq = point1.distanceToSquared( point2 );\r\n\t\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = distSq;\r\n\t\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// check end points\r\n\t\tthis.closestPointToPoint( start, point1 );\r\n\t\tdistSq = start.distanceToSquared( point1 );\r\n\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\tclosestDistanceSq = distSq;\r\n\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\tif ( target2 ) target2.copy( start );\r\n\r\n\t\t}\r\n\r\n\t\tthis.closestPointToPoint( end, point1 );\r\n\t\tdistSq = end.distanceToSquared( point1 );\r\n\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\tclosestDistanceSq = distSq;\r\n\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\tif ( target2 ) target2.copy( end );\r\n\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nSeparatingAxisTriangle.prototype.intersectsTriangle = ( function () {\r\n\r\n\tconst saTri2 = new SeparatingAxisTriangle();\r\n\tconst arr1 = new Array( 3 );\r\n\tconst arr2 = new Array( 3 );\r\n\tconst cachedSatBounds = new SeparatingAxisBounds();\r\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\r\n\tconst cachedAxis = new Vector3();\r\n\treturn function intersectsTriangle( other ) {\r\n\r\n\t\tif ( this.needsUpdate ) {\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! other.isSeparatingAxisTriangle ) {\r\n\r\n\t\t\tsaTri2.copy( other );\r\n\t\t\tsaTri2.update();\r\n\t\t\tother = saTri2;\r\n\r\n\t\t} else if ( other.needsUpdate ) {\r\n\r\n\t\t\tother.update();\r\n\r\n\t\t}\r\n\r\n\t\tconst satBounds1 = this.satBounds;\r\n\t\tconst satAxes1 = this.satAxes;\r\n\t\tarr2[ 0 ] = other.a;\r\n\t\tarr2[ 1 ] = other.b;\r\n\t\tarr2[ 2 ] = other.c;\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds1[ i ];\r\n\t\t\tconst sa = satAxes1[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, arr2 );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\tconst satBounds2 = other.satBounds;\r\n\t\tconst satAxes2 = other.satAxes;\r\n\t\tarr1[ 0 ] = this.a;\r\n\t\tarr1[ 1 ] = this.b;\r\n\t\tarr1[ 2 ] = this.c;\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds2[ i ];\r\n\t\t\tconst sa = satAxes2[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, arr1 );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\t// check crossed axes\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sa1 = satAxes1[ i ];\r\n\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\r\n\r\n\t\t\t\tconst sa2 = satAxes2[ i2 ];\r\n\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\r\n\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, arr1 );\r\n\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, arr2 );\r\n\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nSeparatingAxisTriangle.prototype.distanceToPoint = ( function () {\r\n\r\n\tconst target = new Vector3();\r\n\treturn function distanceToPoint( point ) {\r\n\r\n\t\tthis.closestPointToPoint( point, target );\r\n\t\treturn point.distanceTo( target );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nSeparatingAxisTriangle.prototype.distanceToTriangle = ( function () {\r\n\r\n\tconst point = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\tconst cornerFields = [ 'a', 'b', 'c' ];\r\n\tconst line1 = new Line3();\r\n\tconst line2 = new Line3();\r\n\r\n\treturn function distanceToTriangle( other, target1 = null, target2 = null ) {\r\n\r\n\t\tif ( this.intersectsTriangle( other ) ) {\r\n\r\n\t\t\t// TODO: This will not result in a point that lies on\r\n\t\t\t// the intersection line of the triangles\r\n\t\t\tif ( target1 || target2 ) {\r\n\r\n\t\t\t\tthis.getMidpoint( point );\r\n\t\t\t\tother.closestPointToPoint( point, point2 );\r\n\t\t\t\tthis.closestPointToPoint( point2, point );\r\n\r\n\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn 0;\r\n\r\n\t\t}\r\n\r\n\t\tlet closestDistanceSq = Infinity;\r\n\r\n\t\t// check all point distances\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tlet dist;\r\n\t\t\tconst field = cornerFields[ i ];\r\n\t\t\tconst otherVec = other[ field ];\r\n\t\t\tthis.closestPointToPoint( otherVec, point );\r\n\r\n\t\t\tdist = otherVec.distanceToSquared( point );\r\n\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\tif ( target2 ) target2.copy( otherVec );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tconst thisVec = this[ field ];\r\n\t\t\tother.closestPointToPoint( thisVec, point );\r\n\r\n\t\t\tdist = thisVec.distanceToSquared( point );\r\n\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( thisVec );\r\n\t\t\t\tif ( target2 ) target2.copy( point );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst f11 = cornerFields[ i ];\r\n\t\t\tconst f12 = cornerFields[ ( i + 1 ) % 3 ];\r\n\t\t\tline1.set( this[ f11 ], this[ f12 ] );\r\n\t\t\tfor ( let i2 = 0; i2 < 3; i2 ++ ) {\r\n\r\n\t\t\t\tconst f21 = cornerFields[ i2 ];\r\n\t\t\t\tconst f22 = cornerFields[ ( i2 + 1 ) % 3 ];\r\n\t\t\t\tline2.set( other[ f21 ], other[ f22 ] );\r\n\r\n\t\t\t\tclosestPointsSegmentToSegment( line1, line2, point, point2 );\r\n\r\n\t\t\t\tconst dist = point.distanceToSquared( point2 );\r\n\t\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}