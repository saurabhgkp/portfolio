{"ast":null,"code":"import { Color, Vector2 } from 'three';\nimport { StandardNode } from './StandardNode.js';\nimport { PropertyNode } from '../../inputs/PropertyNode.js';\nimport { OperatorNode } from '../../math/OperatorNode.js';\nimport { SwitchNode } from '../../utils/SwitchNode.js';\nimport { NormalMapNode } from '../../misc/NormalMapNode.js';\nfunction MeshStandardNode() {\n  StandardNode.call(this);\n  this.properties = {\n    color: new Color(0xffffff),\n    roughness: 0.5,\n    metalness: 0.5,\n    normalScale: new Vector2(1, 1)\n  };\n  this.inputs = {\n    color: new PropertyNode(this.properties, 'color', 'c'),\n    roughness: new PropertyNode(this.properties, 'roughness', 'f'),\n    metalness: new PropertyNode(this.properties, 'metalness', 'f'),\n    normalScale: new PropertyNode(this.properties, 'normalScale', 'v2')\n  };\n}\nMeshStandardNode.prototype = Object.create(StandardNode.prototype);\nMeshStandardNode.prototype.constructor = MeshStandardNode;\nMeshStandardNode.prototype.nodeType = 'MeshStandard';\nMeshStandardNode.prototype.build = function (builder) {\n  var props = this.properties,\n    inputs = this.inputs;\n  if (builder.isShader('fragment')) {\n    // slots\n    // * color\n    // * map\n    var color = builder.findNode(props.color, inputs.color),\n      map = builder.resolve(props.map);\n    this.color = map ? new OperatorNode(color, map, OperatorNode.MUL) : color; // slots\n    // * roughness\n    // * roughnessMap\n\n    var roughness = builder.findNode(props.roughness, inputs.roughness),\n      roughnessMap = builder.resolve(props.roughnessMap);\n    this.roughness = roughnessMap ? new OperatorNode(roughness, new SwitchNode(roughnessMap, 'g'), OperatorNode.MUL) : roughness; // slots\n    // * metalness\n    // * metalnessMap\n\n    var metalness = builder.findNode(props.metalness, inputs.metalness),\n      metalnessMap = builder.resolve(props.metalnessMap);\n    this.metalness = metalnessMap ? new OperatorNode(metalness, new SwitchNode(metalnessMap, 'b'), OperatorNode.MUL) : metalness; // slots\n    // * normalMap\n    // * normalScale\n\n    if (props.normalMap) {\n      this.normal = new NormalMapNode(builder.resolve(props.normalMap));\n      this.normal.scale = builder.findNode(props.normalScale, inputs.normalScale);\n    } else {\n      this.normal = undefined;\n    } // slots\n    // * envMap\n\n    this.environment = builder.resolve(props.envMap);\n  } // build code\n\n  return StandardNode.prototype.build.call(this, builder);\n};\nMeshStandardNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    console.warn('.toJSON not implemented in', this);\n  }\n  return data;\n};\nexport { MeshStandardNode };","map":null,"metadata":{},"sourceType":"module"}