{"ast":null,"code":"import _createClass from \"/home/cliffexpc63/my example/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/cliffexpc63/my example/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"/home/cliffexpc63/my example/portfolio/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/cliffexpc63/my example/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/cliffexpc63/my example/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Mesh, Color, Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, WebGLRenderTarget, MathUtils, ShaderMaterial, UniformsUtils, LinearFilter, RGBFormat } from 'three';\n\nvar Reflector = /*#__PURE__*/function (_Mesh) {\n  _inherits(Reflector, _Mesh);\n\n  var _super = _createSuper(Reflector);\n\n  function Reflector(geometry) {\n    var _this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Reflector);\n\n    _this = _super.call(this, geometry);\n    _this.type = 'Reflector';\n\n    var scope = _assertThisInitialized(_this);\n\n    var color = options.color !== undefined ? new Color(options.color) : new Color(0x7f7f7f);\n    var textureWidth = options.textureWidth || 512;\n    var textureHeight = options.textureHeight || 512;\n    var clipBias = options.clipBias || 0;\n    var shader = options.shader || Reflector.ReflectorShader; //\n\n    var reflectorPlane = new Plane();\n    var normal = new Vector3();\n    var reflectorWorldPosition = new Vector3();\n    var cameraWorldPosition = new Vector3();\n    var rotationMatrix = new Matrix4();\n    var lookAtPosition = new Vector3(0, 0, -1);\n    var clipPlane = new Vector4();\n    var view = new Vector3();\n    var target = new Vector3();\n    var q = new Vector4();\n    var textureMatrix = new Matrix4();\n    var virtualCamera = new PerspectiveCamera();\n    var parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat\n    };\n    var renderTarget = new WebGLRenderTarget(textureWidth, textureHeight, parameters);\n\n    if (!MathUtils.isPowerOfTwo(textureWidth) || !MathUtils.isPowerOfTwo(textureHeight)) {\n      renderTarget.texture.generateMipmaps = false;\n    }\n\n    var material = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(shader.uniforms),\n      fragmentShader: shader.fragmentShader,\n      vertexShader: shader.vertexShader\n    });\n    material.uniforms['tDiffuse'].value = renderTarget.texture;\n    material.uniforms['color'].value = color;\n    material.uniforms['textureMatrix'].value = textureMatrix;\n    _this.material = material;\n\n    _this.onBeforeRender = function (renderer, scene, camera) {\n      reflectorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n      cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n      rotationMatrix.extractRotation(scope.matrixWorld);\n      normal.set(0, 0, 1);\n      normal.applyMatrix4(rotationMatrix);\n      view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n      if (view.dot(normal) > 0) return;\n      view.reflect(normal).negate();\n      view.add(reflectorWorldPosition);\n      rotationMatrix.extractRotation(camera.matrixWorld);\n      lookAtPosition.set(0, 0, -1);\n      lookAtPosition.applyMatrix4(rotationMatrix);\n      lookAtPosition.add(cameraWorldPosition);\n      target.subVectors(reflectorWorldPosition, lookAtPosition);\n      target.reflect(normal).negate();\n      target.add(reflectorWorldPosition);\n      virtualCamera.position.copy(view);\n      virtualCamera.up.set(0, 1, 0);\n      virtualCamera.up.applyMatrix4(rotationMatrix);\n      virtualCamera.up.reflect(normal);\n      virtualCamera.lookAt(target);\n      virtualCamera.far = camera.far; // Used in WebGLBackground\n\n      virtualCamera.updateMatrixWorld();\n      virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n      textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n      textureMatrix.multiply(virtualCamera.projectionMatrix);\n      textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n      textureMatrix.multiply(scope.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n      // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n      reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n      reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n      clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n      var projectionMatrix = virtualCamera.projectionMatrix;\n      q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n      q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n      q.z = -1.0;\n      q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n      clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n      projectionMatrix.elements[2] = clipPlane.x;\n      projectionMatrix.elements[6] = clipPlane.y;\n      projectionMatrix.elements[10] = clipPlane.z + 1.0 - clipBias;\n      projectionMatrix.elements[14] = clipPlane.w; // Render\n\n      renderTarget.texture.encoding = renderer.outputEncoding;\n      scope.visible = false;\n      var currentRenderTarget = renderer.getRenderTarget();\n      var currentXrEnabled = renderer.xr.enabled;\n      var currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n      renderer.xr.enabled = false; // Avoid camera modification\n\n      renderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\n\n      renderer.setRenderTarget(renderTarget);\n      renderer.state.buffers.depth.setMask(true); // make sure the depth buffer is writable so it can be properly cleared, see #18897\n\n      if (renderer.autoClear === false) renderer.clear();\n      renderer.render(scene, virtualCamera);\n      renderer.xr.enabled = currentXrEnabled;\n      renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n      renderer.setRenderTarget(currentRenderTarget); // Restore viewport\n\n      var viewport = camera.viewport;\n\n      if (viewport !== undefined) {\n        renderer.state.viewport(viewport);\n      }\n\n      scope.visible = true;\n    };\n\n    _this.getRenderTarget = function () {\n      return renderTarget;\n    };\n\n    return _this;\n  }\n\n  return _createClass(Reflector);\n}(Mesh);\n\nReflector.prototype.isReflector = true;\nReflector.ReflectorShader = {\n  uniforms: {\n    color: {\n      value: null\n    },\n    tDiffuse: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    }\n  },\n  vertexShader:\n  /* glsl */\n  \"\\n\\t\\tuniform mat4 textureMatrix;\\n\\t\\tvarying vec4 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvUv = textureMatrix * vec4( position, 1.0 );\\n\\n\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n\\t\\t}\",\n  fragmentShader:\n  /* glsl */\n  \"\\n\\t\\tuniform vec3 color;\\n\\t\\tuniform sampler2D tDiffuse;\\n\\t\\tvarying vec4 vUv;\\n\\n\\t\\tfloat blendOverlay( float base, float blend ) {\\n\\n\\t\\t\\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\\n\\n\\t\\t}\\n\\n\\t\\tvec3 blendOverlay( vec3 base, vec3 blend ) {\\n\\n\\t\\t\\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );\\n\\n\\t\\t}\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvec4 base = texture2DProj( tDiffuse, vUv );\\n\\t\\t\\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\\n\\n\\t\\t}\"\n};\nexport { Reflector };","map":{"version":3,"names":["Mesh","Color","Plane","Vector3","Matrix4","Vector4","PerspectiveCamera","WebGLRenderTarget","MathUtils","ShaderMaterial","UniformsUtils","LinearFilter","RGBFormat","Reflector","geometry","options","type","scope","color","undefined","textureWidth","textureHeight","clipBias","shader","ReflectorShader","reflectorPlane","normal","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","view","target","q","textureMatrix","virtualCamera","parameters","minFilter","magFilter","format","renderTarget","isPowerOfTwo","texture","generateMipmaps","material","uniforms","clone","fragmentShader","vertexShader","value","onBeforeRender","renderer","scene","camera","setFromMatrixPosition","matrixWorld","extractRotation","set","applyMatrix4","subVectors","dot","reflect","negate","add","position","copy","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","x","y","z","constant","Math","sign","elements","w","multiplyScalar","encoding","outputEncoding","visible","currentRenderTarget","getRenderTarget","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","setRenderTarget","state","buffers","depth","setMask","autoClear","clear","render","viewport","prototype","isReflector","tDiffuse"],"sources":["/home/cliffexpc63/my example/portfolio/node_modules/three-stdlib/objects/Reflector.js"],"sourcesContent":["import { Mesh, Color, Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, WebGLRenderTarget, MathUtils, ShaderMaterial, UniformsUtils, LinearFilter, RGBFormat } from 'three';\n\nclass Reflector extends Mesh {\n  constructor(geometry, options = {}) {\n    super(geometry);\n    this.type = 'Reflector';\n    const scope = this;\n    const color = options.color !== undefined ? new Color(options.color) : new Color(0x7f7f7f);\n    const textureWidth = options.textureWidth || 512;\n    const textureHeight = options.textureHeight || 512;\n    const clipBias = options.clipBias || 0;\n    const shader = options.shader || Reflector.ReflectorShader; //\n\n    const reflectorPlane = new Plane();\n    const normal = new Vector3();\n    const reflectorWorldPosition = new Vector3();\n    const cameraWorldPosition = new Vector3();\n    const rotationMatrix = new Matrix4();\n    const lookAtPosition = new Vector3(0, 0, -1);\n    const clipPlane = new Vector4();\n    const view = new Vector3();\n    const target = new Vector3();\n    const q = new Vector4();\n    const textureMatrix = new Matrix4();\n    const virtualCamera = new PerspectiveCamera();\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat\n    };\n    const renderTarget = new WebGLRenderTarget(textureWidth, textureHeight, parameters);\n\n    if (!MathUtils.isPowerOfTwo(textureWidth) || !MathUtils.isPowerOfTwo(textureHeight)) {\n      renderTarget.texture.generateMipmaps = false;\n    }\n\n    const material = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(shader.uniforms),\n      fragmentShader: shader.fragmentShader,\n      vertexShader: shader.vertexShader\n    });\n    material.uniforms['tDiffuse'].value = renderTarget.texture;\n    material.uniforms['color'].value = color;\n    material.uniforms['textureMatrix'].value = textureMatrix;\n    this.material = material;\n\n    this.onBeforeRender = function (renderer, scene, camera) {\n      reflectorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n      cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n      rotationMatrix.extractRotation(scope.matrixWorld);\n      normal.set(0, 0, 1);\n      normal.applyMatrix4(rotationMatrix);\n      view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n      if (view.dot(normal) > 0) return;\n      view.reflect(normal).negate();\n      view.add(reflectorWorldPosition);\n      rotationMatrix.extractRotation(camera.matrixWorld);\n      lookAtPosition.set(0, 0, -1);\n      lookAtPosition.applyMatrix4(rotationMatrix);\n      lookAtPosition.add(cameraWorldPosition);\n      target.subVectors(reflectorWorldPosition, lookAtPosition);\n      target.reflect(normal).negate();\n      target.add(reflectorWorldPosition);\n      virtualCamera.position.copy(view);\n      virtualCamera.up.set(0, 1, 0);\n      virtualCamera.up.applyMatrix4(rotationMatrix);\n      virtualCamera.up.reflect(normal);\n      virtualCamera.lookAt(target);\n      virtualCamera.far = camera.far; // Used in WebGLBackground\n\n      virtualCamera.updateMatrixWorld();\n      virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n      textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n      textureMatrix.multiply(virtualCamera.projectionMatrix);\n      textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n      textureMatrix.multiply(scope.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n      // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n      reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n      reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n      clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n      const projectionMatrix = virtualCamera.projectionMatrix;\n      q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n      q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n      q.z = -1.0;\n      q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n      clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n      projectionMatrix.elements[2] = clipPlane.x;\n      projectionMatrix.elements[6] = clipPlane.y;\n      projectionMatrix.elements[10] = clipPlane.z + 1.0 - clipBias;\n      projectionMatrix.elements[14] = clipPlane.w; // Render\n\n      renderTarget.texture.encoding = renderer.outputEncoding;\n      scope.visible = false;\n      const currentRenderTarget = renderer.getRenderTarget();\n      const currentXrEnabled = renderer.xr.enabled;\n      const currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n      renderer.xr.enabled = false; // Avoid camera modification\n\n      renderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\n\n      renderer.setRenderTarget(renderTarget);\n      renderer.state.buffers.depth.setMask(true); // make sure the depth buffer is writable so it can be properly cleared, see #18897\n\n      if (renderer.autoClear === false) renderer.clear();\n      renderer.render(scene, virtualCamera);\n      renderer.xr.enabled = currentXrEnabled;\n      renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n      renderer.setRenderTarget(currentRenderTarget); // Restore viewport\n\n      const viewport = camera.viewport;\n\n      if (viewport !== undefined) {\n        renderer.state.viewport(viewport);\n      }\n\n      scope.visible = true;\n    };\n\n    this.getRenderTarget = function () {\n      return renderTarget;\n    };\n  }\n\n}\n\nReflector.prototype.isReflector = true;\nReflector.ReflectorShader = {\n  uniforms: {\n    color: {\n      value: null\n    },\n    tDiffuse: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n\t\tuniform mat4 textureMatrix;\n\t\tvarying vec4 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = textureMatrix * vec4( position, 1.0 );\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n  fragmentShader:\n  /* glsl */\n  `\n\t\tuniform vec3 color;\n\t\tuniform sampler2D tDiffuse;\n\t\tvarying vec4 vUv;\n\n\t\tfloat blendOverlay( float base, float blend ) {\n\n\t\t\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\n\n\t\t}\n\n\t\tvec3 blendOverlay( vec3 base, vec3 blend ) {\n\n\t\t\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvec4 base = texture2DProj( tDiffuse, vUv );\n\t\t\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\n\n\t\t}`\n};\n\nexport { Reflector };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}