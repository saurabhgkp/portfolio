{"ast":null,"code":"import { DepthTexture, UnsignedShortType, WebGLRenderTarget, LinearFilter, RGBAFormat, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, CustomBlending, Vector3, MathUtils, DataTexture, FloatType, RepeatWrapping } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from '../shaders/SSAOShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nvar SSAOPass = function SSAOPass(scene, camera, width, height) {\n  this.width = width !== undefined ? width : 512;\n  this.height = height !== undefined ? height : 512;\n  this.clear = true;\n  this.camera = camera;\n  this.scene = scene;\n  this.kernelRadius = 8;\n  this.kernelSize = 32;\n  this.kernel = [];\n  this.noiseTexture = null;\n  this.output = 0;\n  this.minDistance = 0.005;\n  this.maxDistance = 0.1;\n  this._visibilityCache = new Map(); //\n\n  this.generateSampleKernel();\n  this.generateRandomKernelRotations(); // beauty render target\n\n  var depthTexture = new DepthTexture();\n  depthTexture.type = UnsignedShortType;\n  this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  }); // normal render target with depth buffer\n\n  this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat,\n    depthTexture: depthTexture\n  }); // ssao render target\n\n  this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  });\n  this.blurRenderTarget = this.ssaoRenderTarget.clone(); // ssao material\n\n  if (SSAOShader === undefined) {\n    console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\n  }\n  this.ssaoMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAOShader.defines),\n    uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n    vertexShader: SSAOShader.vertexShader,\n    fragmentShader: SSAOShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n  this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n  this.ssaoMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n  this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture;\n  this.ssaoMaterial.uniforms['kernel'].value = this.kernel;\n  this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far;\n  this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height);\n  this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n  this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\n\n  this.normalMaterial = new MeshNormalMaterial();\n  this.normalMaterial.blending = NoBlending; // blur material\n\n  this.blurMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAOBlurShader.defines),\n    uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n    vertexShader: SSAOBlurShader.vertexShader,\n    fragmentShader: SSAOBlurShader.fragmentShader\n  });\n  this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n  this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // material for rendering the depth\n\n  this.depthRenderMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAODepthShader.defines),\n    uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n    vertexShader: SSAODepthShader.vertexShader,\n    fragmentShader: SSAODepthShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.depthRenderMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n  this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\n\n  this.copyMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(CopyShader.uniforms),\n    vertexShader: CopyShader.vertexShader,\n    fragmentShader: CopyShader.fragmentShader,\n    transparent: true,\n    depthTest: false,\n    depthWrite: false,\n    blendSrc: DstColorFactor,\n    blendDst: ZeroFactor,\n    blendEquation: AddEquation,\n    blendSrcAlpha: DstAlphaFactor,\n    blendDstAlpha: ZeroFactor,\n    blendEquationAlpha: AddEquation\n  });\n  this.fsQuad = new FullScreenQuad(null);\n  this.originalClearColor = new Color();\n};\nSSAOPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: SSAOPass,\n  dispose: function dispose() {\n    // dispose render targets\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose(); // dispose materials\n\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  },\n  render: function render(renderer, writeBuffer\n  /*, readBuffer, deltaTime, maskActive */) {\n    // render beauty\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    this.restoreVisibility(); // render SSAO\n\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget); // render blur\n\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget); // output result to screen\n\n    switch (this.output) {\n      case SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      default:\n        console.warn('THREE.SSAOPass: Unknown output type.');\n    }\n  },\n  renderPass: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderOverride: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  setSize: function setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n  },\n  generateSampleKernel: function generateSampleKernel() {\n    var kernelSize = this.kernelSize;\n    var kernel = this.kernel;\n    for (var i = 0; i < kernelSize; i++) {\n      var sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      var scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  },\n  generateRandomKernelRotations: function generateRandomKernelRotations() {\n    var width = 4,\n      height = 4;\n    if (SimplexNoise === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\n    }\n    var simplex = new SimplexNoise();\n    var size = width * height;\n    var data = new Float32Array(size * 4);\n    for (var i = 0; i < size; i++) {\n      var stride = i * 4;\n      var x = Math.random() * 2 - 1;\n      var y = Math.random() * 2 - 1;\n      var z = 0;\n      var noise = simplex.noise3d(x, y, z);\n      data[stride] = noise;\n      data[stride + 1] = noise;\n      data[stride + 2] = noise;\n      data[stride + 3] = 1;\n    }\n    this.noiseTexture = new DataTexture(data, width, height, RGBAFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n  },\n  overrideVisibility: function overrideVisibility() {\n    var scene = this.scene;\n    var cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine) object.visible = false;\n    });\n  },\n  restoreVisibility: function restoreVisibility() {\n    var scene = this.scene;\n    var cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      var visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n});\nSSAOPass.OUTPUT = {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n};\nexport { SSAOPass };","map":null,"metadata":{},"sourceType":"module"}