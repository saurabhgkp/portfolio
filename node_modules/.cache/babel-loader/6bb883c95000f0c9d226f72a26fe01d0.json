{"ast":null,"code":"import _classCallCheck from \"/home/cliffexpc63/my example/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cliffexpc63/my example/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Group, SphereGeometry, BoxGeometry, MeshStandardMaterial, Mesh } from 'three';\nvar XRHandPrimitiveModel = /*#__PURE__*/function () {\n  function XRHandPrimitiveModel(handModel, controller, path, handedness, options) {\n    _classCallCheck(this, XRHandPrimitiveModel);\n    this.controller = controller;\n    this.handModel = handModel;\n    this.envMap = null;\n    this.handMesh = new Group();\n    this.handModel.add(this.handMesh);\n    if (window.XRHand) {\n      var geometry;\n      if (!options || !options.primitive || options.primitive === 'sphere') {\n        geometry = new SphereGeometry(1, 10, 10);\n      } else if (options.primitive === 'box') {\n        geometry = new BoxGeometry(1, 1, 1);\n      }\n      var jointMaterial = new MeshStandardMaterial({\n        color: 0xffffff,\n        roughness: 1,\n        metalness: 0\n      });\n      var tipMaterial = new MeshStandardMaterial({\n        color: 0x999999,\n        roughness: 1,\n        metalness: 0\n      });\n      var joints = ['wrist', 'thumb-metacarpal', 'thumb-phalanx-proximal', 'thumb-phalanx-distal', 'thumb-tip', 'index-finger-metacarpal', 'index-finger-phalanx-proximal', 'index-finger-phalanx-intermediate', 'index-finger-phalanx-distal', 'index-finger-tip', 'middle-finger-metacarpal', 'middle-finger-phalanx-proximal', 'middle-finger-phalanx-intermediate', 'middle-finger-phalanx-distal', 'middle-finger-tip', 'ring-finger-metacarpal', 'ring-finger-phalanx-proximal', 'ring-finger-phalanx-intermediate', 'ring-finger-phalanx-distal', 'ring-finger-tip', 'pinky-finger-metacarpal', 'pinky-finger-phalanx-proximal', 'pinky-finger-phalanx-intermediate', 'pinky-finger-phalanx-distal', 'pinky-finger-tip'];\n      for (var _i = 0, _joints = joints; _i < _joints.length; _i++) {\n        var jointName = _joints[_i];\n        var cube = new Mesh(geometry, jointName.indexOf('tip') !== -1 ? tipMaterial : jointMaterial);\n        cube.castShadow = true;\n        cube.receiveShadow = true;\n        cube.jointName = jointName;\n        this.handMesh.add(cube);\n      }\n    }\n  }\n  _createClass(XRHandPrimitiveModel, [{\n    key: \"updateMesh\",\n    value: function updateMesh() {\n      var defaultRadius = 0.008;\n      var objects = this.handMesh.children; // XR Joints\n\n      var XRJoints = this.controller.joints;\n      for (var i = 0; i < objects.length; i++) {\n        var jointMesh = objects[i];\n        var XRJoint = XRJoints[jointMesh.jointName];\n        if (XRJoint.visible) {\n          jointMesh.position.copy(XRJoint.position);\n          jointMesh.quaternion.copy(XRJoint.quaternion);\n          jointMesh.scale.setScalar(XRJoint.jointRadius || defaultRadius);\n        }\n        jointMesh.visible = XRJoint.visible;\n      }\n    }\n  }]);\n  return XRHandPrimitiveModel;\n}();\nexport { XRHandPrimitiveModel };","map":null,"metadata":{},"sourceType":"module"}