{"ast":null,"code":"import { ExpressionNode } from '../core/ExpressionNode.js';\nimport { Matrix3Node } from '../inputs/Matrix3Node.js';\nimport { UVNode } from '../accessors/UVNode.js';\nfunction UVTransformNode(uv, position) {\n  ExpressionNode.call(this, '( uvTransform * vec3( uvNode, 1 ) ).xy', 'vec2');\n  this.uv = uv || new UVNode();\n  this.position = position || new Matrix3Node();\n}\nUVTransformNode.prototype = Object.create(ExpressionNode.prototype);\nUVTransformNode.prototype.constructor = UVTransformNode;\nUVTransformNode.prototype.nodeType = 'UVTransform';\nUVTransformNode.prototype.generate = function (builder, output) {\n  this.keywords['uvNode'] = this.uv;\n  this.keywords['uvTransform'] = this.position;\n  return ExpressionNode.prototype.generate.call(this, builder, output);\n};\nUVTransformNode.prototype.setUvTransform = function (tx, ty, sx, sy, rotation, cx, cy) {\n  cx = cx !== undefined ? cx : 0.5;\n  cy = cy !== undefined ? cy : 0.5;\n  this.position.value.setUvTransform(tx, ty, sx, sy, rotation, cx, cy);\n};\nUVTransformNode.prototype.copy = function (source) {\n  ExpressionNode.prototype.copy.call(this, source);\n  this.uv = source.uv;\n  this.position = source.position;\n  return this;\n};\nUVTransformNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.uv = this.uv.toJSON(meta).uuid;\n    data.position = this.position.toJSON(meta).uuid;\n  }\n  return data;\n};\nexport { UVTransformNode };","map":null,"metadata":{},"sourceType":"module"}