{"ast":null,"code":"import _classCallCheck from \"/home/cliffexpc63/my example/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/cliffexpc63/my example/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/cliffexpc63/my example/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/cliffexpc63/my example/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, LoaderUtils, FileLoader, TextureLoader, RepeatWrapping, ClampToEdgeWrapping, Texture, MeshPhongMaterial, MeshLambertMaterial, Color, sRGBEncoding, EquirectangularReflectionMapping, Matrix4, Group, Bone, PropertyBinding, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, MathUtils, SpotLight, DirectionalLight, SkinnedMesh, Mesh, LineBasicMaterial, Line, Vector3, Skeleton, AmbientLight, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, Matrix3, Vector4, BufferAttribute, AnimationClip, Quaternion, Euler, VectorKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack } from 'three';\nimport { unzlibSync } from 'fflate';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\n * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * \tBinary format specification:\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\nvar fbxTree;\nvar connections;\nvar sceneGraph;\n\nvar FBXLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(FBXLoader, _Loader);\n\n  var _super = _createSuper(FBXLoader);\n\n  function FBXLoader(manager) {\n    _classCallCheck(this, FBXLoader);\n\n    return _super.call(this, manager);\n  }\n\n  _createClass(FBXLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(scope.parse(buffer, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(FBXBuffer, path) {\n      if (isFbxFormatBinary(FBXBuffer)) {\n        fbxTree = new BinaryParser().parse(FBXBuffer);\n      } else {\n        var FBXText = convertArrayBufferToString(FBXBuffer);\n\n        if (!isFbxFormatASCII(FBXText)) {\n          throw new Error('THREE.FBXLoader: Unknown format.');\n        }\n\n        if (getFbxVersion(FBXText) < 7000) {\n          throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n        }\n\n        fbxTree = new TextParser().parse(FBXText);\n      } // console.log( fbxTree );\n\n\n      var textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n      return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n    }\n  }]);\n\n  return FBXLoader;\n}(Loader); // Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\n\n\nvar FBXTreeParser = /*#__PURE__*/function () {\n  function FBXTreeParser(textureLoader, manager) {\n    _classCallCheck(this, FBXTreeParser);\n\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n\n  _createClass(FBXTreeParser, [{\n    key: \"parse\",\n    value: function parse() {\n      connections = this.parseConnections();\n      var images = this.parseImages();\n      var textures = this.parseTextures(images);\n      var materials = this.parseMaterials(textures);\n      var deformers = this.parseDeformers();\n      var geometryMap = new GeometryParser().parse(deformers);\n      this.parseScene(deformers, geometryMap, materials);\n      return sceneGraph;\n    } // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n    // and details the connection type\n\n  }, {\n    key: \"parseConnections\",\n    value: function parseConnections() {\n      var connectionMap = new Map();\n\n      if ('Connections' in fbxTree) {\n        var rawConnections = fbxTree.Connections.connections;\n        rawConnections.forEach(function (rawConnection) {\n          var fromID = rawConnection[0];\n          var toID = rawConnection[1];\n          var relationship = rawConnection[2];\n\n          if (!connectionMap.has(fromID)) {\n            connectionMap.set(fromID, {\n              parents: [],\n              children: []\n            });\n          }\n\n          var parentRelationship = {\n            ID: toID,\n            relationship: relationship\n          };\n          connectionMap.get(fromID).parents.push(parentRelationship);\n\n          if (!connectionMap.has(toID)) {\n            connectionMap.set(toID, {\n              parents: [],\n              children: []\n            });\n          }\n\n          var childRelationship = {\n            ID: fromID,\n            relationship: relationship\n          };\n          connectionMap.get(toID).children.push(childRelationship);\n        });\n      }\n\n      return connectionMap;\n    } // Parse FBXTree.Objects.Video for embedded image data\n    // These images are connected to textures in FBXTree.Objects.Textures\n    // via FBXTree.Connections.\n\n  }, {\n    key: \"parseImages\",\n    value: function parseImages() {\n      var images = {};\n      var blobs = {};\n\n      if ('Video' in fbxTree.Objects) {\n        var videoNodes = fbxTree.Objects.Video;\n\n        for (var nodeID in videoNodes) {\n          var videoNode = videoNodes[nodeID];\n          var id = parseInt(nodeID);\n          images[id] = videoNode.RelativeFilename || videoNode.Filename; // raw image data is in videoNode.Content\n\n          if ('Content' in videoNode) {\n            var arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n            var base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n\n            if (arrayBufferContent || base64Content) {\n              var image = this.parseImage(videoNodes[nodeID]);\n              blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n            }\n          }\n        }\n      }\n\n      for (var _id in images) {\n        var filename = images[_id];\n        if (blobs[filename] !== undefined) images[_id] = blobs[filename];else images[_id] = images[_id].split('\\\\').pop();\n      }\n\n      return images;\n    } // Parse embedded image data in FBXTree.Video.Content\n\n  }, {\n    key: \"parseImage\",\n    value: function parseImage(videoNode) {\n      var content = videoNode.Content;\n      var fileName = videoNode.RelativeFilename || videoNode.Filename;\n      var extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n      var type;\n\n      switch (extension) {\n        case 'bmp':\n          type = 'image/bmp';\n          break;\n\n        case 'jpg':\n        case 'jpeg':\n          type = 'image/jpeg';\n          break;\n\n        case 'png':\n          type = 'image/png';\n          break;\n\n        case 'tif':\n          type = 'image/tiff';\n          break;\n\n        case 'tga':\n          if (this.manager.getHandler('.tga') === null) {\n            console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n          }\n\n          type = 'image/tga';\n          break;\n\n        default:\n          console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n          return;\n      }\n\n      if (typeof content === 'string') {\n        // ASCII format\n        return 'data:' + type + ';base64,' + content;\n      } else {\n        // Binary Format\n        var array = new Uint8Array(content);\n        return window.URL.createObjectURL(new Blob([array], {\n          type: type\n        }));\n      }\n    } // Parse nodes in FBXTree.Objects.Texture\n    // These contain details such as UV scaling, cropping, rotation etc and are connected\n    // to images in FBXTree.Objects.Video\n\n  }, {\n    key: \"parseTextures\",\n    value: function parseTextures(images) {\n      var textureMap = new Map();\n\n      if ('Texture' in fbxTree.Objects) {\n        var textureNodes = fbxTree.Objects.Texture;\n\n        for (var nodeID in textureNodes) {\n          var texture = this.parseTexture(textureNodes[nodeID], images);\n          textureMap.set(parseInt(nodeID), texture);\n        }\n      }\n\n      return textureMap;\n    } // Parse individual node in FBXTree.Objects.Texture\n\n  }, {\n    key: \"parseTexture\",\n    value: function parseTexture(textureNode, images) {\n      var texture = this.loadTexture(textureNode, images);\n      texture.ID = textureNode.id;\n      texture.name = textureNode.attrName;\n      var wrapModeU = textureNode.WrapModeU;\n      var wrapModeV = textureNode.WrapModeV;\n      var valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n      var valueV = wrapModeV !== undefined ? wrapModeV.value : 0; // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n      // 0: repeat(default), 1: clamp\n\n      texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n      texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\n      if ('Scaling' in textureNode) {\n        var values = textureNode.Scaling.value;\n        texture.repeat.x = values[0];\n        texture.repeat.y = values[1];\n      }\n\n      return texture;\n    } // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n\n  }, {\n    key: \"loadTexture\",\n    value: function loadTexture(textureNode, images) {\n      var fileName;\n      var currentPath = this.textureLoader.path;\n      var children = connections.get(textureNode.id).children;\n\n      if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n        fileName = images[children[0].ID];\n\n        if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n          this.textureLoader.setPath(undefined);\n        }\n      }\n\n      var texture;\n      var extension = textureNode.FileName.slice(-3).toLowerCase();\n\n      if (extension === 'tga') {\n        var loader = this.manager.getHandler('.tga');\n\n        if (loader === null) {\n          console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n          texture = new Texture();\n        } else {\n          texture = loader.load(fileName);\n        }\n      } else if (extension === 'psd') {\n        console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        texture = this.textureLoader.load(fileName);\n      }\n\n      this.textureLoader.setPath(currentPath);\n      return texture;\n    } // Parse nodes in FBXTree.Objects.Material\n\n  }, {\n    key: \"parseMaterials\",\n    value: function parseMaterials(textureMap) {\n      var materialMap = new Map();\n\n      if ('Material' in fbxTree.Objects) {\n        var materialNodes = fbxTree.Objects.Material;\n\n        for (var nodeID in materialNodes) {\n          var material = this.parseMaterial(materialNodes[nodeID], textureMap);\n          if (material !== null) materialMap.set(parseInt(nodeID), material);\n        }\n      }\n\n      return materialMap;\n    } // Parse single node in FBXTree.Objects.Material\n    // Materials are connected to texture maps in FBXTree.Objects.Textures\n    // FBX format currently only supports Lambert and Phong shading models\n\n  }, {\n    key: \"parseMaterial\",\n    value: function parseMaterial(materialNode, textureMap) {\n      var ID = materialNode.id;\n      var name = materialNode.attrName;\n      var type = materialNode.ShadingModel; // Case where FBX wraps shading model in property object.\n\n      if (typeof type === 'object') {\n        type = type.value;\n      } // Ignore unused materials which don't have any connections.\n\n\n      if (!connections.has(ID)) return null;\n      var parameters = this.parseParameters(materialNode, textureMap, ID);\n      var material;\n\n      switch (type.toLowerCase()) {\n        case 'phong':\n          material = new MeshPhongMaterial();\n          break;\n\n        case 'lambert':\n          material = new MeshLambertMaterial();\n          break;\n\n        default:\n          console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n          material = new MeshPhongMaterial();\n          break;\n      }\n\n      material.setValues(parameters);\n      material.name = name;\n      return material;\n    } // Parse FBX material and return parameters suitable for a three.js material\n    // Also parse the texture map and return any textures associated with the material\n\n  }, {\n    key: \"parseParameters\",\n    value: function parseParameters(materialNode, textureMap, ID) {\n      var parameters = {};\n\n      if (materialNode.BumpFactor) {\n        parameters.bumpScale = materialNode.BumpFactor.value;\n      }\n\n      if (materialNode.Diffuse) {\n        parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n      } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')) {\n        // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n        parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n      }\n\n      if (materialNode.DisplacementFactor) {\n        parameters.displacementScale = materialNode.DisplacementFactor.value;\n      }\n\n      if (materialNode.Emissive) {\n        parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n      } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')) {\n        // The blender exporter exports emissive color here instead of in materialNode.Emissive\n        parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n      }\n\n      if (materialNode.EmissiveFactor) {\n        parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n      }\n\n      if (materialNode.Opacity) {\n        parameters.opacity = parseFloat(materialNode.Opacity.value);\n      }\n\n      if (parameters.opacity < 1.0) {\n        parameters.transparent = true;\n      }\n\n      if (materialNode.ReflectionFactor) {\n        parameters.reflectivity = materialNode.ReflectionFactor.value;\n      }\n\n      if (materialNode.Shininess) {\n        parameters.shininess = materialNode.Shininess.value;\n      }\n\n      if (materialNode.Specular) {\n        parameters.specular = new Color().fromArray(materialNode.Specular.value);\n      } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n        // The blender exporter exports specular color here instead of in materialNode.Specular\n        parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n      }\n\n      var scope = this;\n      connections.get(ID).children.forEach(function (child) {\n        var type = child.relationship;\n\n        switch (type) {\n          case 'Bump':\n            parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case 'Maya|TEX_ao_map':\n            parameters.aoMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case 'DiffuseColor':\n          case 'Maya|TEX_color_map':\n            parameters.map = scope.getTexture(textureMap, child.ID);\n            parameters.map.encoding = sRGBEncoding;\n            break;\n\n          case 'DisplacementColor':\n            parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case 'EmissiveColor':\n            parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n            parameters.emissiveMap.encoding = sRGBEncoding;\n            break;\n\n          case 'NormalMap':\n          case 'Maya|TEX_normal_map':\n            parameters.normalMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case 'ReflectionColor':\n            parameters.envMap = scope.getTexture(textureMap, child.ID);\n            parameters.envMap.mapping = EquirectangularReflectionMapping;\n            parameters.envMap.encoding = sRGBEncoding;\n            break;\n\n          case 'SpecularColor':\n            parameters.specularMap = scope.getTexture(textureMap, child.ID);\n            parameters.specularMap.encoding = sRGBEncoding;\n            break;\n\n          case 'TransparentColor':\n          case 'TransparencyFactor':\n            parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n            parameters.transparent = true;\n            break;\n\n          case 'AmbientColor':\n          case 'ShininessExponent': // AKA glossiness map\n\n          case 'SpecularFactor': // AKA specularLevel\n\n          case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\n          default:\n            console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n            break;\n        }\n      });\n      return parameters;\n    } // get a texture from the textureMap for use by a material.\n\n  }, {\n    key: \"getTexture\",\n    value: function getTexture(textureMap, id) {\n      // if the texture is a layered texture, just use the first layer and issue a warning\n      if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n        console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n        id = connections.get(id).children[0].ID;\n      }\n\n      return textureMap.get(id);\n    } // Parse nodes in FBXTree.Objects.Deformer\n    // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n    // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\n  }, {\n    key: \"parseDeformers\",\n    value: function parseDeformers() {\n      var skeletons = {};\n      var morphTargets = {};\n\n      if ('Deformer' in fbxTree.Objects) {\n        var DeformerNodes = fbxTree.Objects.Deformer;\n\n        for (var nodeID in DeformerNodes) {\n          var deformerNode = DeformerNodes[nodeID];\n          var relationships = connections.get(parseInt(nodeID));\n\n          if (deformerNode.attrType === 'Skin') {\n            var skeleton = this.parseSkeleton(relationships, DeformerNodes);\n            skeleton.ID = nodeID;\n\n            if (relationships.parents.length > 1) {\n              console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n            }\n\n            skeleton.geometryID = relationships.parents[0].ID;\n            skeletons[nodeID] = skeleton;\n          } else if (deformerNode.attrType === 'BlendShape') {\n            var morphTarget = {\n              id: nodeID\n            };\n            morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n            morphTarget.id = nodeID;\n\n            if (relationships.parents.length > 1) {\n              console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n            }\n\n            morphTargets[nodeID] = morphTarget;\n          }\n        }\n      }\n\n      return {\n        skeletons: skeletons,\n        morphTargets: morphTargets\n      };\n    } // Parse single nodes in FBXTree.Objects.Deformer\n    // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n    // Each skin node represents a skeleton and each cluster node represents a bone\n\n  }, {\n    key: \"parseSkeleton\",\n    value: function parseSkeleton(relationships, deformerNodes) {\n      var rawBones = [];\n      relationships.children.forEach(function (child) {\n        var boneNode = deformerNodes[child.ID];\n        if (boneNode.attrType !== 'Cluster') return;\n        var rawBone = {\n          ID: child.ID,\n          indices: [],\n          weights: [],\n          transformLink: new Matrix4().fromArray(boneNode.TransformLink.a) // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n          // linkMode: boneNode.Mode,\n\n        };\n\n        if ('Indexes' in boneNode) {\n          rawBone.indices = boneNode.Indexes.a;\n          rawBone.weights = boneNode.Weights.a;\n        }\n\n        rawBones.push(rawBone);\n      });\n      return {\n        rawBones: rawBones,\n        bones: []\n      };\n    } // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\n  }, {\n    key: \"parseMorphTargets\",\n    value: function parseMorphTargets(relationships, deformerNodes) {\n      var rawMorphTargets = [];\n\n      for (var i = 0; i < relationships.children.length; i++) {\n        var child = relationships.children[i];\n        var morphTargetNode = deformerNodes[child.ID];\n        var rawMorphTarget = {\n          name: morphTargetNode.attrName,\n          initialWeight: morphTargetNode.DeformPercent,\n          id: morphTargetNode.id,\n          fullWeights: morphTargetNode.FullWeights.a\n        };\n        if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n        rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n          return child.relationship === undefined;\n        })[0].ID;\n        rawMorphTargets.push(rawMorphTarget);\n      }\n\n      return rawMorphTargets;\n    } // create the main Group() to be returned by the loader\n\n  }, {\n    key: \"parseScene\",\n    value: function parseScene(deformers, geometryMap, materialMap) {\n      sceneGraph = new Group();\n      var modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n      var modelNodes = fbxTree.Objects.Model;\n      var scope = this;\n      modelMap.forEach(function (model) {\n        var modelNode = modelNodes[model.ID];\n        scope.setLookAtProperties(model, modelNode);\n        var parentConnections = connections.get(model.ID).parents;\n        parentConnections.forEach(function (connection) {\n          var parent = modelMap.get(connection.ID);\n          if (parent !== undefined) parent.add(model);\n        });\n\n        if (model.parent === null) {\n          sceneGraph.add(model);\n        }\n      });\n      this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n      this.createAmbientLight();\n      this.setupMorphMaterials();\n      sceneGraph.traverse(function (node) {\n        if (node.userData.transformData) {\n          if (node.parent) {\n            node.userData.transformData.parentMatrix = node.parent.matrix;\n            node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n          }\n\n          var transform = generateTransform(node.userData.transformData);\n          node.applyMatrix4(transform);\n          node.updateWorldMatrix();\n        }\n      });\n      var animations = new AnimationParser().parse(); // if all the models where already combined in a single group, just return that\n\n      if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n        sceneGraph.children[0].animations = animations;\n        sceneGraph = sceneGraph.children[0];\n      }\n\n      sceneGraph.animations = animations;\n    } // parse nodes in FBXTree.Objects.Model\n\n  }, {\n    key: \"parseModels\",\n    value: function parseModels(skeletons, geometryMap, materialMap) {\n      var modelMap = new Map();\n      var modelNodes = fbxTree.Objects.Model;\n\n      for (var nodeID in modelNodes) {\n        var id = parseInt(nodeID);\n        var node = modelNodes[nodeID];\n        var relationships = connections.get(id);\n        var model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n\n        if (!model) {\n          switch (node.attrType) {\n            case 'Camera':\n              model = this.createCamera(relationships);\n              break;\n\n            case 'Light':\n              model = this.createLight(relationships);\n              break;\n\n            case 'Mesh':\n              model = this.createMesh(relationships, geometryMap, materialMap);\n              break;\n\n            case 'NurbsCurve':\n              model = this.createCurve(relationships, geometryMap);\n              break;\n\n            case 'LimbNode':\n            case 'Root':\n              model = new Bone();\n              break;\n\n            case 'Null':\n            default:\n              model = new Group();\n              break;\n          }\n\n          model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : '';\n          model.ID = id;\n        }\n\n        this.getTransformData(model, node);\n        modelMap.set(id, model);\n      }\n\n      return modelMap;\n    }\n  }, {\n    key: \"buildSkeleton\",\n    value: function buildSkeleton(relationships, skeletons, id, name) {\n      var bone = null;\n      relationships.parents.forEach(function (parent) {\n        var _loop = function _loop(ID) {\n          var skeleton = skeletons[ID];\n          skeleton.rawBones.forEach(function (rawBone, i) {\n            if (rawBone.ID === parent.ID) {\n              var subBone = bone;\n              bone = new Bone();\n              bone.matrixWorld.copy(rawBone.transformLink); // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n              bone.name = name ? PropertyBinding.sanitizeNodeName(name) : '';\n              bone.ID = id;\n              skeleton.bones[i] = bone; // In cases where a bone is shared between multiple meshes\n              // duplicate the bone here and and it as a child of the first bone\n\n              if (subBone !== null) {\n                bone.add(subBone);\n              }\n            }\n          });\n        };\n\n        for (var ID in skeletons) {\n          _loop(ID);\n        }\n      });\n      return bone;\n    } // create a PerspectiveCamera or OrthographicCamera\n\n  }, {\n    key: \"createCamera\",\n    value: function createCamera(relationships) {\n      var model;\n      var cameraAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n        if (attr !== undefined) {\n          cameraAttribute = attr;\n        }\n      });\n\n      if (cameraAttribute === undefined) {\n        model = new Object3D();\n      } else {\n        var type = 0;\n\n        if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n          type = 1;\n        }\n\n        var nearClippingPlane = 1;\n\n        if (cameraAttribute.NearPlane !== undefined) {\n          nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n        }\n\n        var farClippingPlane = 1000;\n\n        if (cameraAttribute.FarPlane !== undefined) {\n          farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n        }\n\n        var width = window.innerWidth;\n        var height = window.innerHeight;\n\n        if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n          width = cameraAttribute.AspectWidth.value;\n          height = cameraAttribute.AspectHeight.value;\n        }\n\n        var aspect = width / height;\n        var fov = 45;\n\n        if (cameraAttribute.FieldOfView !== undefined) {\n          fov = cameraAttribute.FieldOfView.value;\n        }\n\n        var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n        switch (type) {\n          case 0:\n            // Perspective\n            model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n            if (focalLength !== null) model.setFocalLength(focalLength);\n            break;\n\n          case 1:\n            // Orthographic\n            model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n            break;\n\n          default:\n            console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n            model = new Object3D();\n            break;\n        }\n      }\n\n      return model;\n    } // Create a DirectionalLight, PointLight or SpotLight\n\n  }, {\n    key: \"createLight\",\n    value: function createLight(relationships) {\n      var model;\n      var lightAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n        if (attr !== undefined) {\n          lightAttribute = attr;\n        }\n      });\n\n      if (lightAttribute === undefined) {\n        model = new Object3D();\n      } else {\n        var type; // LightType can be undefined for Point lights\n\n        if (lightAttribute.LightType === undefined) {\n          type = 0;\n        } else {\n          type = lightAttribute.LightType.value;\n        }\n\n        var color = 0xffffff;\n\n        if (lightAttribute.Color !== undefined) {\n          color = new Color().fromArray(lightAttribute.Color.value);\n        }\n\n        var intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100; // light disabled\n\n        if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n          intensity = 0;\n        }\n\n        var distance = 0;\n\n        if (lightAttribute.FarAttenuationEnd !== undefined) {\n          if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n            distance = 0;\n          } else {\n            distance = lightAttribute.FarAttenuationEnd.value;\n          }\n        } // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\n\n        var decay = 1;\n\n        switch (type) {\n          case 0:\n            // Point\n            model = new PointLight(color, intensity, distance, decay);\n            break;\n\n          case 1:\n            // Directional\n            model = new DirectionalLight(color, intensity);\n            break;\n\n          case 2:\n            // Spot\n            var angle = Math.PI / 3;\n\n            if (lightAttribute.InnerAngle !== undefined) {\n              angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n            }\n\n            var penumbra = 0;\n\n            if (lightAttribute.OuterAngle !== undefined) {\n              // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n              // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n              // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n              penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n              penumbra = Math.max(penumbra, 1);\n            }\n\n            model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n            break;\n\n          default:\n            console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n            model = new PointLight(color, intensity);\n            break;\n        }\n\n        if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n          model.castShadow = true;\n        }\n      }\n\n      return model;\n    }\n  }, {\n    key: \"createMesh\",\n    value: function createMesh(relationships, geometryMap, materialMap) {\n      var model;\n      var geometry = null;\n      var material = null;\n      var materials = []; // get geometry and materials(s) from connections\n\n      relationships.children.forEach(function (child) {\n        if (geometryMap.has(child.ID)) {\n          geometry = geometryMap.get(child.ID);\n        }\n\n        if (materialMap.has(child.ID)) {\n          materials.push(materialMap.get(child.ID));\n        }\n      });\n\n      if (materials.length > 1) {\n        material = materials;\n      } else if (materials.length > 0) {\n        material = materials[0];\n      } else {\n        material = new MeshPhongMaterial({\n          color: 0xcccccc\n        });\n        materials.push(material);\n      }\n\n      if ('color' in geometry.attributes) {\n        materials.forEach(function (material) {\n          material.vertexColors = true;\n        });\n      }\n\n      if (geometry.FBX_Deformer) {\n        materials.forEach(function (material) {\n          material.skinning = true;\n        });\n        model = new SkinnedMesh(geometry, material);\n        model.normalizeSkinWeights();\n      } else {\n        model = new Mesh(geometry, material);\n      }\n\n      return model;\n    }\n  }, {\n    key: \"createCurve\",\n    value: function createCurve(relationships, geometryMap) {\n      var geometry = relationships.children.reduce(function (geo, child) {\n        if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n        return geo;\n      }, null); // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\n      var material = new LineBasicMaterial({\n        color: 0x3300ff,\n        linewidth: 1\n      });\n      return new Line(geometry, material);\n    } // parse the model node for transform data\n\n  }, {\n    key: \"getTransformData\",\n    value: function getTransformData(model, modelNode) {\n      var transformData = {};\n      if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = 'ZYX';\n      if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n      if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n      if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n      if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n      if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n      if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n      if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n      if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n      if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n      model.userData.transformData = transformData;\n    }\n  }, {\n    key: \"setLookAtProperties\",\n    value: function setLookAtProperties(model, modelNode) {\n      if ('LookAtProperty' in modelNode) {\n        var children = connections.get(model.ID).children;\n        children.forEach(function (child) {\n          if (child.relationship === 'LookAtProperty') {\n            var lookAtTarget = fbxTree.Objects.Model[child.ID];\n\n            if ('Lcl_Translation' in lookAtTarget) {\n              var pos = lookAtTarget.Lcl_Translation.value; // DirectionalLight, SpotLight\n\n              if (model.target !== undefined) {\n                model.target.position.fromArray(pos);\n                sceneGraph.add(model.target);\n              } else {\n                // Cameras and other Object3Ds\n                model.lookAt(new Vector3().fromArray(pos));\n              }\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"bindSkeleton\",\n    value: function bindSkeleton(skeletons, geometryMap, modelMap) {\n      var bindMatrices = this.parsePoseNodes();\n\n      var _loop2 = function _loop2(ID) {\n        var skeleton = skeletons[ID];\n        var parents = connections.get(parseInt(skeleton.ID)).parents;\n        parents.forEach(function (parent) {\n          if (geometryMap.has(parent.ID)) {\n            var geoID = parent.ID;\n            var geoRelationships = connections.get(geoID);\n            geoRelationships.parents.forEach(function (geoConnParent) {\n              if (modelMap.has(geoConnParent.ID)) {\n                var model = modelMap.get(geoConnParent.ID);\n                model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n              }\n            });\n          }\n        });\n      };\n\n      for (var ID in skeletons) {\n        _loop2(ID);\n      }\n    }\n  }, {\n    key: \"parsePoseNodes\",\n    value: function parsePoseNodes() {\n      var bindMatrices = {};\n\n      if ('Pose' in fbxTree.Objects) {\n        var BindPoseNode = fbxTree.Objects.Pose;\n\n        for (var nodeID in BindPoseNode) {\n          if (BindPoseNode[nodeID].attrType === 'BindPose') {\n            var poseNodes = BindPoseNode[nodeID].PoseNode;\n\n            if (Array.isArray(poseNodes)) {\n              poseNodes.forEach(function (poseNode) {\n                bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n              });\n            } else {\n              bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n            }\n          }\n        }\n      }\n\n      return bindMatrices;\n    } // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n\n  }, {\n    key: \"createAmbientLight\",\n    value: function createAmbientLight() {\n      if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n        var ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n        var r = ambientColor[0];\n        var g = ambientColor[1];\n        var b = ambientColor[2];\n\n        if (r !== 0 || g !== 0 || b !== 0) {\n          var color = new Color(r, g, b);\n          sceneGraph.add(new AmbientLight(color, 1));\n        }\n      }\n    }\n  }, {\n    key: \"setupMorphMaterials\",\n    value: function setupMorphMaterials() {\n      var scope = this;\n      sceneGraph.traverse(function (child) {\n        if (child.isMesh) {\n          if (child.geometry.morphAttributes.position && child.geometry.morphAttributes.position.length) {\n            if (Array.isArray(child.material)) {\n              child.material.forEach(function (material, i) {\n                scope.setupMorphMaterial(child, material, i);\n              });\n            } else {\n              scope.setupMorphMaterial(child, child.material);\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"setupMorphMaterial\",\n    value: function setupMorphMaterial(child, material, index) {\n      var uuid = child.uuid;\n      var matUuid = material.uuid; // if a geometry has morph targets, it cannot share the material with other geometries\n\n      var sharedMat = false;\n      sceneGraph.traverse(function (node) {\n        if (node.isMesh) {\n          if (Array.isArray(node.material)) {\n            node.material.forEach(function (mat) {\n              if (mat.uuid === matUuid && node.uuid !== uuid) sharedMat = true;\n            });\n          } else if (node.material.uuid === matUuid && node.uuid !== uuid) {\n            sharedMat = true;\n          }\n        }\n      });\n\n      if (sharedMat === true) {\n        var clonedMat = material.clone();\n        clonedMat.morphTargets = true;\n        if (index === undefined) child.material = clonedMat;else child.material[index] = clonedMat;\n      } else {\n        material.morphTargets = true;\n      }\n    }\n  }]);\n\n  return FBXTreeParser;\n}(); // parse Geometry data from FBXTree and return map of BufferGeometries\n\n\nvar GeometryParser = /*#__PURE__*/function () {\n  function GeometryParser() {\n    _classCallCheck(this, GeometryParser);\n  }\n\n  _createClass(GeometryParser, [{\n    key: \"parse\",\n    value: // Parse nodes in FBXTree.Objects.Geometry\n    function parse(deformers) {\n      var geometryMap = new Map();\n\n      if ('Geometry' in fbxTree.Objects) {\n        var geoNodes = fbxTree.Objects.Geometry;\n\n        for (var nodeID in geoNodes) {\n          var relationships = connections.get(parseInt(nodeID));\n          var geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n          geometryMap.set(parseInt(nodeID), geo);\n        }\n      }\n\n      return geometryMap;\n    } // Parse single node in FBXTree.Objects.Geometry\n\n  }, {\n    key: \"parseGeometry\",\n    value: function parseGeometry(relationships, geoNode, deformers) {\n      switch (geoNode.attrType) {\n        case 'Mesh':\n          return this.parseMeshGeometry(relationships, geoNode, deformers);\n\n        case 'NurbsCurve':\n          return this.parseNurbsGeometry(geoNode);\n      }\n    } // Parse single node mesh geometry in FBXTree.Objects.Geometry\n\n  }, {\n    key: \"parseMeshGeometry\",\n    value: function parseMeshGeometry(relationships, geoNode, deformers) {\n      var skeletons = deformers.skeletons;\n      var morphTargets = [];\n      var modelNodes = relationships.parents.map(function (parent) {\n        return fbxTree.Objects.Model[parent.ID];\n      }); // don't create geometry if it is not associated with any models\n\n      if (modelNodes.length === 0) return;\n      var skeleton = relationships.children.reduce(function (skeleton, child) {\n        if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n        return skeleton;\n      }, null);\n      relationships.children.forEach(function (child) {\n        if (deformers.morphTargets[child.ID] !== undefined) {\n          morphTargets.push(deformers.morphTargets[child.ID]);\n        }\n      }); // Assume one model and get the preRotation from that\n      // if there is more than one model associated with the geometry this may cause problems\n\n      var modelNode = modelNodes[0];\n      var transformData = {};\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n      if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n      if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n      if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n      var transform = generateTransform(transformData);\n      return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n    } // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n\n  }, {\n    key: \"genGeometry\",\n    value: function genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n      var geo = new BufferGeometry();\n      if (geoNode.attrName) geo.name = geoNode.attrName;\n      var geoInfo = this.parseGeoNode(geoNode, skeleton);\n      var buffers = this.genBuffers(geoInfo);\n      var positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n      positionAttribute.applyMatrix4(preTransform);\n      geo.setAttribute('position', positionAttribute);\n\n      if (buffers.colors.length > 0) {\n        geo.setAttribute('color', new Float32BufferAttribute(buffers.colors, 3));\n      }\n\n      if (skeleton) {\n        geo.setAttribute('skinIndex', new Uint16BufferAttribute(buffers.weightsIndices, 4));\n        geo.setAttribute('skinWeight', new Float32BufferAttribute(buffers.vertexWeights, 4)); // used later to bind the skeleton to the model\n\n        geo.FBX_Deformer = skeleton;\n      }\n\n      if (buffers.normal.length > 0) {\n        var normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n        var normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n        normalAttribute.applyNormalMatrix(normalMatrix);\n        geo.setAttribute('normal', normalAttribute);\n      }\n\n      buffers.uvs.forEach(function (uvBuffer, i) {\n        // subsequent uv buffers are called 'uv1', 'uv2', ...\n        var name = 'uv' + (i + 1).toString(); // the first uv buffer is just called 'uv'\n\n        if (i === 0) {\n          name = 'uv';\n        }\n\n        geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n      });\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        // Convert the material indices of each vertex into rendering groups on the geometry.\n        var prevMaterialIndex = buffers.materialIndex[0];\n        var startIndex = 0;\n        buffers.materialIndex.forEach(function (currentIndex, i) {\n          if (currentIndex !== prevMaterialIndex) {\n            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n            prevMaterialIndex = currentIndex;\n            startIndex = i;\n          }\n        }); // the loop above doesn't add the last group, do that here.\n\n        if (geo.groups.length > 0) {\n          var lastGroup = geo.groups[geo.groups.length - 1];\n          var lastIndex = lastGroup.start + lastGroup.count;\n\n          if (lastIndex !== buffers.materialIndex.length) {\n            geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n          }\n        } // case where there are multiple materials but the whole geometry is only\n        // using one of them\n\n\n        if (geo.groups.length === 0) {\n          geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n        }\n      }\n\n      this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n      return geo;\n    }\n  }, {\n    key: \"parseGeoNode\",\n    value: function parseGeoNode(geoNode, skeleton) {\n      var geoInfo = {};\n      geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n      geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n\n      if (geoNode.LayerElementColor) {\n        geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n      }\n\n      if (geoNode.LayerElementMaterial) {\n        geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n      }\n\n      if (geoNode.LayerElementNormal) {\n        geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n      }\n\n      if (geoNode.LayerElementUV) {\n        geoInfo.uv = [];\n        var i = 0;\n\n        while (geoNode.LayerElementUV[i]) {\n          if (geoNode.LayerElementUV[i].UV) {\n            geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n          }\n\n          i++;\n        }\n      }\n\n      geoInfo.weightTable = {};\n\n      if (skeleton !== null) {\n        geoInfo.skeleton = skeleton;\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          // loop over the bone's vertex indices and weights\n          rawBone.indices.forEach(function (index, j) {\n            if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n            geoInfo.weightTable[index].push({\n              id: i,\n              weight: rawBone.weights[j]\n            });\n          });\n        });\n      }\n\n      return geoInfo;\n    }\n  }, {\n    key: \"genBuffers\",\n    value: function genBuffers(geoInfo) {\n      var buffers = {\n        vertex: [],\n        normal: [],\n        colors: [],\n        uvs: [],\n        materialIndex: [],\n        vertexWeights: [],\n        weightsIndices: []\n      };\n      var polygonIndex = 0;\n      var faceLength = 0;\n      var displayedWeightsWarning = false; // these will hold data for a single face\n\n      var facePositionIndexes = [];\n      var faceNormals = [];\n      var faceColors = [];\n      var faceUVs = [];\n      var faceWeights = [];\n      var faceWeightIndices = [];\n      var scope = this;\n      geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n        var materialIndex;\n        var endOfFace = false; // Face index and vertex index arrays are combined in a single array\n        // A cube with quad faces looks like this:\n        // PolygonVertexIndex: *24 {\n        //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n        //  }\n        // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n        // to find index of last vertex bit shift the index: ^ - 1\n\n        if (vertexIndex < 0) {\n          vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n\n          endOfFace = true;\n        }\n\n        var weightIndices = [];\n        var weights = [];\n        facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n\n        if (geoInfo.color) {\n          var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n          faceColors.push(data[0], data[1], data[2]);\n        }\n\n        if (geoInfo.skeleton) {\n          if (geoInfo.weightTable[vertexIndex] !== undefined) {\n            geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n              weights.push(wt.weight);\n              weightIndices.push(wt.id);\n            });\n          }\n\n          if (weights.length > 4) {\n            if (!displayedWeightsWarning) {\n              console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n              displayedWeightsWarning = true;\n            }\n\n            var wIndex = [0, 0, 0, 0];\n            var Weight = [0, 0, 0, 0];\n            weights.forEach(function (weight, weightIndex) {\n              var currentWeight = weight;\n              var currentIndex = weightIndices[weightIndex];\n              Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n                if (currentWeight > comparedWeight) {\n                  comparedWeightArray[comparedWeightIndex] = currentWeight;\n                  currentWeight = comparedWeight;\n                  var tmp = wIndex[comparedWeightIndex];\n                  wIndex[comparedWeightIndex] = currentIndex;\n                  currentIndex = tmp;\n                }\n              });\n            });\n            weightIndices = wIndex;\n            weights = Weight;\n          } // if the weight array is shorter than 4 pad with 0s\n\n\n          while (weights.length < 4) {\n            weights.push(0);\n            weightIndices.push(0);\n          }\n\n          for (var i = 0; i < 4; ++i) {\n            faceWeights.push(weights[i]);\n            faceWeightIndices.push(weightIndices[i]);\n          }\n        }\n\n        if (geoInfo.normal) {\n          var _data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n\n          faceNormals.push(_data[0], _data[1], _data[2]);\n        }\n\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n        }\n\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, i) {\n            var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n\n            if (faceUVs[i] === undefined) {\n              faceUVs[i] = [];\n            }\n\n            faceUVs[i].push(data[0]);\n            faceUVs[i].push(data[1]);\n          });\n        }\n\n        faceLength++;\n\n        if (endOfFace) {\n          scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n          polygonIndex++;\n          faceLength = 0; // reset arrays for the next face\n\n          facePositionIndexes = [];\n          faceNormals = [];\n          faceColors = [];\n          faceUVs = [];\n          faceWeights = [];\n          faceWeightIndices = [];\n        }\n      });\n      return buffers;\n    } // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\n  }, {\n    key: \"genFace\",\n    value: function genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n      var _loop3 = function _loop3(i) {\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n\n        if (geoInfo.skeleton) {\n          buffers.vertexWeights.push(faceWeights[0]);\n          buffers.vertexWeights.push(faceWeights[1]);\n          buffers.vertexWeights.push(faceWeights[2]);\n          buffers.vertexWeights.push(faceWeights[3]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n          buffers.vertexWeights.push(faceWeights[i * 4]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[0]);\n          buffers.weightsIndices.push(faceWeightIndices[1]);\n          buffers.weightsIndices.push(faceWeightIndices[2]);\n          buffers.weightsIndices.push(faceWeightIndices[3]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n        }\n\n        if (geoInfo.color) {\n          buffers.colors.push(faceColors[0]);\n          buffers.colors.push(faceColors[1]);\n          buffers.colors.push(faceColors[2]);\n          buffers.colors.push(faceColors[(i - 1) * 3]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n          buffers.colors.push(faceColors[i * 3]);\n          buffers.colors.push(faceColors[i * 3 + 1]);\n          buffers.colors.push(faceColors[i * 3 + 2]);\n        }\n\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n        }\n\n        if (geoInfo.normal) {\n          buffers.normal.push(faceNormals[0]);\n          buffers.normal.push(faceNormals[1]);\n          buffers.normal.push(faceNormals[2]);\n          buffers.normal.push(faceNormals[(i - 1) * 3]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n          buffers.normal.push(faceNormals[i * 3]);\n          buffers.normal.push(faceNormals[i * 3 + 1]);\n          buffers.normal.push(faceNormals[i * 3 + 2]);\n        }\n\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, j) {\n            if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n            buffers.uvs[j].push(faceUVs[j][0]);\n            buffers.uvs[j].push(faceUVs[j][1]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n            buffers.uvs[j].push(faceUVs[j][i * 2]);\n            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n          });\n        }\n      };\n\n      for (var i = 2; i < faceLength; i++) {\n        _loop3(i);\n      }\n    }\n  }, {\n    key: \"addMorphTargets\",\n    value: function addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n      if (morphTargets.length === 0) return;\n      parentGeo.morphTargetsRelative = true;\n      parentGeo.morphAttributes.position = []; // parentGeo.morphAttributes.normal = []; // not implemented\n\n      var scope = this;\n      morphTargets.forEach(function (morphTarget) {\n        morphTarget.rawTargets.forEach(function (rawTarget) {\n          var morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n\n          if (morphGeoNode !== undefined) {\n            scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n          }\n        });\n      });\n    } // a morph geometry node is similar to a standard  node, and the node is also contained\n    // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n    // and a special attribute Index defining which vertices of the original geometry are affected\n    // Normal and position attributes only have data for the vertices that are affected by the morph\n\n  }, {\n    key: \"genMorphGeometry\",\n    value: function genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n      var vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n      var morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n      var indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n      var length = parentGeo.attributes.position.count * 3;\n      var morphPositions = new Float32Array(length);\n\n      for (var i = 0; i < indices.length; i++) {\n        var morphIndex = indices[i] * 3;\n        morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n        morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n        morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n      } // TODO: add morph normal support\n\n\n      var morphGeoInfo = {\n        vertexIndices: vertexIndices,\n        vertexPositions: morphPositions\n      };\n      var morphBuffers = this.genBuffers(morphGeoInfo);\n      var positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n      positionAttribute.name = name || morphGeoNode.attrName;\n      positionAttribute.applyMatrix4(preTransform);\n      parentGeo.morphAttributes.position.push(positionAttribute);\n    } // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\n  }, {\n    key: \"parseNormals\",\n    value: function parseNormals(NormalNode) {\n      var mappingType = NormalNode.MappingInformationType;\n      var referenceType = NormalNode.ReferenceInformationType;\n      var buffer = NormalNode.Normals.a;\n      var indexBuffer = [];\n\n      if (referenceType === 'IndexToDirect') {\n        if ('NormalIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalIndex.a;\n        } else if ('NormalsIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalsIndex.a;\n        }\n      }\n\n      return {\n        dataSize: 3,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    } // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\n  }, {\n    key: \"parseUVs\",\n    value: function parseUVs(UVNode) {\n      var mappingType = UVNode.MappingInformationType;\n      var referenceType = UVNode.ReferenceInformationType;\n      var buffer = UVNode.UV.a;\n      var indexBuffer = [];\n\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = UVNode.UVIndex.a;\n      }\n\n      return {\n        dataSize: 2,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    } // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\n  }, {\n    key: \"parseVertexColors\",\n    value: function parseVertexColors(ColorNode) {\n      var mappingType = ColorNode.MappingInformationType;\n      var referenceType = ColorNode.ReferenceInformationType;\n      var buffer = ColorNode.Colors.a;\n      var indexBuffer = [];\n\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = ColorNode.ColorIndex.a;\n      }\n\n      return {\n        dataSize: 4,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    } // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\n  }, {\n    key: \"parseMaterialIndices\",\n    value: function parseMaterialIndices(MaterialNode) {\n      var mappingType = MaterialNode.MappingInformationType;\n      var referenceType = MaterialNode.ReferenceInformationType;\n\n      if (mappingType === 'NoMappingInformation') {\n        return {\n          dataSize: 1,\n          buffer: [0],\n          indices: [0],\n          mappingType: 'AllSame',\n          referenceType: referenceType\n        };\n      }\n\n      var materialIndexBuffer = MaterialNode.Materials.a; // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n      // we expect.So we create an intermediate buffer that points to the index in the buffer,\n      // for conforming with the other functions we've written for other data.\n\n      var materialIndices = [];\n\n      for (var i = 0; i < materialIndexBuffer.length; ++i) {\n        materialIndices.push(i);\n      }\n\n      return {\n        dataSize: 1,\n        buffer: materialIndexBuffer,\n        indices: materialIndices,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    } // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\n  }, {\n    key: \"parseNurbsGeometry\",\n    value: function parseNurbsGeometry(geoNode) {\n      if (NURBSCurve === undefined) {\n        console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n        return new BufferGeometry();\n      }\n\n      var order = parseInt(geoNode.Order);\n\n      if (isNaN(order)) {\n        console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n        return new BufferGeometry();\n      }\n\n      var degree = order - 1;\n      var knots = geoNode.KnotVector.a;\n      var controlPoints = [];\n      var pointsValues = geoNode.Points.a;\n\n      for (var i = 0, l = pointsValues.length; i < l; i += 4) {\n        controlPoints.push(new Vector4().fromArray(pointsValues, i));\n      }\n\n      var startKnot, endKnot;\n\n      if (geoNode.Form === 'Closed') {\n        controlPoints.push(controlPoints[0]);\n      } else if (geoNode.Form === 'Periodic') {\n        startKnot = degree;\n        endKnot = knots.length - 1 - startKnot;\n\n        for (var _i = 0; _i < degree; ++_i) {\n          controlPoints.push(controlPoints[_i]);\n        }\n      }\n\n      var curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n      var vertices = curve.getPoints(controlPoints.length * 7);\n      var positions = new Float32Array(vertices.length * 3);\n      vertices.forEach(function (vertex, i) {\n        vertex.toArray(positions, i * 3);\n      });\n      var geometry = new BufferGeometry();\n      geometry.setAttribute('position', new BufferAttribute(positions, 3));\n      return geometry;\n    }\n  }]);\n\n  return GeometryParser;\n}(); // parse animation data from FBXTree\n\n\nvar AnimationParser = /*#__PURE__*/function () {\n  function AnimationParser() {\n    _classCallCheck(this, AnimationParser);\n  }\n\n  _createClass(AnimationParser, [{\n    key: \"parse\",\n    value: // take raw animation clips and turn them into three.js animation clips\n    function parse() {\n      var animationClips = [];\n      var rawClips = this.parseClips();\n\n      if (rawClips !== undefined) {\n        for (var key in rawClips) {\n          var rawClip = rawClips[key];\n          var clip = this.addClip(rawClip);\n          animationClips.push(clip);\n        }\n      }\n\n      return animationClips;\n    }\n  }, {\n    key: \"parseClips\",\n    value: function parseClips() {\n      // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n      // if this is undefined we can safely assume there are no animations\n      if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n      var curveNodesMap = this.parseAnimationCurveNodes();\n      this.parseAnimationCurves(curveNodesMap);\n      var layersMap = this.parseAnimationLayers(curveNodesMap);\n      var rawClips = this.parseAnimStacks(layersMap);\n      return rawClips;\n    } // parse nodes in FBXTree.Objects.AnimationCurveNode\n    // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n    // and is referenced by an AnimationLayer\n\n  }, {\n    key: \"parseAnimationCurveNodes\",\n    value: function parseAnimationCurveNodes() {\n      var rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n      var curveNodesMap = new Map();\n\n      for (var nodeID in rawCurveNodes) {\n        var rawCurveNode = rawCurveNodes[nodeID];\n\n        if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n          var curveNode = {\n            id: rawCurveNode.id,\n            attr: rawCurveNode.attrName,\n            curves: {}\n          };\n          curveNodesMap.set(curveNode.id, curveNode);\n        }\n      }\n\n      return curveNodesMap;\n    } // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n    // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n    // axis ( e.g. times and values of x rotation)\n\n  }, {\n    key: \"parseAnimationCurves\",\n    value: function parseAnimationCurves(curveNodesMap) {\n      var rawCurves = fbxTree.Objects.AnimationCurve; // TODO: Many values are identical up to roundoff error, but won't be optimised\n      // e.g. position times: [0, 0.4, 0. 8]\n      // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n      // clearly, this should be optimised to\n      // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n      // this shows up in nearly every FBX file, and generally time array is length > 100\n\n      for (var nodeID in rawCurves) {\n        var animationCurve = {\n          id: rawCurves[nodeID].id,\n          times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n          values: rawCurves[nodeID].KeyValueFloat.a\n        };\n        var relationships = connections.get(animationCurve.id);\n\n        if (relationships !== undefined) {\n          var animationCurveID = relationships.parents[0].ID;\n          var animationCurveRelationship = relationships.parents[0].relationship;\n\n          if (animationCurveRelationship.match(/X/)) {\n            curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Y/)) {\n            curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Z/)) {\n            curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n          } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n            curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n          }\n        }\n      }\n    } // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n    // to various AnimationCurveNodes and is referenced by an AnimationStack node\n    // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\n  }, {\n    key: \"parseAnimationLayers\",\n    value: function parseAnimationLayers(curveNodesMap) {\n      var rawLayers = fbxTree.Objects.AnimationLayer;\n      var layersMap = new Map();\n\n      var _loop4 = function _loop4(nodeID) {\n        var layerCurveNodes = [];\n        var connection = connections.get(parseInt(nodeID));\n\n        if (connection !== undefined) {\n          // all the animationCurveNodes used in the layer\n          var children = connection.children;\n          children.forEach(function (child, i) {\n            if (curveNodesMap.has(child.ID)) {\n              var curveNode = curveNodesMap.get(child.ID); // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\n              if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  var modelID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== undefined;\n                  })[0].ID;\n\n                  if (modelID !== undefined) {\n                    var rawModel = fbxTree.Objects.Model[modelID.toString()];\n\n                    if (rawModel === undefined) {\n                      console.warn('THREE.FBXLoader: Encountered a unused curve.', child);\n                      return;\n                    }\n\n                    var node = {\n                      modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                      ID: rawModel.id,\n                      initialPosition: [0, 0, 0],\n                      initialRotation: [0, 0, 0],\n                      initialScale: [1, 1, 1]\n                    };\n                    sceneGraph.traverse(function (child) {\n                      if (child.ID === rawModel.id) {\n                        node.transform = child.matrix;\n                        if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder;\n                      }\n                    });\n                    if (!node.transform) node.transform = new Matrix4(); // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                    // animation value as well\n\n                    if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value;\n                    if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value;\n                    layerCurveNodes[i] = node;\n                  }\n                }\n\n                if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n              } else if (curveNode.curves.morph !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  var deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== undefined;\n                  })[0].ID;\n                  var morpherID = connections.get(deformerID).parents[0].ID;\n                  var geoID = connections.get(morpherID).parents[0].ID; // assuming geometry is not used in more than one model\n\n                  var _modelID = connections.get(geoID).parents[0].ID;\n                  var _rawModel = fbxTree.Objects.Model[_modelID];\n                  var _node = {\n                    modelName: _rawModel.attrName ? PropertyBinding.sanitizeNodeName(_rawModel.attrName) : '',\n                    morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                  };\n                  layerCurveNodes[i] = _node;\n                }\n\n                layerCurveNodes[i][curveNode.attr] = curveNode;\n              }\n            }\n          });\n          layersMap.set(parseInt(nodeID), layerCurveNodes);\n        }\n      };\n\n      for (var nodeID in rawLayers) {\n        _loop4(nodeID);\n      }\n\n      return layersMap;\n    } // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n    // hierarchy. Each Stack node will be used to create a AnimationClip\n\n  }, {\n    key: \"parseAnimStacks\",\n    value: function parseAnimStacks(layersMap) {\n      var rawStacks = fbxTree.Objects.AnimationStack; // connect the stacks (clips) up to the layers\n\n      var rawClips = {};\n\n      for (var nodeID in rawStacks) {\n        var children = connections.get(parseInt(nodeID)).children;\n\n        if (children.length > 1) {\n          // it seems like stacks will always be associated with a single layer. But just in case there are files\n          // where there are multiple layers per stack, we'll display a warning\n          console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n        }\n\n        var layer = layersMap.get(children[0].ID);\n        rawClips[nodeID] = {\n          name: rawStacks[nodeID].attrName,\n          layer: layer\n        };\n      }\n\n      return rawClips;\n    }\n  }, {\n    key: \"addClip\",\n    value: function addClip(rawClip) {\n      var tracks = [];\n      var scope = this;\n      rawClip.layer.forEach(function (rawTracks) {\n        tracks = tracks.concat(scope.generateTracks(rawTracks));\n      });\n      return new AnimationClip(rawClip.name, -1, tracks);\n    }\n  }, {\n    key: \"generateTracks\",\n    value: function generateTracks(rawTracks) {\n      var tracks = [];\n      var initialPosition = new Vector3();\n      var initialRotation = new Quaternion();\n      var initialScale = new Vector3();\n      if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n      initialPosition = initialPosition.toArray();\n      initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n      initialScale = initialScale.toArray();\n\n      if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n        var positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n        if (positionTrack !== undefined) tracks.push(positionTrack);\n      }\n\n      if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n        var rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n        if (rotationTrack !== undefined) tracks.push(rotationTrack);\n      }\n\n      if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n        var scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n        if (scaleTrack !== undefined) tracks.push(scaleTrack);\n      }\n\n      if (rawTracks.DeformPercent !== undefined) {\n        var morphTrack = this.generateMorphTrack(rawTracks);\n        if (morphTrack !== undefined) tracks.push(morphTrack);\n      }\n\n      return tracks;\n    }\n  }, {\n    key: \"generateVectorTrack\",\n    value: function generateVectorTrack(modelName, curves, initialValue, type) {\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n      return new VectorKeyframeTrack(modelName + '.' + type, times, values);\n    }\n  }, {\n    key: \"generateRotationTrack\",\n    value: function generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n      if (curves.x !== undefined) {\n        this.interpolateRotations(curves.x);\n        curves.x.values = curves.x.values.map(MathUtils.degToRad);\n      }\n\n      if (curves.y !== undefined) {\n        this.interpolateRotations(curves.y);\n        curves.y.values = curves.y.values.map(MathUtils.degToRad);\n      }\n\n      if (curves.z !== undefined) {\n        this.interpolateRotations(curves.z);\n        curves.z.values = curves.z.values.map(MathUtils.degToRad);\n      }\n\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n\n      if (preRotation !== undefined) {\n        preRotation = preRotation.map(MathUtils.degToRad);\n        preRotation.push(eulerOrder);\n        preRotation = new Euler().fromArray(preRotation);\n        preRotation = new Quaternion().setFromEuler(preRotation);\n      }\n\n      if (postRotation !== undefined) {\n        postRotation = postRotation.map(MathUtils.degToRad);\n        postRotation.push(eulerOrder);\n        postRotation = new Euler().fromArray(postRotation);\n        postRotation = new Quaternion().setFromEuler(postRotation).invert();\n      }\n\n      var quaternion = new Quaternion();\n      var euler = new Euler();\n      var quaternionValues = [];\n\n      for (var i = 0; i < values.length; i += 3) {\n        euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n        quaternion.setFromEuler(euler);\n        if (preRotation !== undefined) quaternion.premultiply(preRotation);\n        if (postRotation !== undefined) quaternion.multiply(postRotation);\n        quaternion.toArray(quaternionValues, i / 3 * 4);\n      }\n\n      return new QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n    }\n  }, {\n    key: \"generateMorphTrack\",\n    value: function generateMorphTrack(rawTracks) {\n      var curves = rawTracks.DeformPercent.curves.morph;\n      var values = curves.values.map(function (val) {\n        return val / 100;\n      });\n      var morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n      return new NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n    } // For all animated objects, times are defined separately for each axis\n    // Here we'll combine the times into one sorted array without duplicates\n\n  }, {\n    key: \"getTimesForAllAxes\",\n    value: function getTimesForAllAxes(curves) {\n      var times = []; // first join together the times for each axis, if defined\n\n      if (curves.x !== undefined) times = times.concat(curves.x.times);\n      if (curves.y !== undefined) times = times.concat(curves.y.times);\n      if (curves.z !== undefined) times = times.concat(curves.z.times); // then sort them\n\n      times = times.sort(function (a, b) {\n        return a - b;\n      }); // and remove duplicates\n\n      if (times.length > 1) {\n        var targetIndex = 1;\n        var lastValue = times[0];\n\n        for (var i = 1; i < times.length; i++) {\n          var currentValue = times[i];\n\n          if (currentValue !== lastValue) {\n            times[targetIndex] = currentValue;\n            lastValue = currentValue;\n            targetIndex++;\n          }\n        }\n\n        times = times.slice(0, targetIndex);\n      }\n\n      return times;\n    }\n  }, {\n    key: \"getKeyframeTrackValues\",\n    value: function getKeyframeTrackValues(times, curves, initialValue) {\n      var prevValue = initialValue;\n      var values = [];\n      var xIndex = -1;\n      var yIndex = -1;\n      var zIndex = -1;\n      times.forEach(function (time) {\n        if (curves.x) xIndex = curves.x.times.indexOf(time);\n        if (curves.y) yIndex = curves.y.times.indexOf(time);\n        if (curves.z) zIndex = curves.z.times.indexOf(time); // if there is an x value defined for this frame, use that\n\n        if (xIndex !== -1) {\n          var xValue = curves.x.values[xIndex];\n          values.push(xValue);\n          prevValue[0] = xValue;\n        } else {\n          // otherwise use the x value from the previous frame\n          values.push(prevValue[0]);\n        }\n\n        if (yIndex !== -1) {\n          var yValue = curves.y.values[yIndex];\n          values.push(yValue);\n          prevValue[1] = yValue;\n        } else {\n          values.push(prevValue[1]);\n        }\n\n        if (zIndex !== -1) {\n          var zValue = curves.z.values[zIndex];\n          values.push(zValue);\n          prevValue[2] = zValue;\n        } else {\n          values.push(prevValue[2]);\n        }\n      });\n      return values;\n    } // Rotations are defined as Euler angles which can have values  of any size\n    // These will be converted to quaternions which don't support values greater than\n    // PI, so we'll interpolate large rotations\n\n  }, {\n    key: \"interpolateRotations\",\n    value: function interpolateRotations(curve) {\n      for (var i = 1; i < curve.values.length; i++) {\n        var initialValue = curve.values[i - 1];\n        var valuesSpan = curve.values[i] - initialValue;\n        var absoluteSpan = Math.abs(valuesSpan);\n\n        if (absoluteSpan >= 180) {\n          var numSubIntervals = absoluteSpan / 180;\n          var step = valuesSpan / numSubIntervals;\n          var nextValue = initialValue + step;\n          var initialTime = curve.times[i - 1];\n          var timeSpan = curve.times[i] - initialTime;\n          var interval = timeSpan / numSubIntervals;\n          var nextTime = initialTime + interval;\n          var interpolatedTimes = [];\n          var interpolatedValues = [];\n\n          while (nextTime < curve.times[i]) {\n            interpolatedTimes.push(nextTime);\n            nextTime += interval;\n            interpolatedValues.push(nextValue);\n            nextValue += step;\n          }\n\n          curve.times = inject(curve.times, i, interpolatedTimes);\n          curve.values = inject(curve.values, i, interpolatedValues);\n        }\n      }\n    }\n  }]);\n\n  return AnimationParser;\n}(); // parse an FBX file in ASCII format\n\n\nvar TextParser = /*#__PURE__*/function () {\n  function TextParser() {\n    _classCallCheck(this, TextParser);\n  }\n\n  _createClass(TextParser, [{\n    key: \"getPrevNode\",\n    value: function getPrevNode() {\n      return this.nodeStack[this.currentIndent - 2];\n    }\n  }, {\n    key: \"getCurrentNode\",\n    value: function getCurrentNode() {\n      return this.nodeStack[this.currentIndent - 1];\n    }\n  }, {\n    key: \"getCurrentProp\",\n    value: function getCurrentProp() {\n      return this.currentProp;\n    }\n  }, {\n    key: \"pushStack\",\n    value: function pushStack(node) {\n      this.nodeStack.push(node);\n      this.currentIndent += 1;\n    }\n  }, {\n    key: \"popStack\",\n    value: function popStack() {\n      this.nodeStack.pop();\n      this.currentIndent -= 1;\n    }\n  }, {\n    key: \"setCurrentProp\",\n    value: function setCurrentProp(val, name) {\n      this.currentProp = val;\n      this.currentPropName = name;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(text) {\n      this.currentIndent = 0;\n      this.allNodes = new FBXTree();\n      this.nodeStack = [];\n      this.currentProp = [];\n      this.currentPropName = '';\n      var scope = this;\n      var split = text.split(/[\\r\\n]+/);\n      split.forEach(function (line, i) {\n        var matchComment = line.match(/^[\\s\\t]*;/);\n        var matchEmpty = line.match(/^[\\s\\t]*$/);\n        if (matchComment || matchEmpty) return;\n        var matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '');\n        var matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n        var matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}');\n\n        if (matchBeginning) {\n          scope.parseNodeBegin(line, matchBeginning);\n        } else if (matchProperty) {\n          scope.parseNodeProperty(line, matchProperty, split[++i]);\n        } else if (matchEnd) {\n          scope.popStack();\n        } else if (line.match(/^[^\\s\\t}]/)) {\n          // large arrays are split over multiple lines terminated with a ',' character\n          // if this is encountered the line needs to be joined to the previous line\n          scope.parseNodePropertyContinued(line);\n        }\n      });\n      return this.allNodes;\n    }\n  }, {\n    key: \"parseNodeBegin\",\n    value: function parseNodeBegin(line, property) {\n      var nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n      var nodeAttrs = property[2].split(',').map(function (attr) {\n        return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n      });\n      var node = {\n        name: nodeName\n      };\n      var attrs = this.parseNodeAttr(nodeAttrs);\n      var currentNode = this.getCurrentNode(); // a top node\n\n      if (this.currentIndent === 0) {\n        this.allNodes.add(nodeName, node);\n      } else {\n        // a subnode\n        // if the subnode already exists, append it\n        if (nodeName in currentNode) {\n          // special case Pose needs PoseNodes as an array\n          if (nodeName === 'PoseNode') {\n            currentNode.PoseNode.push(node);\n          } else if (currentNode[nodeName].id !== undefined) {\n            currentNode[nodeName] = {};\n            currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n          }\n\n          if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n        } else if (typeof attrs.id === 'number') {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][attrs.id] = node;\n        } else if (nodeName !== 'Properties70') {\n          if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n        }\n      }\n\n      if (typeof attrs.id === 'number') node.id = attrs.id;\n      if (attrs.name !== '') node.attrName = attrs.name;\n      if (attrs.type !== '') node.attrType = attrs.type;\n      this.pushStack(node);\n    }\n  }, {\n    key: \"parseNodeAttr\",\n    value: function parseNodeAttr(attrs) {\n      var id = attrs[0];\n\n      if (attrs[0] !== '') {\n        id = parseInt(attrs[0]);\n\n        if (isNaN(id)) {\n          id = attrs[0];\n        }\n      }\n\n      var name = '',\n          type = '';\n\n      if (attrs.length > 1) {\n        name = attrs[1].replace(/^(\\w+)::/, '');\n        type = attrs[2];\n      }\n\n      return {\n        id: id,\n        name: name,\n        type: type\n      };\n    }\n  }, {\n    key: \"parseNodeProperty\",\n    value: function parseNodeProperty(line, property, contentLine) {\n      var propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n      var propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim(); // for special case: base64 image data follows \"Content: ,\" line\n      //\tContent: ,\n      //\t \"/9j/4RDaRXhpZgAATU0A...\"\n\n      if (propName === 'Content' && propValue === ',') {\n        propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n      }\n\n      var currentNode = this.getCurrentNode();\n      var parentName = currentNode.name;\n\n      if (parentName === 'Properties70') {\n        this.parseNodeSpecialProperty(line, propName, propValue);\n        return;\n      } // Connections\n\n\n      if (propName === 'C') {\n        var connProps = propValue.split(',').slice(1);\n        var from = parseInt(connProps[0]);\n        var to = parseInt(connProps[1]);\n        var rest = propValue.split(',').slice(3);\n        rest = rest.map(function (elem) {\n          return elem.trim().replace(/^\"/, '');\n        });\n        propName = 'connections';\n        propValue = [from, to];\n        append(propValue, rest);\n\n        if (currentNode[propName] === undefined) {\n          currentNode[propName] = [];\n        }\n      } // Node\n\n\n      if (propName === 'Node') currentNode.id = propValue; // connections\n\n      if (propName in currentNode && Array.isArray(currentNode[propName])) {\n        currentNode[propName].push(propValue);\n      } else {\n        if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n      }\n\n      this.setCurrentProp(currentNode, propName); // convert string to array, unless it ends in ',' in which case more will be added to it\n\n      if (propName === 'a' && propValue.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(propValue);\n      }\n    }\n  }, {\n    key: \"parseNodePropertyContinued\",\n    value: function parseNodePropertyContinued(line) {\n      var currentNode = this.getCurrentNode();\n      currentNode.a += line; // if the line doesn't end in ',' we have reached the end of the property value\n      // so convert the string to an array\n\n      if (line.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(currentNode.a);\n      }\n    } // parse \"Property70\"\n\n  }, {\n    key: \"parseNodeSpecialProperty\",\n    value: function parseNodeSpecialProperty(line, propName, propValue) {\n      // split this\n      // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n      // into array like below\n      // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n      var props = propValue.split('\",').map(function (prop) {\n        return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n      });\n      var innerPropName = props[0];\n      var innerPropType1 = props[1];\n      var innerPropType2 = props[2];\n      var innerPropFlag = props[3];\n      var innerPropValue = props[4]; // cast values where needed, otherwise leave as strings\n\n      switch (innerPropType1) {\n        case 'int':\n        case 'enum':\n        case 'bool':\n        case 'ULongLong':\n        case 'double':\n        case 'Number':\n        case 'FieldOfView':\n          innerPropValue = parseFloat(innerPropValue);\n          break;\n\n        case 'Color':\n        case 'ColorRGB':\n        case 'Vector3D':\n        case 'Lcl_Translation':\n        case 'Lcl_Rotation':\n        case 'Lcl_Scaling':\n          innerPropValue = parseNumberArray(innerPropValue);\n          break;\n      } // CAUTION: these props must append to parent's parent\n\n\n      this.getPrevNode()[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue\n      };\n      this.setCurrentProp(this.getPrevNode(), innerPropName);\n    }\n  }]);\n\n  return TextParser;\n}(); // Parse an FBX file in Binary format\n\n\nvar BinaryParser = /*#__PURE__*/function () {\n  function BinaryParser() {\n    _classCallCheck(this, BinaryParser);\n  }\n\n  _createClass(BinaryParser, [{\n    key: \"parse\",\n    value: function parse(buffer) {\n      var reader = new BinaryReader(buffer);\n      reader.skip(23); // skip magic 23 bytes\n\n      var version = reader.getUint32();\n\n      if (version < 6400) {\n        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version);\n      }\n\n      var allNodes = new FBXTree();\n\n      while (!this.endOfContent(reader)) {\n        var node = this.parseNode(reader, version);\n        if (node !== null) allNodes.add(node.name, node);\n      }\n\n      return allNodes;\n    } // Check if reader has reached the end of content.\n\n  }, {\n    key: \"endOfContent\",\n    value: function endOfContent(reader) {\n      // footer size: 160bytes + 16-byte alignment padding\n      // - 16bytes: magic\n      // - padding til 16-byte alignment (at least 1byte?)\n      //\t(seems like some exporters embed fixed 15 or 16bytes?)\n      // - 4bytes: magic\n      // - 4bytes: version\n      // - 120bytes: zero\n      // - 16bytes: magic\n      if (reader.size() % 16 === 0) {\n        return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n      } else {\n        return reader.getOffset() + 160 + 16 >= reader.size();\n      }\n    } // recursively parse nodes until the end of the file is reached\n\n  }, {\n    key: \"parseNode\",\n    value: function parseNode(reader, version) {\n      var node = {}; // The first three data sizes depends on version.\n\n      var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      var numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      version >= 7500 ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n      var nameLen = reader.getUint8();\n      var name = reader.getString(nameLen); // Regards this node as NULL-record if endOffset is zero\n\n      if (endOffset === 0) return null;\n      var propertyList = [];\n\n      for (var i = 0; i < numProperties; i++) {\n        propertyList.push(this.parseProperty(reader));\n      } // Regards the first three elements in propertyList as id, attrName, and attrType\n\n\n      var id = propertyList.length > 0 ? propertyList[0] : '';\n      var attrName = propertyList.length > 1 ? propertyList[1] : '';\n      var attrType = propertyList.length > 2 ? propertyList[2] : ''; // check if this node represents just a single property\n      // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\n      node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n\n      while (endOffset > reader.getOffset()) {\n        var subNode = this.parseNode(reader, version);\n        if (subNode !== null) this.parseSubNode(name, node, subNode);\n      }\n\n      node.propertyList = propertyList; // raw property list used by parent\n\n      if (typeof id === 'number') node.id = id;\n      if (attrName !== '') node.attrName = attrName;\n      if (attrType !== '') node.attrType = attrType;\n      if (name !== '') node.name = name;\n      return node;\n    }\n  }, {\n    key: \"parseSubNode\",\n    value: function parseSubNode(name, node, subNode) {\n      // special case: child node is single property\n      if (subNode.singleProperty === true) {\n        var value = subNode.propertyList[0];\n\n        if (Array.isArray(value)) {\n          node[subNode.name] = subNode;\n          subNode.a = value;\n        } else {\n          node[subNode.name] = value;\n        }\n      } else if (name === 'Connections' && subNode.name === 'C') {\n        var array = [];\n        subNode.propertyList.forEach(function (property, i) {\n          // first Connection is FBX type (OO, OP, etc.). We'll discard these\n          if (i !== 0) array.push(property);\n        });\n\n        if (node.connections === undefined) {\n          node.connections = [];\n        }\n\n        node.connections.push(array);\n      } else if (subNode.name === 'Properties70') {\n        var keys = Object.keys(subNode);\n        keys.forEach(function (key) {\n          node[key] = subNode[key];\n        });\n      } else if (name === 'Properties70' && subNode.name === 'P') {\n        var innerPropName = subNode.propertyList[0];\n        var innerPropType1 = subNode.propertyList[1];\n        var innerPropType2 = subNode.propertyList[2];\n        var innerPropFlag = subNode.propertyList[3];\n        var innerPropValue;\n        if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n        if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n\n        if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n          innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n        } else {\n          innerPropValue = subNode.propertyList[4];\n        } // this will be copied to parent, see above\n\n\n        node[innerPropName] = {\n          type: innerPropType1,\n          type2: innerPropType2,\n          flag: innerPropFlag,\n          value: innerPropValue\n        };\n      } else if (node[subNode.name] === undefined) {\n        if (typeof subNode.id === 'number') {\n          node[subNode.name] = {};\n          node[subNode.name][subNode.id] = subNode;\n        } else {\n          node[subNode.name] = subNode;\n        }\n      } else {\n        if (subNode.name === 'PoseNode') {\n          if (!Array.isArray(node[subNode.name])) {\n            node[subNode.name] = [node[subNode.name]];\n          }\n\n          node[subNode.name].push(subNode);\n        } else if (node[subNode.name][subNode.id] === undefined) {\n          node[subNode.name][subNode.id] = subNode;\n        }\n      }\n    }\n  }, {\n    key: \"parseProperty\",\n    value: function parseProperty(reader) {\n      var type = reader.getString(1);\n      var length;\n\n      switch (type) {\n        case 'C':\n          return reader.getBoolean();\n\n        case 'D':\n          return reader.getFloat64();\n\n        case 'F':\n          return reader.getFloat32();\n\n        case 'I':\n          return reader.getInt32();\n\n        case 'L':\n          return reader.getInt64();\n\n        case 'R':\n          length = reader.getUint32();\n          return reader.getArrayBuffer(length);\n\n        case 'S':\n          length = reader.getUint32();\n          return reader.getString(length);\n\n        case 'Y':\n          return reader.getInt16();\n\n        case 'b':\n        case 'c':\n        case 'd':\n        case 'f':\n        case 'i':\n        case 'l':\n          var arrayLength = reader.getUint32();\n          var encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\n          var compressedLength = reader.getUint32();\n\n          if (encoding === 0) {\n            switch (type) {\n              case 'b':\n              case 'c':\n                return reader.getBooleanArray(arrayLength);\n\n              case 'd':\n                return reader.getFloat64Array(arrayLength);\n\n              case 'f':\n                return reader.getFloat32Array(arrayLength);\n\n              case 'i':\n                return reader.getInt32Array(arrayLength);\n\n              case 'l':\n                return reader.getInt64Array(arrayLength);\n            }\n          }\n\n          var data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n\n          var reader2 = new BinaryReader(data.buffer);\n\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader2.getBooleanArray(arrayLength);\n\n            case 'd':\n              return reader2.getFloat64Array(arrayLength);\n\n            case 'f':\n              return reader2.getFloat32Array(arrayLength);\n\n            case 'i':\n              return reader2.getInt32Array(arrayLength);\n\n            case 'l':\n              return reader2.getInt64Array(arrayLength);\n          }\n\n        default:\n          throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n      }\n    }\n  }]);\n\n  return BinaryParser;\n}();\n\nvar BinaryReader = /*#__PURE__*/function () {\n  function BinaryReader(buffer, littleEndian) {\n    _classCallCheck(this, BinaryReader);\n\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n  }\n\n  _createClass(BinaryReader, [{\n    key: \"getOffset\",\n    value: function getOffset() {\n      return this.offset;\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.dv.buffer.byteLength;\n    }\n  }, {\n    key: \"skip\",\n    value: function skip(length) {\n      this.offset += length;\n    } // seems like true/false representation depends on exporter.\n    // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n    // then sees LSB.\n\n  }, {\n    key: \"getBoolean\",\n    value: function getBoolean() {\n      return (this.getUint8() & 1) === 1;\n    }\n  }, {\n    key: \"getBooleanArray\",\n    value: function getBooleanArray(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getBoolean());\n      }\n\n      return a;\n    }\n  }, {\n    key: \"getUint8\",\n    value: function getUint8() {\n      var value = this.dv.getUint8(this.offset);\n      this.offset += 1;\n      return value;\n    }\n  }, {\n    key: \"getInt16\",\n    value: function getInt16() {\n      var value = this.dv.getInt16(this.offset, this.littleEndian);\n      this.offset += 2;\n      return value;\n    }\n  }, {\n    key: \"getInt32\",\n    value: function getInt32() {\n      var value = this.dv.getInt32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    }\n  }, {\n    key: \"getInt32Array\",\n    value: function getInt32Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt32());\n      }\n\n      return a;\n    }\n  }, {\n    key: \"getUint32\",\n    value: function getUint32() {\n      var value = this.dv.getUint32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    } // JavaScript doesn't support 64-bit integer so calculate this here\n    // 1 << 32 will return 1 so using multiply operation instead here.\n    // There's a possibility that this method returns wrong value if the value\n    // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n    // TODO: safely handle 64-bit integer\n\n  }, {\n    key: \"getInt64\",\n    value: function getInt64() {\n      var low, high;\n\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      } // calculate negative value\n\n\n      if (high & 0x80000000) {\n        high = ~high & 0xffffffff;\n        low = ~low & 0xffffffff;\n        if (low === 0xffffffff) high = high + 1 & 0xffffffff;\n        low = low + 1 & 0xffffffff;\n        return -(high * 0x100000000 + low);\n      }\n\n      return high * 0x100000000 + low;\n    }\n  }, {\n    key: \"getInt64Array\",\n    value: function getInt64Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt64());\n      }\n\n      return a;\n    } // Note: see getInt64() comment\n\n  }, {\n    key: \"getUint64\",\n    value: function getUint64() {\n      var low, high;\n\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      }\n\n      return high * 0x100000000 + low;\n    }\n  }, {\n    key: \"getFloat32\",\n    value: function getFloat32() {\n      var value = this.dv.getFloat32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    }\n  }, {\n    key: \"getFloat32Array\",\n    value: function getFloat32Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat32());\n      }\n\n      return a;\n    }\n  }, {\n    key: \"getFloat64\",\n    value: function getFloat64() {\n      var value = this.dv.getFloat64(this.offset, this.littleEndian);\n      this.offset += 8;\n      return value;\n    }\n  }, {\n    key: \"getFloat64Array\",\n    value: function getFloat64Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat64());\n      }\n\n      return a;\n    }\n  }, {\n    key: \"getArrayBuffer\",\n    value: function getArrayBuffer(size) {\n      var value = this.dv.buffer.slice(this.offset, this.offset + size);\n      this.offset += size;\n      return value;\n    }\n  }, {\n    key: \"getString\",\n    value: function getString(size) {\n      // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a[i] = this.getUint8();\n      }\n\n      var nullByte = a.indexOf(0);\n      if (nullByte >= 0) a = a.slice(0, nullByte);\n      return LoaderUtils.decodeText(new Uint8Array(a));\n    }\n  }]);\n\n  return BinaryReader;\n}(); // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n// and BinaryParser( FBX Binary format)\n\n\nvar FBXTree = /*#__PURE__*/function () {\n  function FBXTree() {\n    _classCallCheck(this, FBXTree);\n  }\n\n  _createClass(FBXTree, [{\n    key: \"add\",\n    value: function add(key, val) {\n      this[key] = val;\n    }\n  }]);\n\n  return FBXTree;\n}(); // ************** UTILITY FUNCTIONS **************\n\n\nfunction isFbxFormatBinary(buffer) {\n  var CORRECT = \"Kaydara FBX Binary  \\0\";\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\n\nfunction isFbxFormatASCII(text) {\n  var CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n  var cursor = 0;\n\n  function read(offset) {\n    var result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n\n  for (var i = 0; i < CORRECT.length; ++i) {\n    var num = read(1);\n\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getFbxVersion(text) {\n  var versionRegExp = /FBXVersion: (\\d+)/;\n  var match = text.match(versionRegExp);\n\n  if (match) {\n    var version = parseInt(match[1]);\n    return version;\n  }\n\n  throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n} // Converts FBX ticks into real time seconds.\n\n\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158000;\n}\n\nvar dataArray = []; // extracts the data from the correct position in the FBX array based on indexing type\n\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  var index;\n\n  switch (infoObject.mappingType) {\n    case 'ByPolygonVertex':\n      index = polygonVertexIndex;\n      break;\n\n    case 'ByPolygon':\n      index = polygonIndex;\n      break;\n\n    case 'ByVertice':\n      index = vertexIndex;\n      break;\n\n    case 'AllSame':\n      index = infoObject.indices[0];\n      break;\n\n    default:\n      console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n  }\n\n  if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n  var from = index * infoObject.dataSize;\n  var to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\n\nvar tempEuler = new Euler();\nvar tempVec = new Vector3(); // generate transformation from FBX transform data\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\n\nfunction generateTransform(transformData) {\n  var lTranslationM = new Matrix4();\n  var lPreRotationM = new Matrix4();\n  var lRotationM = new Matrix4();\n  var lPostRotationM = new Matrix4();\n  var lScalingM = new Matrix4();\n  var lScalingPivotM = new Matrix4();\n  var lScalingOffsetM = new Matrix4();\n  var lRotationOffsetM = new Matrix4();\n  var lRotationPivotM = new Matrix4();\n  var lParentGX = new Matrix4();\n  var lParentLX = new Matrix4();\n  var lGlobalT = new Matrix4();\n  var inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n\n  if (transformData.preRotation) {\n    var array = transformData.preRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n\n  if (transformData.rotation) {\n    var _array = transformData.rotation.map(MathUtils.degToRad);\n\n    _array.push(transformData.eulerOrder);\n\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(_array));\n  }\n\n  if (transformData.postRotation) {\n    var _array2 = transformData.postRotation.map(MathUtils.degToRad);\n\n    _array2.push(transformData.eulerOrder);\n\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(_array2));\n    lPostRotationM.invert();\n  }\n\n  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale)); // Pivots and offsets\n\n  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot)); // parent transform\n\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n\n  var lLRM = new Matrix4().copy(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM); // Global Rotation\n\n  var lParentGRM = new Matrix4();\n  lParentGRM.extractRotation(lParentGX); // Global Shear*Scaling\n\n  var lParentTM = new Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  var lParentGSM = new Matrix4();\n  var lParentGRSM = new Matrix4().copy(lParentTM).invert().multiply(lParentGX);\n  lParentGSM.copy(lParentGRM).invert().multiply(lParentGRSM);\n  var lLSM = lScalingM;\n  var lGlobalRS = new Matrix4();\n\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    var lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n    var lParentLSM_inv = new Matrix4().copy(lParentLSM).invert();\n    var lParentGSM_noLocal = new Matrix4().copy(lParentGSM).multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n\n  var lRotationPivotM_inv = new Matrix4();\n  lRotationPivotM_inv.copy(lRotationPivotM).invert();\n  var lScalingPivotM_inv = new Matrix4();\n  lScalingPivotM_inv.copy(lScalingPivotM).invert(); // Calculate the local transform matrix\n\n  var lTransform = new Matrix4();\n  lTransform.copy(lTranslationM).multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  var lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n  var lGlobalTranslation = new Matrix4().copy(lParentGX).multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = new Matrix4().copy(lGlobalT).multiply(lGlobalRS); // from global to local\n\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n} // Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\n\nfunction getEulerOrder(order) {\n  order = order || 0;\n  var enums = ['ZYX', // -> XYZ extrinsic\n  'YZX', // -> XZY extrinsic\n  'XZY', // -> YZX extrinsic\n  'ZXY', // -> YXZ extrinsic\n  'YXZ', // -> ZXY extrinsic\n  'XYZ' // -> ZYX extrinsic\n  //'SphericXYZ', // not possible to support\n  ];\n\n  if (order === 6) {\n    console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n    return enums[0];\n  }\n\n  return enums[order];\n} // Parses comma separated list of numbers and returns them an array.\n// Used internally by the TextParser\n\n\nfunction parseNumberArray(value) {\n  var array = value.split(',').map(function (val) {\n    return parseFloat(val);\n  });\n  return array;\n}\n\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === undefined) from = 0;\n  if (to === undefined) to = buffer.byteLength;\n  return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n}\n\nfunction append(a, b) {\n  for (var i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\n\nfunction slice(a, b, from, to) {\n  for (var i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n\n  return a;\n} // inject array a2 into array a1 at index\n\n\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n}\n\nexport { FBXLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","TextureLoader","RepeatWrapping","ClampToEdgeWrapping","Texture","MeshPhongMaterial","MeshLambertMaterial","Color","sRGBEncoding","EquirectangularReflectionMapping","Matrix4","Group","Bone","PropertyBinding","Object3D","OrthographicCamera","PerspectiveCamera","PointLight","MathUtils","SpotLight","DirectionalLight","SkinnedMesh","Mesh","LineBasicMaterial","Line","Vector3","Skeleton","AmbientLight","BufferGeometry","Float32BufferAttribute","Uint16BufferAttribute","Matrix3","Vector4","BufferAttribute","AnimationClip","Quaternion","Euler","VectorKeyframeTrack","QuaternionKeyframeTrack","NumberKeyframeTrack","unzlibSync","NURBSCurve","fbxTree","connections","sceneGraph","FBXLoader","manager","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","buffer","parse","e","console","error","itemError","FBXBuffer","isFbxFormatBinary","BinaryParser","FBXText","convertArrayBufferToString","isFbxFormatASCII","Error","getFbxVersion","TextParser","textureLoader","resourcePath","setCrossOrigin","crossOrigin","FBXTreeParser","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","GeometryParser","parseScene","connectionMap","Map","rawConnections","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","parseInt","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","byteLength","base64Content","image","parseImage","filename","undefined","split","pop","content","fileName","extension","slice","lastIndexOf","toLowerCase","type","getHandler","warn","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","value","valueV","wrapS","wrapT","values","Scaling","repeat","x","y","currentPath","length","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","setValues","BumpFactor","bumpScale","Diffuse","color","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","map","encoding","displacementMap","emissiveMap","normalMap","envMap","mapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","TransformLink","a","Indexes","Weights","bones","rawMorphTargets","i","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","parentConnections","connection","parent","add","bindSkeleton","createAmbientLight","setupMorphMaterials","traverse","node","userData","transformData","parentMatrix","matrix","parentMatrixWorld","matrixWorld","transform","generateTransform","applyMatrix4","updateWorldMatrix","animations","AnimationParser","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","sanitizeNodeName","getTransformData","bone","subBone","copy","cameraAttribute","attr","NodeAttribute","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","setFocalLength","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","decay","angle","Math","PI","InnerAngle","degToRad","penumbra","OuterAngle","max","CastShadows","castShadow","geometry","attributes","vertexColors","FBX_Deformer","skinning","normalizeSkinWeights","reduce","geo","linewidth","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","target","position","lookAt","bindMatrices","parsePoseNodes","geoRelationships","geoConnParent","bind","BindPoseNode","Pose","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","isMesh","morphAttributes","setupMorphMaterial","index","uuid","matUuid","sharedMat","mat","clonedMat","clone","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","vertex","setAttribute","colors","weightsIndices","vertexWeights","normal","normalMatrix","getNormalMatrix","normalAttribute","applyNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","UV","parseUVs","weightTable","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","parentGeo","parentGeoNode","morphTargetsRelative","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","Float32Array","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","order","Order","isNaN","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","startKnot","endKnot","Form","curve","vertices","getPoints","positions","toArray","animationClips","rawClips","parseClips","key","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","match","curveNode","curves","rawCurves","animationCurve","times","KeyTime","convertFBXTimeToSeconds","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","z","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","decompose","setFromQuaternion","T","Object","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","interpolateRotations","setFromEuler","invert","quaternion","euler","quaternionValues","premultiply","multiply","val","morphNum","getObjectByName","morphTargetDictionary","sort","targetIndex","lastValue","currentValue","prevValue","xIndex","yIndex","zIndex","time","xValue","yValue","zValue","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","timeSpan","interval","nextTime","interpolatedTimes","interpolatedValues","inject","nodeStack","currentIndent","currentProp","currentPropName","text","allNodes","FBXTree","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","popStack","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","getCurrentNode","pushStack","contentLine","propName","propValue","parentName","parseNodeSpecialProperty","connProps","from","to","rest","elem","append","setCurrentProp","parseNumberArray","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","getPrevNode","type2","flag","reader","BinaryReader","skip","version","getUint32","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","reader2","littleEndian","dv","DataView","offset","low","high","nullByte","decodeText","CORRECT","cursor","read","result","num","versionRegExp","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lParentLX","lGlobalT","setPosition","makeRotationFromEuler","lLRM","lParentGRM","extractRotation","lParentTM","copyPosition","lParentGSM","lParentGRSM","lLSM","lGlobalRS","lParentLSM","setFromMatrixScale","lParentLSM_inv","lParentGSM_noLocal","lRotationPivotM_inv","lScalingPivotM_inv","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","a1","a2"],"sources":["/home/cliffexpc63/my example/portfolio/node_modules/three-stdlib/loaders/FBXLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, TextureLoader, RepeatWrapping, ClampToEdgeWrapping, Texture, MeshPhongMaterial, MeshLambertMaterial, Color, sRGBEncoding, EquirectangularReflectionMapping, Matrix4, Group, Bone, PropertyBinding, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, MathUtils, SpotLight, DirectionalLight, SkinnedMesh, Mesh, LineBasicMaterial, Line, Vector3, Skeleton, AmbientLight, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, Matrix3, Vector4, BufferAttribute, AnimationClip, Quaternion, Euler, VectorKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack } from 'three';\nimport { unzlibSync } from 'fflate';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\n * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * \tBinary format specification:\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\nlet fbxTree;\nlet connections;\nlet sceneGraph;\n\nclass FBXLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(FBXBuffer, path) {\n    if (isFbxFormatBinary(FBXBuffer)) {\n      fbxTree = new BinaryParser().parse(FBXBuffer);\n    } else {\n      const FBXText = convertArrayBufferToString(FBXBuffer);\n\n      if (!isFbxFormatASCII(FBXText)) {\n        throw new Error('THREE.FBXLoader: Unknown format.');\n      }\n\n      if (getFbxVersion(FBXText) < 7000) {\n        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n      }\n\n      fbxTree = new TextParser().parse(FBXText);\n    } // console.log( fbxTree );\n\n\n    const textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n  }\n\n} // Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\n\n\nclass FBXTreeParser {\n  constructor(textureLoader, manager) {\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n\n  parse() {\n    connections = this.parseConnections();\n    const images = this.parseImages();\n    const textures = this.parseTextures(images);\n    const materials = this.parseMaterials(textures);\n    const deformers = this.parseDeformers();\n    const geometryMap = new GeometryParser().parse(deformers);\n    this.parseScene(deformers, geometryMap, materials);\n    return sceneGraph;\n  } // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n  // and details the connection type\n\n\n  parseConnections() {\n    const connectionMap = new Map();\n\n    if ('Connections' in fbxTree) {\n      const rawConnections = fbxTree.Connections.connections;\n      rawConnections.forEach(function (rawConnection) {\n        const fromID = rawConnection[0];\n        const toID = rawConnection[1];\n        const relationship = rawConnection[2];\n\n        if (!connectionMap.has(fromID)) {\n          connectionMap.set(fromID, {\n            parents: [],\n            children: []\n          });\n        }\n\n        const parentRelationship = {\n          ID: toID,\n          relationship: relationship\n        };\n        connectionMap.get(fromID).parents.push(parentRelationship);\n\n        if (!connectionMap.has(toID)) {\n          connectionMap.set(toID, {\n            parents: [],\n            children: []\n          });\n        }\n\n        const childRelationship = {\n          ID: fromID,\n          relationship: relationship\n        };\n        connectionMap.get(toID).children.push(childRelationship);\n      });\n    }\n\n    return connectionMap;\n  } // Parse FBXTree.Objects.Video for embedded image data\n  // These images are connected to textures in FBXTree.Objects.Textures\n  // via FBXTree.Connections.\n\n\n  parseImages() {\n    const images = {};\n    const blobs = {};\n\n    if ('Video' in fbxTree.Objects) {\n      const videoNodes = fbxTree.Objects.Video;\n\n      for (const nodeID in videoNodes) {\n        const videoNode = videoNodes[nodeID];\n        const id = parseInt(nodeID);\n        images[id] = videoNode.RelativeFilename || videoNode.Filename; // raw image data is in videoNode.Content\n\n        if ('Content' in videoNode) {\n          const arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n          const base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n\n          if (arrayBufferContent || base64Content) {\n            const image = this.parseImage(videoNodes[nodeID]);\n            blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n          }\n        }\n      }\n    }\n\n    for (const id in images) {\n      const filename = images[id];\n      if (blobs[filename] !== undefined) images[id] = blobs[filename];else images[id] = images[id].split('\\\\').pop();\n    }\n\n    return images;\n  } // Parse embedded image data in FBXTree.Video.Content\n\n\n  parseImage(videoNode) {\n    const content = videoNode.Content;\n    const fileName = videoNode.RelativeFilename || videoNode.Filename;\n    const extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n    let type;\n\n    switch (extension) {\n      case 'bmp':\n        type = 'image/bmp';\n        break;\n\n      case 'jpg':\n      case 'jpeg':\n        type = 'image/jpeg';\n        break;\n\n      case 'png':\n        type = 'image/png';\n        break;\n\n      case 'tif':\n        type = 'image/tiff';\n        break;\n\n      case 'tga':\n        if (this.manager.getHandler('.tga') === null) {\n          console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n        }\n\n        type = 'image/tga';\n        break;\n\n      default:\n        console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n        return;\n    }\n\n    if (typeof content === 'string') {\n      // ASCII format\n      return 'data:' + type + ';base64,' + content;\n    } else {\n      // Binary Format\n      const array = new Uint8Array(content);\n      return window.URL.createObjectURL(new Blob([array], {\n        type: type\n      }));\n    }\n  } // Parse nodes in FBXTree.Objects.Texture\n  // These contain details such as UV scaling, cropping, rotation etc and are connected\n  // to images in FBXTree.Objects.Video\n\n\n  parseTextures(images) {\n    const textureMap = new Map();\n\n    if ('Texture' in fbxTree.Objects) {\n      const textureNodes = fbxTree.Objects.Texture;\n\n      for (const nodeID in textureNodes) {\n        const texture = this.parseTexture(textureNodes[nodeID], images);\n        textureMap.set(parseInt(nodeID), texture);\n      }\n    }\n\n    return textureMap;\n  } // Parse individual node in FBXTree.Objects.Texture\n\n\n  parseTexture(textureNode, images) {\n    const texture = this.loadTexture(textureNode, images);\n    texture.ID = textureNode.id;\n    texture.name = textureNode.attrName;\n    const wrapModeU = textureNode.WrapModeU;\n    const wrapModeV = textureNode.WrapModeV;\n    const valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n    const valueV = wrapModeV !== undefined ? wrapModeV.value : 0; // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n    // 0: repeat(default), 1: clamp\n\n    texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\n    if ('Scaling' in textureNode) {\n      const values = textureNode.Scaling.value;\n      texture.repeat.x = values[0];\n      texture.repeat.y = values[1];\n    }\n\n    return texture;\n  } // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n\n\n  loadTexture(textureNode, images) {\n    let fileName;\n    const currentPath = this.textureLoader.path;\n    const children = connections.get(textureNode.id).children;\n\n    if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n      fileName = images[children[0].ID];\n\n      if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n        this.textureLoader.setPath(undefined);\n      }\n    }\n\n    let texture;\n    const extension = textureNode.FileName.slice(-3).toLowerCase();\n\n    if (extension === 'tga') {\n      const loader = this.manager.getHandler('.tga');\n\n      if (loader === null) {\n        console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        texture = loader.load(fileName);\n      }\n    } else if (extension === 'psd') {\n      console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n      texture = new Texture();\n    } else {\n      texture = this.textureLoader.load(fileName);\n    }\n\n    this.textureLoader.setPath(currentPath);\n    return texture;\n  } // Parse nodes in FBXTree.Objects.Material\n\n\n  parseMaterials(textureMap) {\n    const materialMap = new Map();\n\n    if ('Material' in fbxTree.Objects) {\n      const materialNodes = fbxTree.Objects.Material;\n\n      for (const nodeID in materialNodes) {\n        const material = this.parseMaterial(materialNodes[nodeID], textureMap);\n        if (material !== null) materialMap.set(parseInt(nodeID), material);\n      }\n    }\n\n    return materialMap;\n  } // Parse single node in FBXTree.Objects.Material\n  // Materials are connected to texture maps in FBXTree.Objects.Textures\n  // FBX format currently only supports Lambert and Phong shading models\n\n\n  parseMaterial(materialNode, textureMap) {\n    const ID = materialNode.id;\n    const name = materialNode.attrName;\n    let type = materialNode.ShadingModel; // Case where FBX wraps shading model in property object.\n\n    if (typeof type === 'object') {\n      type = type.value;\n    } // Ignore unused materials which don't have any connections.\n\n\n    if (!connections.has(ID)) return null;\n    const parameters = this.parseParameters(materialNode, textureMap, ID);\n    let material;\n\n    switch (type.toLowerCase()) {\n      case 'phong':\n        material = new MeshPhongMaterial();\n        break;\n\n      case 'lambert':\n        material = new MeshLambertMaterial();\n        break;\n\n      default:\n        console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n        material = new MeshPhongMaterial();\n        break;\n    }\n\n    material.setValues(parameters);\n    material.name = name;\n    return material;\n  } // Parse FBX material and return parameters suitable for a three.js material\n  // Also parse the texture map and return any textures associated with the material\n\n\n  parseParameters(materialNode, textureMap, ID) {\n    const parameters = {};\n\n    if (materialNode.BumpFactor) {\n      parameters.bumpScale = materialNode.BumpFactor.value;\n    }\n\n    if (materialNode.Diffuse) {\n      parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n    } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')) {\n      // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n      parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n    }\n\n    if (materialNode.DisplacementFactor) {\n      parameters.displacementScale = materialNode.DisplacementFactor.value;\n    }\n\n    if (materialNode.Emissive) {\n      parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n    } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')) {\n      // The blender exporter exports emissive color here instead of in materialNode.Emissive\n      parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n    }\n\n    if (materialNode.EmissiveFactor) {\n      parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n    }\n\n    if (materialNode.Opacity) {\n      parameters.opacity = parseFloat(materialNode.Opacity.value);\n    }\n\n    if (parameters.opacity < 1.0) {\n      parameters.transparent = true;\n    }\n\n    if (materialNode.ReflectionFactor) {\n      parameters.reflectivity = materialNode.ReflectionFactor.value;\n    }\n\n    if (materialNode.Shininess) {\n      parameters.shininess = materialNode.Shininess.value;\n    }\n\n    if (materialNode.Specular) {\n      parameters.specular = new Color().fromArray(materialNode.Specular.value);\n    } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n      // The blender exporter exports specular color here instead of in materialNode.Specular\n      parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n    }\n\n    const scope = this;\n    connections.get(ID).children.forEach(function (child) {\n      const type = child.relationship;\n\n      switch (type) {\n        case 'Bump':\n          parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'Maya|TEX_ao_map':\n          parameters.aoMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'DiffuseColor':\n        case 'Maya|TEX_color_map':\n          parameters.map = scope.getTexture(textureMap, child.ID);\n          parameters.map.encoding = sRGBEncoding;\n          break;\n\n        case 'DisplacementColor':\n          parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'EmissiveColor':\n          parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n          parameters.emissiveMap.encoding = sRGBEncoding;\n          break;\n\n        case 'NormalMap':\n        case 'Maya|TEX_normal_map':\n          parameters.normalMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'ReflectionColor':\n          parameters.envMap = scope.getTexture(textureMap, child.ID);\n          parameters.envMap.mapping = EquirectangularReflectionMapping;\n          parameters.envMap.encoding = sRGBEncoding;\n          break;\n\n        case 'SpecularColor':\n          parameters.specularMap = scope.getTexture(textureMap, child.ID);\n          parameters.specularMap.encoding = sRGBEncoding;\n          break;\n\n        case 'TransparentColor':\n        case 'TransparencyFactor':\n          parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n          parameters.transparent = true;\n          break;\n\n        case 'AmbientColor':\n        case 'ShininessExponent': // AKA glossiness map\n\n        case 'SpecularFactor': // AKA specularLevel\n\n        case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\n        default:\n          console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n          break;\n      }\n    });\n    return parameters;\n  } // get a texture from the textureMap for use by a material.\n\n\n  getTexture(textureMap, id) {\n    // if the texture is a layered texture, just use the first layer and issue a warning\n    if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n      console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n      id = connections.get(id).children[0].ID;\n    }\n\n    return textureMap.get(id);\n  } // Parse nodes in FBXTree.Objects.Deformer\n  // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n  // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\n\n  parseDeformers() {\n    const skeletons = {};\n    const morphTargets = {};\n\n    if ('Deformer' in fbxTree.Objects) {\n      const DeformerNodes = fbxTree.Objects.Deformer;\n\n      for (const nodeID in DeformerNodes) {\n        const deformerNode = DeformerNodes[nodeID];\n        const relationships = connections.get(parseInt(nodeID));\n\n        if (deformerNode.attrType === 'Skin') {\n          const skeleton = this.parseSkeleton(relationships, DeformerNodes);\n          skeleton.ID = nodeID;\n\n          if (relationships.parents.length > 1) {\n            console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n          }\n\n          skeleton.geometryID = relationships.parents[0].ID;\n          skeletons[nodeID] = skeleton;\n        } else if (deformerNode.attrType === 'BlendShape') {\n          const morphTarget = {\n            id: nodeID\n          };\n          morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n          morphTarget.id = nodeID;\n\n          if (relationships.parents.length > 1) {\n            console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n          }\n\n          morphTargets[nodeID] = morphTarget;\n        }\n      }\n    }\n\n    return {\n      skeletons: skeletons,\n      morphTargets: morphTargets\n    };\n  } // Parse single nodes in FBXTree.Objects.Deformer\n  // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n  // Each skin node represents a skeleton and each cluster node represents a bone\n\n\n  parseSkeleton(relationships, deformerNodes) {\n    const rawBones = [];\n    relationships.children.forEach(function (child) {\n      const boneNode = deformerNodes[child.ID];\n      if (boneNode.attrType !== 'Cluster') return;\n      const rawBone = {\n        ID: child.ID,\n        indices: [],\n        weights: [],\n        transformLink: new Matrix4().fromArray(boneNode.TransformLink.a) // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n        // linkMode: boneNode.Mode,\n\n      };\n\n      if ('Indexes' in boneNode) {\n        rawBone.indices = boneNode.Indexes.a;\n        rawBone.weights = boneNode.Weights.a;\n      }\n\n      rawBones.push(rawBone);\n    });\n    return {\n      rawBones: rawBones,\n      bones: []\n    };\n  } // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\n\n  parseMorphTargets(relationships, deformerNodes) {\n    const rawMorphTargets = [];\n\n    for (let i = 0; i < relationships.children.length; i++) {\n      const child = relationships.children[i];\n      const morphTargetNode = deformerNodes[child.ID];\n      const rawMorphTarget = {\n        name: morphTargetNode.attrName,\n        initialWeight: morphTargetNode.DeformPercent,\n        id: morphTargetNode.id,\n        fullWeights: morphTargetNode.FullWeights.a\n      };\n      if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n      rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n        return child.relationship === undefined;\n      })[0].ID;\n      rawMorphTargets.push(rawMorphTarget);\n    }\n\n    return rawMorphTargets;\n  } // create the main Group() to be returned by the loader\n\n\n  parseScene(deformers, geometryMap, materialMap) {\n    sceneGraph = new Group();\n    const modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n    const modelNodes = fbxTree.Objects.Model;\n    const scope = this;\n    modelMap.forEach(function (model) {\n      const modelNode = modelNodes[model.ID];\n      scope.setLookAtProperties(model, modelNode);\n      const parentConnections = connections.get(model.ID).parents;\n      parentConnections.forEach(function (connection) {\n        const parent = modelMap.get(connection.ID);\n        if (parent !== undefined) parent.add(model);\n      });\n\n      if (model.parent === null) {\n        sceneGraph.add(model);\n      }\n    });\n    this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n    this.createAmbientLight();\n    this.setupMorphMaterials();\n    sceneGraph.traverse(function (node) {\n      if (node.userData.transformData) {\n        if (node.parent) {\n          node.userData.transformData.parentMatrix = node.parent.matrix;\n          node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n        }\n\n        const transform = generateTransform(node.userData.transformData);\n        node.applyMatrix4(transform);\n        node.updateWorldMatrix();\n      }\n    });\n    const animations = new AnimationParser().parse(); // if all the models where already combined in a single group, just return that\n\n    if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n      sceneGraph.children[0].animations = animations;\n      sceneGraph = sceneGraph.children[0];\n    }\n\n    sceneGraph.animations = animations;\n  } // parse nodes in FBXTree.Objects.Model\n\n\n  parseModels(skeletons, geometryMap, materialMap) {\n    const modelMap = new Map();\n    const modelNodes = fbxTree.Objects.Model;\n\n    for (const nodeID in modelNodes) {\n      const id = parseInt(nodeID);\n      const node = modelNodes[nodeID];\n      const relationships = connections.get(id);\n      let model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n\n      if (!model) {\n        switch (node.attrType) {\n          case 'Camera':\n            model = this.createCamera(relationships);\n            break;\n\n          case 'Light':\n            model = this.createLight(relationships);\n            break;\n\n          case 'Mesh':\n            model = this.createMesh(relationships, geometryMap, materialMap);\n            break;\n\n          case 'NurbsCurve':\n            model = this.createCurve(relationships, geometryMap);\n            break;\n\n          case 'LimbNode':\n          case 'Root':\n            model = new Bone();\n            break;\n\n          case 'Null':\n          default:\n            model = new Group();\n            break;\n        }\n\n        model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : '';\n        model.ID = id;\n      }\n\n      this.getTransformData(model, node);\n      modelMap.set(id, model);\n    }\n\n    return modelMap;\n  }\n\n  buildSkeleton(relationships, skeletons, id, name) {\n    let bone = null;\n    relationships.parents.forEach(function (parent) {\n      for (const ID in skeletons) {\n        const skeleton = skeletons[ID];\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          if (rawBone.ID === parent.ID) {\n            const subBone = bone;\n            bone = new Bone();\n            bone.matrixWorld.copy(rawBone.transformLink); // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n            bone.name = name ? PropertyBinding.sanitizeNodeName(name) : '';\n            bone.ID = id;\n            skeleton.bones[i] = bone; // In cases where a bone is shared between multiple meshes\n            // duplicate the bone here and and it as a child of the first bone\n\n            if (subBone !== null) {\n              bone.add(subBone);\n            }\n          }\n        });\n      }\n    });\n    return bone;\n  } // create a PerspectiveCamera or OrthographicCamera\n\n\n  createCamera(relationships) {\n    let model;\n    let cameraAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n      if (attr !== undefined) {\n        cameraAttribute = attr;\n      }\n    });\n\n    if (cameraAttribute === undefined) {\n      model = new Object3D();\n    } else {\n      let type = 0;\n\n      if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n        type = 1;\n      }\n\n      let nearClippingPlane = 1;\n\n      if (cameraAttribute.NearPlane !== undefined) {\n        nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n      }\n\n      let farClippingPlane = 1000;\n\n      if (cameraAttribute.FarPlane !== undefined) {\n        farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n      }\n\n      let width = window.innerWidth;\n      let height = window.innerHeight;\n\n      if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n        width = cameraAttribute.AspectWidth.value;\n        height = cameraAttribute.AspectHeight.value;\n      }\n\n      const aspect = width / height;\n      let fov = 45;\n\n      if (cameraAttribute.FieldOfView !== undefined) {\n        fov = cameraAttribute.FieldOfView.value;\n      }\n\n      const focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n      switch (type) {\n        case 0:\n          // Perspective\n          model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n          if (focalLength !== null) model.setFocalLength(focalLength);\n          break;\n\n        case 1:\n          // Orthographic\n          model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n          break;\n\n        default:\n          console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n          model = new Object3D();\n          break;\n      }\n    }\n\n    return model;\n  } // Create a DirectionalLight, PointLight or SpotLight\n\n\n  createLight(relationships) {\n    let model;\n    let lightAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n      if (attr !== undefined) {\n        lightAttribute = attr;\n      }\n    });\n\n    if (lightAttribute === undefined) {\n      model = new Object3D();\n    } else {\n      let type; // LightType can be undefined for Point lights\n\n      if (lightAttribute.LightType === undefined) {\n        type = 0;\n      } else {\n        type = lightAttribute.LightType.value;\n      }\n\n      let color = 0xffffff;\n\n      if (lightAttribute.Color !== undefined) {\n        color = new Color().fromArray(lightAttribute.Color.value);\n      }\n\n      let intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100; // light disabled\n\n      if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n        intensity = 0;\n      }\n\n      let distance = 0;\n\n      if (lightAttribute.FarAttenuationEnd !== undefined) {\n        if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n          distance = 0;\n        } else {\n          distance = lightAttribute.FarAttenuationEnd.value;\n        }\n      } // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\n\n      const decay = 1;\n\n      switch (type) {\n        case 0:\n          // Point\n          model = new PointLight(color, intensity, distance, decay);\n          break;\n\n        case 1:\n          // Directional\n          model = new DirectionalLight(color, intensity);\n          break;\n\n        case 2:\n          // Spot\n          let angle = Math.PI / 3;\n\n          if (lightAttribute.InnerAngle !== undefined) {\n            angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n          }\n\n          let penumbra = 0;\n\n          if (lightAttribute.OuterAngle !== undefined) {\n            // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n            // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n            // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n            penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n            penumbra = Math.max(penumbra, 1);\n          }\n\n          model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n          break;\n\n        default:\n          console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n          model = new PointLight(color, intensity);\n          break;\n      }\n\n      if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n        model.castShadow = true;\n      }\n    }\n\n    return model;\n  }\n\n  createMesh(relationships, geometryMap, materialMap) {\n    let model;\n    let geometry = null;\n    let material = null;\n    const materials = []; // get geometry and materials(s) from connections\n\n    relationships.children.forEach(function (child) {\n      if (geometryMap.has(child.ID)) {\n        geometry = geometryMap.get(child.ID);\n      }\n\n      if (materialMap.has(child.ID)) {\n        materials.push(materialMap.get(child.ID));\n      }\n    });\n\n    if (materials.length > 1) {\n      material = materials;\n    } else if (materials.length > 0) {\n      material = materials[0];\n    } else {\n      material = new MeshPhongMaterial({\n        color: 0xcccccc\n      });\n      materials.push(material);\n    }\n\n    if ('color' in geometry.attributes) {\n      materials.forEach(function (material) {\n        material.vertexColors = true;\n      });\n    }\n\n    if (geometry.FBX_Deformer) {\n      materials.forEach(function (material) {\n        material.skinning = true;\n      });\n      model = new SkinnedMesh(geometry, material);\n      model.normalizeSkinWeights();\n    } else {\n      model = new Mesh(geometry, material);\n    }\n\n    return model;\n  }\n\n  createCurve(relationships, geometryMap) {\n    const geometry = relationships.children.reduce(function (geo, child) {\n      if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n      return geo;\n    }, null); // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\n    const material = new LineBasicMaterial({\n      color: 0x3300ff,\n      linewidth: 1\n    });\n    return new Line(geometry, material);\n  } // parse the model node for transform data\n\n\n  getTransformData(model, modelNode) {\n    const transformData = {};\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = 'ZYX';\n    if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n    if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n    if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n    if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n    if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n    if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n    if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n    if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n    if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n    model.userData.transformData = transformData;\n  }\n\n  setLookAtProperties(model, modelNode) {\n    if ('LookAtProperty' in modelNode) {\n      const children = connections.get(model.ID).children;\n      children.forEach(function (child) {\n        if (child.relationship === 'LookAtProperty') {\n          const lookAtTarget = fbxTree.Objects.Model[child.ID];\n\n          if ('Lcl_Translation' in lookAtTarget) {\n            const pos = lookAtTarget.Lcl_Translation.value; // DirectionalLight, SpotLight\n\n            if (model.target !== undefined) {\n              model.target.position.fromArray(pos);\n              sceneGraph.add(model.target);\n            } else {\n              // Cameras and other Object3Ds\n              model.lookAt(new Vector3().fromArray(pos));\n            }\n          }\n        }\n      });\n    }\n  }\n\n  bindSkeleton(skeletons, geometryMap, modelMap) {\n    const bindMatrices = this.parsePoseNodes();\n\n    for (const ID in skeletons) {\n      const skeleton = skeletons[ID];\n      const parents = connections.get(parseInt(skeleton.ID)).parents;\n      parents.forEach(function (parent) {\n        if (geometryMap.has(parent.ID)) {\n          const geoID = parent.ID;\n          const geoRelationships = connections.get(geoID);\n          geoRelationships.parents.forEach(function (geoConnParent) {\n            if (modelMap.has(geoConnParent.ID)) {\n              const model = modelMap.get(geoConnParent.ID);\n              model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n            }\n          });\n        }\n      });\n    }\n  }\n\n  parsePoseNodes() {\n    const bindMatrices = {};\n\n    if ('Pose' in fbxTree.Objects) {\n      const BindPoseNode = fbxTree.Objects.Pose;\n\n      for (const nodeID in BindPoseNode) {\n        if (BindPoseNode[nodeID].attrType === 'BindPose') {\n          const poseNodes = BindPoseNode[nodeID].PoseNode;\n\n          if (Array.isArray(poseNodes)) {\n            poseNodes.forEach(function (poseNode) {\n              bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n            });\n          } else {\n            bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n          }\n        }\n      }\n    }\n\n    return bindMatrices;\n  } // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n\n\n  createAmbientLight() {\n    if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n      const ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n      const r = ambientColor[0];\n      const g = ambientColor[1];\n      const b = ambientColor[2];\n\n      if (r !== 0 || g !== 0 || b !== 0) {\n        const color = new Color(r, g, b);\n        sceneGraph.add(new AmbientLight(color, 1));\n      }\n    }\n  }\n\n  setupMorphMaterials() {\n    const scope = this;\n    sceneGraph.traverse(function (child) {\n      if (child.isMesh) {\n        if (child.geometry.morphAttributes.position && child.geometry.morphAttributes.position.length) {\n          if (Array.isArray(child.material)) {\n            child.material.forEach(function (material, i) {\n              scope.setupMorphMaterial(child, material, i);\n            });\n          } else {\n            scope.setupMorphMaterial(child, child.material);\n          }\n        }\n      }\n    });\n  }\n\n  setupMorphMaterial(child, material, index) {\n    const uuid = child.uuid;\n    const matUuid = material.uuid; // if a geometry has morph targets, it cannot share the material with other geometries\n\n    let sharedMat = false;\n    sceneGraph.traverse(function (node) {\n      if (node.isMesh) {\n        if (Array.isArray(node.material)) {\n          node.material.forEach(function (mat) {\n            if (mat.uuid === matUuid && node.uuid !== uuid) sharedMat = true;\n          });\n        } else if (node.material.uuid === matUuid && node.uuid !== uuid) {\n          sharedMat = true;\n        }\n      }\n    });\n\n    if (sharedMat === true) {\n      const clonedMat = material.clone();\n      clonedMat.morphTargets = true;\n      if (index === undefined) child.material = clonedMat;else child.material[index] = clonedMat;\n    } else {\n      material.morphTargets = true;\n    }\n  }\n\n} // parse Geometry data from FBXTree and return map of BufferGeometries\n\n\nclass GeometryParser {\n  // Parse nodes in FBXTree.Objects.Geometry\n  parse(deformers) {\n    const geometryMap = new Map();\n\n    if ('Geometry' in fbxTree.Objects) {\n      const geoNodes = fbxTree.Objects.Geometry;\n\n      for (const nodeID in geoNodes) {\n        const relationships = connections.get(parseInt(nodeID));\n        const geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n        geometryMap.set(parseInt(nodeID), geo);\n      }\n    }\n\n    return geometryMap;\n  } // Parse single node in FBXTree.Objects.Geometry\n\n\n  parseGeometry(relationships, geoNode, deformers) {\n    switch (geoNode.attrType) {\n      case 'Mesh':\n        return this.parseMeshGeometry(relationships, geoNode, deformers);\n\n      case 'NurbsCurve':\n        return this.parseNurbsGeometry(geoNode);\n    }\n  } // Parse single node mesh geometry in FBXTree.Objects.Geometry\n\n\n  parseMeshGeometry(relationships, geoNode, deformers) {\n    const skeletons = deformers.skeletons;\n    const morphTargets = [];\n    const modelNodes = relationships.parents.map(function (parent) {\n      return fbxTree.Objects.Model[parent.ID];\n    }); // don't create geometry if it is not associated with any models\n\n    if (modelNodes.length === 0) return;\n    const skeleton = relationships.children.reduce(function (skeleton, child) {\n      if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n      return skeleton;\n    }, null);\n    relationships.children.forEach(function (child) {\n      if (deformers.morphTargets[child.ID] !== undefined) {\n        morphTargets.push(deformers.morphTargets[child.ID]);\n      }\n    }); // Assume one model and get the preRotation from that\n    // if there is more than one model associated with the geometry this may cause problems\n\n    const modelNode = modelNodes[0];\n    const transformData = {};\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n    if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n    if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n    const transform = generateTransform(transformData);\n    return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n  } // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n\n\n  genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n    const geo = new BufferGeometry();\n    if (geoNode.attrName) geo.name = geoNode.attrName;\n    const geoInfo = this.parseGeoNode(geoNode, skeleton);\n    const buffers = this.genBuffers(geoInfo);\n    const positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n    positionAttribute.applyMatrix4(preTransform);\n    geo.setAttribute('position', positionAttribute);\n\n    if (buffers.colors.length > 0) {\n      geo.setAttribute('color', new Float32BufferAttribute(buffers.colors, 3));\n    }\n\n    if (skeleton) {\n      geo.setAttribute('skinIndex', new Uint16BufferAttribute(buffers.weightsIndices, 4));\n      geo.setAttribute('skinWeight', new Float32BufferAttribute(buffers.vertexWeights, 4)); // used later to bind the skeleton to the model\n\n      geo.FBX_Deformer = skeleton;\n    }\n\n    if (buffers.normal.length > 0) {\n      const normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n      const normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n      normalAttribute.applyNormalMatrix(normalMatrix);\n      geo.setAttribute('normal', normalAttribute);\n    }\n\n    buffers.uvs.forEach(function (uvBuffer, i) {\n      // subsequent uv buffers are called 'uv1', 'uv2', ...\n      let name = 'uv' + (i + 1).toString(); // the first uv buffer is just called 'uv'\n\n      if (i === 0) {\n        name = 'uv';\n      }\n\n      geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n    });\n\n    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n      // Convert the material indices of each vertex into rendering groups on the geometry.\n      let prevMaterialIndex = buffers.materialIndex[0];\n      let startIndex = 0;\n      buffers.materialIndex.forEach(function (currentIndex, i) {\n        if (currentIndex !== prevMaterialIndex) {\n          geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n          prevMaterialIndex = currentIndex;\n          startIndex = i;\n        }\n      }); // the loop above doesn't add the last group, do that here.\n\n      if (geo.groups.length > 0) {\n        const lastGroup = geo.groups[geo.groups.length - 1];\n        const lastIndex = lastGroup.start + lastGroup.count;\n\n        if (lastIndex !== buffers.materialIndex.length) {\n          geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n        }\n      } // case where there are multiple materials but the whole geometry is only\n      // using one of them\n\n\n      if (geo.groups.length === 0) {\n        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n      }\n    }\n\n    this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n    return geo;\n  }\n\n  parseGeoNode(geoNode, skeleton) {\n    const geoInfo = {};\n    geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n    geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n\n    if (geoNode.LayerElementColor) {\n      geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n    }\n\n    if (geoNode.LayerElementMaterial) {\n      geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n    }\n\n    if (geoNode.LayerElementNormal) {\n      geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n    }\n\n    if (geoNode.LayerElementUV) {\n      geoInfo.uv = [];\n      let i = 0;\n\n      while (geoNode.LayerElementUV[i]) {\n        if (geoNode.LayerElementUV[i].UV) {\n          geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n        }\n\n        i++;\n      }\n    }\n\n    geoInfo.weightTable = {};\n\n    if (skeleton !== null) {\n      geoInfo.skeleton = skeleton;\n      skeleton.rawBones.forEach(function (rawBone, i) {\n        // loop over the bone's vertex indices and weights\n        rawBone.indices.forEach(function (index, j) {\n          if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n          geoInfo.weightTable[index].push({\n            id: i,\n            weight: rawBone.weights[j]\n          });\n        });\n      });\n    }\n\n    return geoInfo;\n  }\n\n  genBuffers(geoInfo) {\n    const buffers = {\n      vertex: [],\n      normal: [],\n      colors: [],\n      uvs: [],\n      materialIndex: [],\n      vertexWeights: [],\n      weightsIndices: []\n    };\n    let polygonIndex = 0;\n    let faceLength = 0;\n    let displayedWeightsWarning = false; // these will hold data for a single face\n\n    let facePositionIndexes = [];\n    let faceNormals = [];\n    let faceColors = [];\n    let faceUVs = [];\n    let faceWeights = [];\n    let faceWeightIndices = [];\n    const scope = this;\n    geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n      let materialIndex;\n      let endOfFace = false; // Face index and vertex index arrays are combined in a single array\n      // A cube with quad faces looks like this:\n      // PolygonVertexIndex: *24 {\n      //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n      //  }\n      // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n      // to find index of last vertex bit shift the index: ^ - 1\n\n      if (vertexIndex < 0) {\n        vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n\n        endOfFace = true;\n      }\n\n      let weightIndices = [];\n      let weights = [];\n      facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n\n      if (geoInfo.color) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n        faceColors.push(data[0], data[1], data[2]);\n      }\n\n      if (geoInfo.skeleton) {\n        if (geoInfo.weightTable[vertexIndex] !== undefined) {\n          geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n            weights.push(wt.weight);\n            weightIndices.push(wt.id);\n          });\n        }\n\n        if (weights.length > 4) {\n          if (!displayedWeightsWarning) {\n            console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n            displayedWeightsWarning = true;\n          }\n\n          const wIndex = [0, 0, 0, 0];\n          const Weight = [0, 0, 0, 0];\n          weights.forEach(function (weight, weightIndex) {\n            let currentWeight = weight;\n            let currentIndex = weightIndices[weightIndex];\n            Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n              if (currentWeight > comparedWeight) {\n                comparedWeightArray[comparedWeightIndex] = currentWeight;\n                currentWeight = comparedWeight;\n                const tmp = wIndex[comparedWeightIndex];\n                wIndex[comparedWeightIndex] = currentIndex;\n                currentIndex = tmp;\n              }\n            });\n          });\n          weightIndices = wIndex;\n          weights = Weight;\n        } // if the weight array is shorter than 4 pad with 0s\n\n\n        while (weights.length < 4) {\n          weights.push(0);\n          weightIndices.push(0);\n        }\n\n        for (let i = 0; i < 4; ++i) {\n          faceWeights.push(weights[i]);\n          faceWeightIndices.push(weightIndices[i]);\n        }\n      }\n\n      if (geoInfo.normal) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n        faceNormals.push(data[0], data[1], data[2]);\n      }\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n      }\n\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, i) {\n          const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n\n          if (faceUVs[i] === undefined) {\n            faceUVs[i] = [];\n          }\n\n          faceUVs[i].push(data[0]);\n          faceUVs[i].push(data[1]);\n        });\n      }\n\n      faceLength++;\n\n      if (endOfFace) {\n        scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n        polygonIndex++;\n        faceLength = 0; // reset arrays for the next face\n\n        facePositionIndexes = [];\n        faceNormals = [];\n        faceColors = [];\n        faceUVs = [];\n        faceWeights = [];\n        faceWeightIndices = [];\n      }\n    });\n    return buffers;\n  } // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\n\n  genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n    for (let i = 2; i < faceLength; i++) {\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n\n      if (geoInfo.skeleton) {\n        buffers.vertexWeights.push(faceWeights[0]);\n        buffers.vertexWeights.push(faceWeights[1]);\n        buffers.vertexWeights.push(faceWeights[2]);\n        buffers.vertexWeights.push(faceWeights[3]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n        buffers.vertexWeights.push(faceWeights[i * 4]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[0]);\n        buffers.weightsIndices.push(faceWeightIndices[1]);\n        buffers.weightsIndices.push(faceWeightIndices[2]);\n        buffers.weightsIndices.push(faceWeightIndices[3]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n      }\n\n      if (geoInfo.color) {\n        buffers.colors.push(faceColors[0]);\n        buffers.colors.push(faceColors[1]);\n        buffers.colors.push(faceColors[2]);\n        buffers.colors.push(faceColors[(i - 1) * 3]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n        buffers.colors.push(faceColors[i * 3]);\n        buffers.colors.push(faceColors[i * 3 + 1]);\n        buffers.colors.push(faceColors[i * 3 + 2]);\n      }\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n      }\n\n      if (geoInfo.normal) {\n        buffers.normal.push(faceNormals[0]);\n        buffers.normal.push(faceNormals[1]);\n        buffers.normal.push(faceNormals[2]);\n        buffers.normal.push(faceNormals[(i - 1) * 3]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n        buffers.normal.push(faceNormals[i * 3]);\n        buffers.normal.push(faceNormals[i * 3 + 1]);\n        buffers.normal.push(faceNormals[i * 3 + 2]);\n      }\n\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, j) {\n          if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n          buffers.uvs[j].push(faceUVs[j][0]);\n          buffers.uvs[j].push(faceUVs[j][1]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n          buffers.uvs[j].push(faceUVs[j][i * 2]);\n          buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n        });\n      }\n    }\n  }\n\n  addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n    if (morphTargets.length === 0) return;\n    parentGeo.morphTargetsRelative = true;\n    parentGeo.morphAttributes.position = []; // parentGeo.morphAttributes.normal = []; // not implemented\n\n    const scope = this;\n    morphTargets.forEach(function (morphTarget) {\n      morphTarget.rawTargets.forEach(function (rawTarget) {\n        const morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n\n        if (morphGeoNode !== undefined) {\n          scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n        }\n      });\n    });\n  } // a morph geometry node is similar to a standard  node, and the node is also contained\n  // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n  // and a special attribute Index defining which vertices of the original geometry are affected\n  // Normal and position attributes only have data for the vertices that are affected by the morph\n\n\n  genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n    const vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n    const morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n    const indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n    const length = parentGeo.attributes.position.count * 3;\n    const morphPositions = new Float32Array(length);\n\n    for (let i = 0; i < indices.length; i++) {\n      const morphIndex = indices[i] * 3;\n      morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n      morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n      morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n    } // TODO: add morph normal support\n\n\n    const morphGeoInfo = {\n      vertexIndices: vertexIndices,\n      vertexPositions: morphPositions\n    };\n    const morphBuffers = this.genBuffers(morphGeoInfo);\n    const positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n    positionAttribute.name = name || morphGeoNode.attrName;\n    positionAttribute.applyMatrix4(preTransform);\n    parentGeo.morphAttributes.position.push(positionAttribute);\n  } // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\n\n  parseNormals(NormalNode) {\n    const mappingType = NormalNode.MappingInformationType;\n    const referenceType = NormalNode.ReferenceInformationType;\n    const buffer = NormalNode.Normals.a;\n    let indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      if ('NormalIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalIndex.a;\n      } else if ('NormalsIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalsIndex.a;\n      }\n    }\n\n    return {\n      dataSize: 3,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\n\n  parseUVs(UVNode) {\n    const mappingType = UVNode.MappingInformationType;\n    const referenceType = UVNode.ReferenceInformationType;\n    const buffer = UVNode.UV.a;\n    let indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = UVNode.UVIndex.a;\n    }\n\n    return {\n      dataSize: 2,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\n\n  parseVertexColors(ColorNode) {\n    const mappingType = ColorNode.MappingInformationType;\n    const referenceType = ColorNode.ReferenceInformationType;\n    const buffer = ColorNode.Colors.a;\n    let indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = ColorNode.ColorIndex.a;\n    }\n\n    return {\n      dataSize: 4,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\n\n  parseMaterialIndices(MaterialNode) {\n    const mappingType = MaterialNode.MappingInformationType;\n    const referenceType = MaterialNode.ReferenceInformationType;\n\n    if (mappingType === 'NoMappingInformation') {\n      return {\n        dataSize: 1,\n        buffer: [0],\n        indices: [0],\n        mappingType: 'AllSame',\n        referenceType: referenceType\n      };\n    }\n\n    const materialIndexBuffer = MaterialNode.Materials.a; // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n    // we expect.So we create an intermediate buffer that points to the index in the buffer,\n    // for conforming with the other functions we've written for other data.\n\n    const materialIndices = [];\n\n    for (let i = 0; i < materialIndexBuffer.length; ++i) {\n      materialIndices.push(i);\n    }\n\n    return {\n      dataSize: 1,\n      buffer: materialIndexBuffer,\n      indices: materialIndices,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\n\n  parseNurbsGeometry(geoNode) {\n    if (NURBSCurve === undefined) {\n      console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n      return new BufferGeometry();\n    }\n\n    const order = parseInt(geoNode.Order);\n\n    if (isNaN(order)) {\n      console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n      return new BufferGeometry();\n    }\n\n    const degree = order - 1;\n    const knots = geoNode.KnotVector.a;\n    const controlPoints = [];\n    const pointsValues = geoNode.Points.a;\n\n    for (let i = 0, l = pointsValues.length; i < l; i += 4) {\n      controlPoints.push(new Vector4().fromArray(pointsValues, i));\n    }\n\n    let startKnot, endKnot;\n\n    if (geoNode.Form === 'Closed') {\n      controlPoints.push(controlPoints[0]);\n    } else if (geoNode.Form === 'Periodic') {\n      startKnot = degree;\n      endKnot = knots.length - 1 - startKnot;\n\n      for (let i = 0; i < degree; ++i) {\n        controlPoints.push(controlPoints[i]);\n      }\n    }\n\n    const curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n    const vertices = curve.getPoints(controlPoints.length * 7);\n    const positions = new Float32Array(vertices.length * 3);\n    vertices.forEach(function (vertex, i) {\n      vertex.toArray(positions, i * 3);\n    });\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new BufferAttribute(positions, 3));\n    return geometry;\n  }\n\n} // parse animation data from FBXTree\n\n\nclass AnimationParser {\n  // take raw animation clips and turn them into three.js animation clips\n  parse() {\n    const animationClips = [];\n    const rawClips = this.parseClips();\n\n    if (rawClips !== undefined) {\n      for (const key in rawClips) {\n        const rawClip = rawClips[key];\n        const clip = this.addClip(rawClip);\n        animationClips.push(clip);\n      }\n    }\n\n    return animationClips;\n  }\n\n  parseClips() {\n    // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n    // if this is undefined we can safely assume there are no animations\n    if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n    const curveNodesMap = this.parseAnimationCurveNodes();\n    this.parseAnimationCurves(curveNodesMap);\n    const layersMap = this.parseAnimationLayers(curveNodesMap);\n    const rawClips = this.parseAnimStacks(layersMap);\n    return rawClips;\n  } // parse nodes in FBXTree.Objects.AnimationCurveNode\n  // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n  // and is referenced by an AnimationLayer\n\n\n  parseAnimationCurveNodes() {\n    const rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n    const curveNodesMap = new Map();\n\n    for (const nodeID in rawCurveNodes) {\n      const rawCurveNode = rawCurveNodes[nodeID];\n\n      if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n        const curveNode = {\n          id: rawCurveNode.id,\n          attr: rawCurveNode.attrName,\n          curves: {}\n        };\n        curveNodesMap.set(curveNode.id, curveNode);\n      }\n    }\n\n    return curveNodesMap;\n  } // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n  // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n  // axis ( e.g. times and values of x rotation)\n\n\n  parseAnimationCurves(curveNodesMap) {\n    const rawCurves = fbxTree.Objects.AnimationCurve; // TODO: Many values are identical up to roundoff error, but won't be optimised\n    // e.g. position times: [0, 0.4, 0. 8]\n    // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n    // clearly, this should be optimised to\n    // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n    // this shows up in nearly every FBX file, and generally time array is length > 100\n\n    for (const nodeID in rawCurves) {\n      const animationCurve = {\n        id: rawCurves[nodeID].id,\n        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n        values: rawCurves[nodeID].KeyValueFloat.a\n      };\n      const relationships = connections.get(animationCurve.id);\n\n      if (relationships !== undefined) {\n        const animationCurveID = relationships.parents[0].ID;\n        const animationCurveRelationship = relationships.parents[0].relationship;\n\n        if (animationCurveRelationship.match(/X/)) {\n          curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n        } else if (animationCurveRelationship.match(/Y/)) {\n          curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n        } else if (animationCurveRelationship.match(/Z/)) {\n          curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n          curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n        }\n      }\n    }\n  } // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n  // to various AnimationCurveNodes and is referenced by an AnimationStack node\n  // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\n\n  parseAnimationLayers(curveNodesMap) {\n    const rawLayers = fbxTree.Objects.AnimationLayer;\n    const layersMap = new Map();\n\n    for (const nodeID in rawLayers) {\n      const layerCurveNodes = [];\n      const connection = connections.get(parseInt(nodeID));\n\n      if (connection !== undefined) {\n        // all the animationCurveNodes used in the layer\n        const children = connection.children;\n        children.forEach(function (child, i) {\n          if (curveNodesMap.has(child.ID)) {\n            const curveNode = curveNodesMap.get(child.ID); // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\n            if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const modelID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined;\n                })[0].ID;\n\n                if (modelID !== undefined) {\n                  const rawModel = fbxTree.Objects.Model[modelID.toString()];\n\n                  if (rawModel === undefined) {\n                    console.warn('THREE.FBXLoader: Encountered a unused curve.', child);\n                    return;\n                  }\n\n                  const node = {\n                    modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                    ID: rawModel.id,\n                    initialPosition: [0, 0, 0],\n                    initialRotation: [0, 0, 0],\n                    initialScale: [1, 1, 1]\n                  };\n                  sceneGraph.traverse(function (child) {\n                    if (child.ID === rawModel.id) {\n                      node.transform = child.matrix;\n                      if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder;\n                    }\n                  });\n                  if (!node.transform) node.transform = new Matrix4(); // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                  // animation value as well\n\n                  if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value;\n                  if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value;\n                  layerCurveNodes[i] = node;\n                }\n              }\n\n              if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n            } else if (curveNode.curves.morph !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined;\n                })[0].ID;\n                const morpherID = connections.get(deformerID).parents[0].ID;\n                const geoID = connections.get(morpherID).parents[0].ID; // assuming geometry is not used in more than one model\n\n                const modelID = connections.get(geoID).parents[0].ID;\n                const rawModel = fbxTree.Objects.Model[modelID];\n                const node = {\n                  modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                  morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                };\n                layerCurveNodes[i] = node;\n              }\n\n              layerCurveNodes[i][curveNode.attr] = curveNode;\n            }\n          }\n        });\n        layersMap.set(parseInt(nodeID), layerCurveNodes);\n      }\n    }\n\n    return layersMap;\n  } // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n  // hierarchy. Each Stack node will be used to create a AnimationClip\n\n\n  parseAnimStacks(layersMap) {\n    const rawStacks = fbxTree.Objects.AnimationStack; // connect the stacks (clips) up to the layers\n\n    const rawClips = {};\n\n    for (const nodeID in rawStacks) {\n      const children = connections.get(parseInt(nodeID)).children;\n\n      if (children.length > 1) {\n        // it seems like stacks will always be associated with a single layer. But just in case there are files\n        // where there are multiple layers per stack, we'll display a warning\n        console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n      }\n\n      const layer = layersMap.get(children[0].ID);\n      rawClips[nodeID] = {\n        name: rawStacks[nodeID].attrName,\n        layer: layer\n      };\n    }\n\n    return rawClips;\n  }\n\n  addClip(rawClip) {\n    let tracks = [];\n    const scope = this;\n    rawClip.layer.forEach(function (rawTracks) {\n      tracks = tracks.concat(scope.generateTracks(rawTracks));\n    });\n    return new AnimationClip(rawClip.name, -1, tracks);\n  }\n\n  generateTracks(rawTracks) {\n    const tracks = [];\n    let initialPosition = new Vector3();\n    let initialRotation = new Quaternion();\n    let initialScale = new Vector3();\n    if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n    initialPosition = initialPosition.toArray();\n    initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n    initialScale = initialScale.toArray();\n\n    if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n      const positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n      if (positionTrack !== undefined) tracks.push(positionTrack);\n    }\n\n    if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n      const rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n      if (rotationTrack !== undefined) tracks.push(rotationTrack);\n    }\n\n    if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n      const scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n      if (scaleTrack !== undefined) tracks.push(scaleTrack);\n    }\n\n    if (rawTracks.DeformPercent !== undefined) {\n      const morphTrack = this.generateMorphTrack(rawTracks);\n      if (morphTrack !== undefined) tracks.push(morphTrack);\n    }\n\n    return tracks;\n  }\n\n  generateVectorTrack(modelName, curves, initialValue, type) {\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    return new VectorKeyframeTrack(modelName + '.' + type, times, values);\n  }\n\n  generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n    if (curves.x !== undefined) {\n      this.interpolateRotations(curves.x);\n      curves.x.values = curves.x.values.map(MathUtils.degToRad);\n    }\n\n    if (curves.y !== undefined) {\n      this.interpolateRotations(curves.y);\n      curves.y.values = curves.y.values.map(MathUtils.degToRad);\n    }\n\n    if (curves.z !== undefined) {\n      this.interpolateRotations(curves.z);\n      curves.z.values = curves.z.values.map(MathUtils.degToRad);\n    }\n\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n\n    if (preRotation !== undefined) {\n      preRotation = preRotation.map(MathUtils.degToRad);\n      preRotation.push(eulerOrder);\n      preRotation = new Euler().fromArray(preRotation);\n      preRotation = new Quaternion().setFromEuler(preRotation);\n    }\n\n    if (postRotation !== undefined) {\n      postRotation = postRotation.map(MathUtils.degToRad);\n      postRotation.push(eulerOrder);\n      postRotation = new Euler().fromArray(postRotation);\n      postRotation = new Quaternion().setFromEuler(postRotation).invert();\n    }\n\n    const quaternion = new Quaternion();\n    const euler = new Euler();\n    const quaternionValues = [];\n\n    for (let i = 0; i < values.length; i += 3) {\n      euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n      quaternion.setFromEuler(euler);\n      if (preRotation !== undefined) quaternion.premultiply(preRotation);\n      if (postRotation !== undefined) quaternion.multiply(postRotation);\n      quaternion.toArray(quaternionValues, i / 3 * 4);\n    }\n\n    return new QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n  }\n\n  generateMorphTrack(rawTracks) {\n    const curves = rawTracks.DeformPercent.curves.morph;\n    const values = curves.values.map(function (val) {\n      return val / 100;\n    });\n    const morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n    return new NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n  } // For all animated objects, times are defined separately for each axis\n  // Here we'll combine the times into one sorted array without duplicates\n\n\n  getTimesForAllAxes(curves) {\n    let times = []; // first join together the times for each axis, if defined\n\n    if (curves.x !== undefined) times = times.concat(curves.x.times);\n    if (curves.y !== undefined) times = times.concat(curves.y.times);\n    if (curves.z !== undefined) times = times.concat(curves.z.times); // then sort them\n\n    times = times.sort(function (a, b) {\n      return a - b;\n    }); // and remove duplicates\n\n    if (times.length > 1) {\n      let targetIndex = 1;\n      let lastValue = times[0];\n\n      for (let i = 1; i < times.length; i++) {\n        const currentValue = times[i];\n\n        if (currentValue !== lastValue) {\n          times[targetIndex] = currentValue;\n          lastValue = currentValue;\n          targetIndex++;\n        }\n      }\n\n      times = times.slice(0, targetIndex);\n    }\n\n    return times;\n  }\n\n  getKeyframeTrackValues(times, curves, initialValue) {\n    const prevValue = initialValue;\n    const values = [];\n    let xIndex = -1;\n    let yIndex = -1;\n    let zIndex = -1;\n    times.forEach(function (time) {\n      if (curves.x) xIndex = curves.x.times.indexOf(time);\n      if (curves.y) yIndex = curves.y.times.indexOf(time);\n      if (curves.z) zIndex = curves.z.times.indexOf(time); // if there is an x value defined for this frame, use that\n\n      if (xIndex !== -1) {\n        const xValue = curves.x.values[xIndex];\n        values.push(xValue);\n        prevValue[0] = xValue;\n      } else {\n        // otherwise use the x value from the previous frame\n        values.push(prevValue[0]);\n      }\n\n      if (yIndex !== -1) {\n        const yValue = curves.y.values[yIndex];\n        values.push(yValue);\n        prevValue[1] = yValue;\n      } else {\n        values.push(prevValue[1]);\n      }\n\n      if (zIndex !== -1) {\n        const zValue = curves.z.values[zIndex];\n        values.push(zValue);\n        prevValue[2] = zValue;\n      } else {\n        values.push(prevValue[2]);\n      }\n    });\n    return values;\n  } // Rotations are defined as Euler angles which can have values  of any size\n  // These will be converted to quaternions which don't support values greater than\n  // PI, so we'll interpolate large rotations\n\n\n  interpolateRotations(curve) {\n    for (let i = 1; i < curve.values.length; i++) {\n      const initialValue = curve.values[i - 1];\n      const valuesSpan = curve.values[i] - initialValue;\n      const absoluteSpan = Math.abs(valuesSpan);\n\n      if (absoluteSpan >= 180) {\n        const numSubIntervals = absoluteSpan / 180;\n        const step = valuesSpan / numSubIntervals;\n        let nextValue = initialValue + step;\n        const initialTime = curve.times[i - 1];\n        const timeSpan = curve.times[i] - initialTime;\n        const interval = timeSpan / numSubIntervals;\n        let nextTime = initialTime + interval;\n        const interpolatedTimes = [];\n        const interpolatedValues = [];\n\n        while (nextTime < curve.times[i]) {\n          interpolatedTimes.push(nextTime);\n          nextTime += interval;\n          interpolatedValues.push(nextValue);\n          nextValue += step;\n        }\n\n        curve.times = inject(curve.times, i, interpolatedTimes);\n        curve.values = inject(curve.values, i, interpolatedValues);\n      }\n    }\n  }\n\n} // parse an FBX file in ASCII format\n\n\nclass TextParser {\n  getPrevNode() {\n    return this.nodeStack[this.currentIndent - 2];\n  }\n\n  getCurrentNode() {\n    return this.nodeStack[this.currentIndent - 1];\n  }\n\n  getCurrentProp() {\n    return this.currentProp;\n  }\n\n  pushStack(node) {\n    this.nodeStack.push(node);\n    this.currentIndent += 1;\n  }\n\n  popStack() {\n    this.nodeStack.pop();\n    this.currentIndent -= 1;\n  }\n\n  setCurrentProp(val, name) {\n    this.currentProp = val;\n    this.currentPropName = name;\n  }\n\n  parse(text) {\n    this.currentIndent = 0;\n    this.allNodes = new FBXTree();\n    this.nodeStack = [];\n    this.currentProp = [];\n    this.currentPropName = '';\n    const scope = this;\n    const split = text.split(/[\\r\\n]+/);\n    split.forEach(function (line, i) {\n      const matchComment = line.match(/^[\\s\\t]*;/);\n      const matchEmpty = line.match(/^[\\s\\t]*$/);\n      if (matchComment || matchEmpty) return;\n      const matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '');\n      const matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n      const matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}');\n\n      if (matchBeginning) {\n        scope.parseNodeBegin(line, matchBeginning);\n      } else if (matchProperty) {\n        scope.parseNodeProperty(line, matchProperty, split[++i]);\n      } else if (matchEnd) {\n        scope.popStack();\n      } else if (line.match(/^[^\\s\\t}]/)) {\n        // large arrays are split over multiple lines terminated with a ',' character\n        // if this is encountered the line needs to be joined to the previous line\n        scope.parseNodePropertyContinued(line);\n      }\n    });\n    return this.allNodes;\n  }\n\n  parseNodeBegin(line, property) {\n    const nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n    const nodeAttrs = property[2].split(',').map(function (attr) {\n      return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n    });\n    const node = {\n      name: nodeName\n    };\n    const attrs = this.parseNodeAttr(nodeAttrs);\n    const currentNode = this.getCurrentNode(); // a top node\n\n    if (this.currentIndent === 0) {\n      this.allNodes.add(nodeName, node);\n    } else {\n      // a subnode\n      // if the subnode already exists, append it\n      if (nodeName in currentNode) {\n        // special case Pose needs PoseNodes as an array\n        if (nodeName === 'PoseNode') {\n          currentNode.PoseNode.push(node);\n        } else if (currentNode[nodeName].id !== undefined) {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n        }\n\n        if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n      } else if (typeof attrs.id === 'number') {\n        currentNode[nodeName] = {};\n        currentNode[nodeName][attrs.id] = node;\n      } else if (nodeName !== 'Properties70') {\n        if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n      }\n    }\n\n    if (typeof attrs.id === 'number') node.id = attrs.id;\n    if (attrs.name !== '') node.attrName = attrs.name;\n    if (attrs.type !== '') node.attrType = attrs.type;\n    this.pushStack(node);\n  }\n\n  parseNodeAttr(attrs) {\n    let id = attrs[0];\n\n    if (attrs[0] !== '') {\n      id = parseInt(attrs[0]);\n\n      if (isNaN(id)) {\n        id = attrs[0];\n      }\n    }\n\n    let name = '',\n        type = '';\n\n    if (attrs.length > 1) {\n      name = attrs[1].replace(/^(\\w+)::/, '');\n      type = attrs[2];\n    }\n\n    return {\n      id: id,\n      name: name,\n      type: type\n    };\n  }\n\n  parseNodeProperty(line, property, contentLine) {\n    let propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n    let propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim(); // for special case: base64 image data follows \"Content: ,\" line\n    //\tContent: ,\n    //\t \"/9j/4RDaRXhpZgAATU0A...\"\n\n    if (propName === 'Content' && propValue === ',') {\n      propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n    }\n\n    const currentNode = this.getCurrentNode();\n    const parentName = currentNode.name;\n\n    if (parentName === 'Properties70') {\n      this.parseNodeSpecialProperty(line, propName, propValue);\n      return;\n    } // Connections\n\n\n    if (propName === 'C') {\n      const connProps = propValue.split(',').slice(1);\n      const from = parseInt(connProps[0]);\n      const to = parseInt(connProps[1]);\n      let rest = propValue.split(',').slice(3);\n      rest = rest.map(function (elem) {\n        return elem.trim().replace(/^\"/, '');\n      });\n      propName = 'connections';\n      propValue = [from, to];\n      append(propValue, rest);\n\n      if (currentNode[propName] === undefined) {\n        currentNode[propName] = [];\n      }\n    } // Node\n\n\n    if (propName === 'Node') currentNode.id = propValue; // connections\n\n    if (propName in currentNode && Array.isArray(currentNode[propName])) {\n      currentNode[propName].push(propValue);\n    } else {\n      if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n    }\n\n    this.setCurrentProp(currentNode, propName); // convert string to array, unless it ends in ',' in which case more will be added to it\n\n    if (propName === 'a' && propValue.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(propValue);\n    }\n  }\n\n  parseNodePropertyContinued(line) {\n    const currentNode = this.getCurrentNode();\n    currentNode.a += line; // if the line doesn't end in ',' we have reached the end of the property value\n    // so convert the string to an array\n\n    if (line.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(currentNode.a);\n    }\n  } // parse \"Property70\"\n\n\n  parseNodeSpecialProperty(line, propName, propValue) {\n    // split this\n    // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n    // into array like below\n    // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n    const props = propValue.split('\",').map(function (prop) {\n      return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n    });\n    const innerPropName = props[0];\n    const innerPropType1 = props[1];\n    const innerPropType2 = props[2];\n    const innerPropFlag = props[3];\n    let innerPropValue = props[4]; // cast values where needed, otherwise leave as strings\n\n    switch (innerPropType1) {\n      case 'int':\n      case 'enum':\n      case 'bool':\n      case 'ULongLong':\n      case 'double':\n      case 'Number':\n      case 'FieldOfView':\n        innerPropValue = parseFloat(innerPropValue);\n        break;\n\n      case 'Color':\n      case 'ColorRGB':\n      case 'Vector3D':\n      case 'Lcl_Translation':\n      case 'Lcl_Rotation':\n      case 'Lcl_Scaling':\n        innerPropValue = parseNumberArray(innerPropValue);\n        break;\n    } // CAUTION: these props must append to parent's parent\n\n\n    this.getPrevNode()[innerPropName] = {\n      type: innerPropType1,\n      type2: innerPropType2,\n      flag: innerPropFlag,\n      value: innerPropValue\n    };\n    this.setCurrentProp(this.getPrevNode(), innerPropName);\n  }\n\n} // Parse an FBX file in Binary format\n\n\nclass BinaryParser {\n  parse(buffer) {\n    const reader = new BinaryReader(buffer);\n    reader.skip(23); // skip magic 23 bytes\n\n    const version = reader.getUint32();\n\n    if (version < 6400) {\n      throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version);\n    }\n\n    const allNodes = new FBXTree();\n\n    while (!this.endOfContent(reader)) {\n      const node = this.parseNode(reader, version);\n      if (node !== null) allNodes.add(node.name, node);\n    }\n\n    return allNodes;\n  } // Check if reader has reached the end of content.\n\n\n  endOfContent(reader) {\n    // footer size: 160bytes + 16-byte alignment padding\n    // - 16bytes: magic\n    // - padding til 16-byte alignment (at least 1byte?)\n    //\t(seems like some exporters embed fixed 15 or 16bytes?)\n    // - 4bytes: magic\n    // - 4bytes: version\n    // - 120bytes: zero\n    // - 16bytes: magic\n    if (reader.size() % 16 === 0) {\n      return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n    } else {\n      return reader.getOffset() + 160 + 16 >= reader.size();\n    }\n  } // recursively parse nodes until the end of the file is reached\n\n\n  parseNode(reader, version) {\n    const node = {}; // The first three data sizes depends on version.\n\n    const endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    const numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    version >= 7500 ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n    const nameLen = reader.getUint8();\n    const name = reader.getString(nameLen); // Regards this node as NULL-record if endOffset is zero\n\n    if (endOffset === 0) return null;\n    const propertyList = [];\n\n    for (let i = 0; i < numProperties; i++) {\n      propertyList.push(this.parseProperty(reader));\n    } // Regards the first three elements in propertyList as id, attrName, and attrType\n\n\n    const id = propertyList.length > 0 ? propertyList[0] : '';\n    const attrName = propertyList.length > 1 ? propertyList[1] : '';\n    const attrType = propertyList.length > 2 ? propertyList[2] : ''; // check if this node represents just a single property\n    // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\n    node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n\n    while (endOffset > reader.getOffset()) {\n      const subNode = this.parseNode(reader, version);\n      if (subNode !== null) this.parseSubNode(name, node, subNode);\n    }\n\n    node.propertyList = propertyList; // raw property list used by parent\n\n    if (typeof id === 'number') node.id = id;\n    if (attrName !== '') node.attrName = attrName;\n    if (attrType !== '') node.attrType = attrType;\n    if (name !== '') node.name = name;\n    return node;\n  }\n\n  parseSubNode(name, node, subNode) {\n    // special case: child node is single property\n    if (subNode.singleProperty === true) {\n      const value = subNode.propertyList[0];\n\n      if (Array.isArray(value)) {\n        node[subNode.name] = subNode;\n        subNode.a = value;\n      } else {\n        node[subNode.name] = value;\n      }\n    } else if (name === 'Connections' && subNode.name === 'C') {\n      const array = [];\n      subNode.propertyList.forEach(function (property, i) {\n        // first Connection is FBX type (OO, OP, etc.). We'll discard these\n        if (i !== 0) array.push(property);\n      });\n\n      if (node.connections === undefined) {\n        node.connections = [];\n      }\n\n      node.connections.push(array);\n    } else if (subNode.name === 'Properties70') {\n      const keys = Object.keys(subNode);\n      keys.forEach(function (key) {\n        node[key] = subNode[key];\n      });\n    } else if (name === 'Properties70' && subNode.name === 'P') {\n      let innerPropName = subNode.propertyList[0];\n      let innerPropType1 = subNode.propertyList[1];\n      const innerPropType2 = subNode.propertyList[2];\n      const innerPropFlag = subNode.propertyList[3];\n      let innerPropValue;\n      if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n      if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n\n      if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n        innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n      } else {\n        innerPropValue = subNode.propertyList[4];\n      } // this will be copied to parent, see above\n\n\n      node[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue\n      };\n    } else if (node[subNode.name] === undefined) {\n      if (typeof subNode.id === 'number') {\n        node[subNode.name] = {};\n        node[subNode.name][subNode.id] = subNode;\n      } else {\n        node[subNode.name] = subNode;\n      }\n    } else {\n      if (subNode.name === 'PoseNode') {\n        if (!Array.isArray(node[subNode.name])) {\n          node[subNode.name] = [node[subNode.name]];\n        }\n\n        node[subNode.name].push(subNode);\n      } else if (node[subNode.name][subNode.id] === undefined) {\n        node[subNode.name][subNode.id] = subNode;\n      }\n    }\n  }\n\n  parseProperty(reader) {\n    const type = reader.getString(1);\n    let length;\n\n    switch (type) {\n      case 'C':\n        return reader.getBoolean();\n\n      case 'D':\n        return reader.getFloat64();\n\n      case 'F':\n        return reader.getFloat32();\n\n      case 'I':\n        return reader.getInt32();\n\n      case 'L':\n        return reader.getInt64();\n\n      case 'R':\n        length = reader.getUint32();\n        return reader.getArrayBuffer(length);\n\n      case 'S':\n        length = reader.getUint32();\n        return reader.getString(length);\n\n      case 'Y':\n        return reader.getInt16();\n\n      case 'b':\n      case 'c':\n      case 'd':\n      case 'f':\n      case 'i':\n      case 'l':\n        const arrayLength = reader.getUint32();\n        const encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\n        const compressedLength = reader.getUint32();\n\n        if (encoding === 0) {\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader.getBooleanArray(arrayLength);\n\n            case 'd':\n              return reader.getFloat64Array(arrayLength);\n\n            case 'f':\n              return reader.getFloat32Array(arrayLength);\n\n            case 'i':\n              return reader.getInt32Array(arrayLength);\n\n            case 'l':\n              return reader.getInt64Array(arrayLength);\n          }\n        }\n\n        const data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n\n        const reader2 = new BinaryReader(data.buffer);\n\n        switch (type) {\n          case 'b':\n          case 'c':\n            return reader2.getBooleanArray(arrayLength);\n\n          case 'd':\n            return reader2.getFloat64Array(arrayLength);\n\n          case 'f':\n            return reader2.getFloat32Array(arrayLength);\n\n          case 'i':\n            return reader2.getInt32Array(arrayLength);\n\n          case 'l':\n            return reader2.getInt64Array(arrayLength);\n        }\n\n      default:\n        throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n    }\n  }\n\n}\n\nclass BinaryReader {\n  constructor(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n  }\n\n  getOffset() {\n    return this.offset;\n  }\n\n  size() {\n    return this.dv.buffer.byteLength;\n  }\n\n  skip(length) {\n    this.offset += length;\n  } // seems like true/false representation depends on exporter.\n  // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n  // then sees LSB.\n\n\n  getBoolean() {\n    return (this.getUint8() & 1) === 1;\n  }\n\n  getBooleanArray(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getBoolean());\n    }\n\n    return a;\n  }\n\n  getUint8() {\n    const value = this.dv.getUint8(this.offset);\n    this.offset += 1;\n    return value;\n  }\n\n  getInt16() {\n    const value = this.dv.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n\n  getInt32() {\n    const value = this.dv.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  getInt32Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt32());\n    }\n\n    return a;\n  }\n\n  getUint32() {\n    const value = this.dv.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  } // JavaScript doesn't support 64-bit integer so calculate this here\n  // 1 << 32 will return 1 so using multiply operation instead here.\n  // There's a possibility that this method returns wrong value if the value\n  // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n  // TODO: safely handle 64-bit integer\n\n\n  getInt64() {\n    let low, high;\n\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    } // calculate negative value\n\n\n    if (high & 0x80000000) {\n      high = ~high & 0xffffffff;\n      low = ~low & 0xffffffff;\n      if (low === 0xffffffff) high = high + 1 & 0xffffffff;\n      low = low + 1 & 0xffffffff;\n      return -(high * 0x100000000 + low);\n    }\n\n    return high * 0x100000000 + low;\n  }\n\n  getInt64Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt64());\n    }\n\n    return a;\n  } // Note: see getInt64() comment\n\n\n  getUint64() {\n    let low, high;\n\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n\n    return high * 0x100000000 + low;\n  }\n\n  getFloat32() {\n    const value = this.dv.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  getFloat32Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat32());\n    }\n\n    return a;\n  }\n\n  getFloat64() {\n    const value = this.dv.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n\n  getFloat64Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat64());\n    }\n\n    return a;\n  }\n\n  getArrayBuffer(size) {\n    const value = this.dv.buffer.slice(this.offset, this.offset + size);\n    this.offset += size;\n    return value;\n  }\n\n  getString(size) {\n    // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n    let a = [];\n\n    for (let i = 0; i < size; i++) {\n      a[i] = this.getUint8();\n    }\n\n    const nullByte = a.indexOf(0);\n    if (nullByte >= 0) a = a.slice(0, nullByte);\n    return LoaderUtils.decodeText(new Uint8Array(a));\n  }\n\n} // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n// and BinaryParser( FBX Binary format)\n\n\nclass FBXTree {\n  add(key, val) {\n    this[key] = val;\n  }\n\n} // ************** UTILITY FUNCTIONS **************\n\n\nfunction isFbxFormatBinary(buffer) {\n  const CORRECT = 'Kaydara\\u0020FBX\\u0020Binary\\u0020\\u0020\\0';\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\n\nfunction isFbxFormatASCII(text) {\n  const CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n  let cursor = 0;\n\n  function read(offset) {\n    const result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n\n  for (let i = 0; i < CORRECT.length; ++i) {\n    const num = read(1);\n\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getFbxVersion(text) {\n  const versionRegExp = /FBXVersion: (\\d+)/;\n  const match = text.match(versionRegExp);\n\n  if (match) {\n    const version = parseInt(match[1]);\n    return version;\n  }\n\n  throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n} // Converts FBX ticks into real time seconds.\n\n\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158000;\n}\n\nconst dataArray = []; // extracts the data from the correct position in the FBX array based on indexing type\n\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  let index;\n\n  switch (infoObject.mappingType) {\n    case 'ByPolygonVertex':\n      index = polygonVertexIndex;\n      break;\n\n    case 'ByPolygon':\n      index = polygonIndex;\n      break;\n\n    case 'ByVertice':\n      index = vertexIndex;\n      break;\n\n    case 'AllSame':\n      index = infoObject.indices[0];\n      break;\n\n    default:\n      console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n  }\n\n  if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n  const from = index * infoObject.dataSize;\n  const to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\n\nconst tempEuler = new Euler();\nconst tempVec = new Vector3(); // generate transformation from FBX transform data\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\n\nfunction generateTransform(transformData) {\n  const lTranslationM = new Matrix4();\n  const lPreRotationM = new Matrix4();\n  const lRotationM = new Matrix4();\n  const lPostRotationM = new Matrix4();\n  const lScalingM = new Matrix4();\n  const lScalingPivotM = new Matrix4();\n  const lScalingOffsetM = new Matrix4();\n  const lRotationOffsetM = new Matrix4();\n  const lRotationPivotM = new Matrix4();\n  const lParentGX = new Matrix4();\n  const lParentLX = new Matrix4();\n  const lGlobalT = new Matrix4();\n  const inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n\n  if (transformData.preRotation) {\n    const array = transformData.preRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n\n  if (transformData.rotation) {\n    const array = transformData.rotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n\n  if (transformData.postRotation) {\n    const array = transformData.postRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    lPostRotationM.invert();\n  }\n\n  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale)); // Pivots and offsets\n\n  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot)); // parent transform\n\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n\n  const lLRM = new Matrix4().copy(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM); // Global Rotation\n\n  const lParentGRM = new Matrix4();\n  lParentGRM.extractRotation(lParentGX); // Global Shear*Scaling\n\n  const lParentTM = new Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  const lParentGSM = new Matrix4();\n  const lParentGRSM = new Matrix4().copy(lParentTM).invert().multiply(lParentGX);\n  lParentGSM.copy(lParentGRM).invert().multiply(lParentGRSM);\n  const lLSM = lScalingM;\n  const lGlobalRS = new Matrix4();\n\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    const lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n    const lParentLSM_inv = new Matrix4().copy(lParentLSM).invert();\n    const lParentGSM_noLocal = new Matrix4().copy(lParentGSM).multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n\n  const lRotationPivotM_inv = new Matrix4();\n  lRotationPivotM_inv.copy(lRotationPivotM).invert();\n  const lScalingPivotM_inv = new Matrix4();\n  lScalingPivotM_inv.copy(lScalingPivotM).invert(); // Calculate the local transform matrix\n\n  let lTransform = new Matrix4();\n  lTransform.copy(lTranslationM).multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  const lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n  const lGlobalTranslation = new Matrix4().copy(lParentGX).multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = new Matrix4().copy(lGlobalT).multiply(lGlobalRS); // from global to local\n\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n} // Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\n\nfunction getEulerOrder(order) {\n  order = order || 0;\n  const enums = ['ZYX', // -> XYZ extrinsic\n  'YZX', // -> XZY extrinsic\n  'XZY', // -> YZX extrinsic\n  'ZXY', // -> YXZ extrinsic\n  'YXZ', // -> ZXY extrinsic\n  'XYZ' // -> ZYX extrinsic\n  //'SphericXYZ', // not possible to support\n  ];\n\n  if (order === 6) {\n    console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n    return enums[0];\n  }\n\n  return enums[order];\n} // Parses comma separated list of numbers and returns them an array.\n// Used internally by the TextParser\n\n\nfunction parseNumberArray(value) {\n  const array = value.split(',').map(function (val) {\n    return parseFloat(val);\n  });\n  return array;\n}\n\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === undefined) from = 0;\n  if (to === undefined) to = buffer.byteLength;\n  return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n}\n\nfunction append(a, b) {\n  for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\n\nfunction slice(a, b, from, to) {\n  for (let i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n\n  return a;\n} // inject array a2 into array a1 at index\n\n\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n}\n\nexport { FBXLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}