{"ast":null,"code":"import { TRAVERSAL_COST, TRIANGLE_INTERSECT_COST } from '../Constants.js';\n\n// https://stackoverflow.com/questions/1248302/how-to-get-the-size-of-a-javascript-object\nfunction getPrimitiveSize(el) {\n  switch (typeof el) {\n    case 'number':\n      return 8;\n    case 'string':\n      return el.length * 2;\n    case 'boolean':\n      return 4;\n    default:\n      return 0;\n  }\n}\nfunction isTypedArray(arr) {\n  var regex = /(Uint|Int|Float)(8|16|32)Array/;\n  return regex.test(arr.constructor.name);\n}\nfunction getRootExtremes(bvh, group) {\n  var result = {\n    get total() {\n      console.warn('getRootExtremes: \"total\" has been replaced by \"nodeCount\" and will be removed in the next release.');\n      return this.nodeCount;\n    },\n    nodeCount: 0,\n    leafNodeCount: 0,\n    depth: {\n      min: Infinity,\n      max: -Infinity\n    },\n    tris: {\n      min: Infinity,\n      max: -Infinity\n    },\n    splits: [0, 0, 0],\n    surfaceAreaScore: 0\n  };\n  bvh.traverse(function (depth, isLeaf, boundingData, offsetOrSplit, count) {\n    var l0 = boundingData[0 + 3] - boundingData[0];\n    var l1 = boundingData[1 + 3] - boundingData[1];\n    var l2 = boundingData[2 + 3] - boundingData[2];\n    var surfaceArea = 2 * (l0 * l1 + l1 * l2 + l2 * l0);\n    result.nodeCount++;\n    if (isLeaf) {\n      result.leafNodeCount++;\n      result.depth.min = Math.min(depth, result.depth.min);\n      result.depth.max = Math.max(depth, result.depth.max);\n      result.tris.min = Math.min(count, result.tris.min);\n      result.tris.max = Math.max(count, result.tris.max);\n      result.surfaceAreaScore += surfaceArea * TRIANGLE_INTERSECT_COST * count;\n    } else {\n      result.splits[offsetOrSplit]++;\n      result.surfaceAreaScore += surfaceArea * TRAVERSAL_COST;\n    }\n  }, group);\n\n  // If there are no leaf nodes because the tree hasn't finished generating yet.\n  if (result.tris.min === Infinity) {\n    result.tris.min = 0;\n    result.tris.max = 0;\n  }\n  if (result.depth.min === Infinity) {\n    result.depth.min = 0;\n    result.depth.max = 0;\n  }\n  return result;\n}\nfunction getBVHExtremes(bvh) {\n  return bvh._roots.map(function (root, i) {\n    return getRootExtremes(bvh, i);\n  });\n}\nfunction estimateMemoryInBytes(obj) {\n  var traversed = new Set();\n  var stack = [obj];\n  var bytes = 0;\n  while (stack.length) {\n    var curr = stack.pop();\n    if (traversed.has(curr)) {\n      continue;\n    }\n    traversed.add(curr);\n    for (var key in curr) {\n      if (!curr.hasOwnProperty(key)) {\n        continue;\n      }\n      bytes += getPrimitiveSize(key);\n      var value = curr[key];\n      if (value && (typeof value === 'object' || typeof value === 'function')) {\n        if (isTypedArray(value)) {\n          bytes += value.byteLength;\n        } else if (value instanceof ArrayBuffer) {\n          bytes += value.byteLength;\n        } else {\n          stack.push(value);\n        }\n      } else {\n        bytes += getPrimitiveSize(value);\n      }\n    }\n  }\n  return bytes;\n}\nexport { estimateMemoryInBytes, getBVHExtremes };","map":null,"metadata":{},"sourceType":"module"}