{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\nfunction LightNode(scope) {\n  TempNode.call(this, 'v3', {\n    shared: false\n  });\n  this.scope = scope || LightNode.TOTAL;\n}\nLightNode.TOTAL = 'total';\nLightNode.prototype = Object.create(TempNode.prototype);\nLightNode.prototype.constructor = LightNode;\nLightNode.prototype.nodeType = 'Light';\nLightNode.prototype.generate = function (builder, output) {\n  if (builder.isCache('light')) {\n    return builder.format('reflectedLight.directDiffuse', this.type, output);\n  } else {\n    console.warn('THREE.LightNode is only compatible in \"light\" channel.');\n    return builder.format('vec3( 0.0 )', this.type, output);\n  }\n};\nLightNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.scope = source.scope;\n  return this;\n};\nLightNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.scope = this.scope;\n  }\n  return data;\n};\nexport { LightNode };","map":null,"metadata":{},"sourceType":"module"}