{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tokenMatcher = exports.createTokenInstance = exports.EOF = exports.createToken = exports.hasTokenLabel = exports.tokenName = exports.tokenLabel = void 0;\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar lexer_public_1 = require(\"./lexer_public\");\n\nvar tokens_1 = require(\"./tokens\");\n\nfunction tokenLabel(tokType) {\n  if (hasTokenLabel(tokType)) {\n    return tokType.LABEL;\n  } else {\n    return tokType.name;\n  }\n}\n\nexports.tokenLabel = tokenLabel;\n\nfunction tokenName(tokType) {\n  return tokType.name;\n}\n\nexports.tokenName = tokenName;\n\nfunction hasTokenLabel(obj) {\n  return utils_1.isString(obj.LABEL) && obj.LABEL !== \"\";\n}\n\nexports.hasTokenLabel = hasTokenLabel;\nvar PARENT = \"parent\";\nvar CATEGORIES = \"categories\";\nvar LABEL = \"label\";\nvar GROUP = \"group\";\nvar PUSH_MODE = \"push_mode\";\nvar POP_MODE = \"pop_mode\";\nvar LONGER_ALT = \"longer_alt\";\nvar LINE_BREAKS = \"line_breaks\";\nvar START_CHARS_HINT = \"start_chars_hint\";\n\nfunction createToken(config) {\n  return createTokenInternal(config);\n}\n\nexports.createToken = createToken;\n\nfunction createTokenInternal(config) {\n  var pattern = config.pattern;\n  var tokenType = {};\n  tokenType.name = config.name;\n\n  if (!utils_1.isUndefined(pattern)) {\n    tokenType.PATTERN = pattern;\n  }\n\n  if (utils_1.has(config, PARENT)) {\n    throw \"The parent property is no longer supported.\\n\" + \"See: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.\";\n  }\n\n  if (utils_1.has(config, CATEGORIES)) {\n    // casting to ANY as this will be fixed inside `augmentTokenTypes``\n    tokenType.CATEGORIES = config[CATEGORIES];\n  }\n\n  tokens_1.augmentTokenTypes([tokenType]);\n\n  if (utils_1.has(config, LABEL)) {\n    tokenType.LABEL = config[LABEL];\n  }\n\n  if (utils_1.has(config, GROUP)) {\n    tokenType.GROUP = config[GROUP];\n  }\n\n  if (utils_1.has(config, POP_MODE)) {\n    tokenType.POP_MODE = config[POP_MODE];\n  }\n\n  if (utils_1.has(config, PUSH_MODE)) {\n    tokenType.PUSH_MODE = config[PUSH_MODE];\n  }\n\n  if (utils_1.has(config, LONGER_ALT)) {\n    tokenType.LONGER_ALT = config[LONGER_ALT];\n  }\n\n  if (utils_1.has(config, LINE_BREAKS)) {\n    tokenType.LINE_BREAKS = config[LINE_BREAKS];\n  }\n\n  if (utils_1.has(config, START_CHARS_HINT)) {\n    tokenType.START_CHARS_HINT = config[START_CHARS_HINT];\n  }\n\n  return tokenType;\n}\n\nexports.EOF = createToken({\n  name: \"EOF\",\n  pattern: lexer_public_1.Lexer.NA\n});\ntokens_1.augmentTokenTypes([exports.EOF]);\n\nfunction createTokenInstance(tokType, image, startOffset, endOffset, startLine, endLine, startColumn, endColumn) {\n  return {\n    image: image,\n    startOffset: startOffset,\n    endOffset: endOffset,\n    startLine: startLine,\n    endLine: endLine,\n    startColumn: startColumn,\n    endColumn: endColumn,\n    tokenTypeIdx: tokType.tokenTypeIdx,\n    tokenType: tokType\n  };\n}\n\nexports.createTokenInstance = createTokenInstance;\n\nfunction tokenMatcher(token, tokType) {\n  return tokens_1.tokenStructuredMatcher(token, tokType);\n}\n\nexports.tokenMatcher = tokenMatcher;","map":{"version":3,"mappings":"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","names":["tokenLabel","tokType","hasTokenLabel","LABEL","name","exports","tokenName","obj","utils_1","PARENT","CATEGORIES","GROUP","PUSH_MODE","POP_MODE","LONGER_ALT","LINE_BREAKS","START_CHARS_HINT","createToken","config","createTokenInternal","pattern","tokenType","PATTERN","tokens_1","lexer_public_1","NA","createTokenInstance","image","startOffset","endOffset","startLine","endLine","startColumn","endColumn","tokenTypeIdx","tokenMatcher","token"],"sourceRoot":"","sources":["../../../src/scan/tokens_public.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}