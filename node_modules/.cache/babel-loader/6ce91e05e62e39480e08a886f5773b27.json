{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ErrorHandler = void 0;\n\nvar exceptions_public_1 = require(\"../../exceptions_public\");\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar lookahead_1 = require(\"../../grammar/lookahead\");\n\nvar parser_1 = require(\"../parser\");\n/**\n * Trait responsible for runtime parsing errors.\n */\n\n\nvar ErrorHandler =\n/** @class */\nfunction () {\n  function ErrorHandler() {}\n\n  ErrorHandler.prototype.initErrorHandler = function (config) {\n    this._errors = [];\n    this.errorMessageProvider = utils_1.has(config, \"errorMessageProvider\") ? config.errorMessageProvider : parser_1.DEFAULT_PARSER_CONFIG.errorMessageProvider;\n  };\n\n  ErrorHandler.prototype.SAVE_ERROR = function (error) {\n    if (exceptions_public_1.isRecognitionException(error)) {\n      error.context = {\n        ruleStack: this.getHumanReadableRuleStack(),\n        ruleOccurrenceStack: utils_1.cloneArr(this.RULE_OCCURRENCE_STACK)\n      };\n\n      this._errors.push(error);\n\n      return error;\n    } else {\n      throw Error(\"Trying to save an Error which is not a RecognitionException\");\n    }\n  };\n\n  Object.defineProperty(ErrorHandler.prototype, \"errors\", {\n    get: function () {\n      return utils_1.cloneArr(this._errors);\n    },\n    set: function (newErrors) {\n      this._errors = newErrors;\n    },\n    enumerable: false,\n    configurable: true\n  }); // TODO: consider caching the error message computed information\n\n  ErrorHandler.prototype.raiseEarlyExitException = function (occurrence, prodType, userDefinedErrMsg) {\n    var ruleName = this.getCurrRuleFullName();\n    var ruleGrammar = this.getGAstProductions()[ruleName];\n    var lookAheadPathsPerAlternative = lookahead_1.getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, this.maxLookahead);\n    var insideProdPaths = lookAheadPathsPerAlternative[0];\n    var actualTokens = [];\n\n    for (var i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n\n    var msg = this.errorMessageProvider.buildEarlyExitMessage({\n      expectedIterationPaths: insideProdPaths,\n      actual: actualTokens,\n      previous: this.LA(0),\n      customUserDescription: userDefinedErrMsg,\n      ruleName: ruleName\n    });\n    throw this.SAVE_ERROR(new exceptions_public_1.EarlyExitException(msg, this.LA(1), this.LA(0)));\n  }; // TODO: consider caching the error message computed information\n\n\n  ErrorHandler.prototype.raiseNoAltException = function (occurrence, errMsgTypes) {\n    var ruleName = this.getCurrRuleFullName();\n    var ruleGrammar = this.getGAstProductions()[ruleName]; // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n\n    var lookAheadPathsPerAlternative = lookahead_1.getLookaheadPathsForOr(occurrence, ruleGrammar, this.maxLookahead);\n    var actualTokens = [];\n\n    for (var i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n\n    var previousToken = this.LA(0);\n    var errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n      expectedPathsPerAlt: lookAheadPathsPerAlternative,\n      actual: actualTokens,\n      previous: previousToken,\n      customUserDescription: errMsgTypes,\n      ruleName: this.getCurrRuleFullName()\n    });\n    throw this.SAVE_ERROR(new exceptions_public_1.NoViableAltException(errMsg, this.LA(1), previousToken));\n  };\n\n  return ErrorHandler;\n}();\n\nexports.ErrorHandler = ErrorHandler;","map":{"version":3,"mappings":";;;;;;;AAKA;;AAKA;;AACA;;AAMA;AAEA;;;;;AAGA;AAAA;AAAA;EAAA,yBAmGC;;EA/FCA,oDAAiBC,MAAjB,EAAsC;IACpC,KAAKC,OAAL,GAAe,EAAf;IACA,KAAKC,oBAAL,GAA4BC,YAAIH,MAAJ,EAAY,sBAAZ,IACxBA,MAAM,CAACE,oBADiB,GAExBE,+BAAsBF,oBAF1B;EAGD,CALD;;EAOAH,8CAEEM,KAFF,EAE8B;IAE5B,IAAIC,2CAAuBD,KAAvB,CAAJ,EAAmC;MACjCA,KAAK,CAACE,OAAN,GAAgB;QACdC,SAAS,EAAE,KAAKC,yBAAL,EADG;QAEdC,mBAAmB,EAAEP,iBAAS,KAAKQ,qBAAd;MAFP,CAAhB;;MAIA,KAAKV,OAAL,CAAaW,IAAb,CAAkBP,KAAlB;;MACA,OAAOA,KAAP;IACD,CAPD,MAOO;MACL,MAAMQ,KAAK,CAAC,6DAAD,CAAX;IACD;EACF,CAdD;;EAgBAC,sBAAIf,sBAAJ,EAAI,QAAJ,EAAU;SAAV;MACE,OAAOI,iBAAS,KAAKF,OAAd,CAAP;IACD,CAFS;SAIV,UAAWc,SAAX,EAA6C;MAC3C,KAAKd,OAAL,GAAec,SAAf;IACD,CANS;qBAAA;;EAAA,CAAV,EA3BF,CAmCE;;EACAhB,2DAEEiB,UAFF,EAGEC,QAHF,EAIEC,iBAJF,EAI2B;IAEzB,IAAMC,QAAQ,GAAG,KAAKC,mBAAL,EAAjB;IACA,IAAMC,WAAW,GAAG,KAAKC,kBAAL,GAA0BH,QAA1B,CAApB;IACA,IAAMI,4BAA4B,GAAGC,6CACnCR,UADmC,EAEnCK,WAFmC,EAGnCJ,QAHmC,EAInC,KAAKQ,YAJ8B,CAArC;IAMA,IAAMC,eAAe,GAAGH,4BAA4B,CAAC,CAAD,CAApD;IACA,IAAMI,YAAY,GAAG,EAArB;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,KAAKH,YAA1B,EAAwCG,CAAC,EAAzC,EAA6C;MAC3CD,YAAY,CAACf,IAAb,CAAkB,KAAKiB,EAAL,CAAQD,CAAR,CAAlB;IACD;;IACD,IAAME,GAAG,GAAG,KAAK5B,oBAAL,CAA0B6B,qBAA1B,CAAgD;MAC1DC,sBAAsB,EAAEN,eADkC;MAE1DO,MAAM,EAAEN,YAFkD;MAG1DO,QAAQ,EAAE,KAAKL,EAAL,CAAQ,CAAR,CAHgD;MAI1DM,qBAAqB,EAAEjB,iBAJmC;MAK1DC,QAAQ,EAAEA;IALgD,CAAhD,CAAZ;IAQA,MAAM,KAAKiB,UAAL,CAAgB,IAAI9B,sCAAJ,CAAuBwB,GAAvB,EAA4B,KAAKD,EAAL,CAAQ,CAAR,CAA5B,EAAwC,KAAKA,EAAL,CAAQ,CAAR,CAAxC,CAAhB,CAAN;EACD,CA5BD,CApCF,CAkEE;;;EACA9B,uDAEEiB,UAFF,EAGEqB,WAHF,EAGqB;IAEnB,IAAMlB,QAAQ,GAAG,KAAKC,mBAAL,EAAjB;IACA,IAAMC,WAAW,GAAG,KAAKC,kBAAL,GAA0BH,QAA1B,CAApB,CAHmB,CAInB;;IACA,IAAMI,4BAA4B,GAAGC,mCACnCR,UADmC,EAEnCK,WAFmC,EAGnC,KAAKI,YAH8B,CAArC;IAMA,IAAME,YAAY,GAAG,EAArB;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,KAAKH,YAA1B,EAAwCG,CAAC,EAAzC,EAA6C;MAC3CD,YAAY,CAACf,IAAb,CAAkB,KAAKiB,EAAL,CAAQD,CAAR,CAAlB;IACD;;IACD,IAAMU,aAAa,GAAG,KAAKT,EAAL,CAAQ,CAAR,CAAtB;IAEA,IAAMU,MAAM,GAAG,KAAKrC,oBAAL,CAA0BsC,uBAA1B,CAAkD;MAC/DC,mBAAmB,EAAElB,4BAD0C;MAE/DU,MAAM,EAAEN,YAFuD;MAG/DO,QAAQ,EAAEI,aAHqD;MAI/DH,qBAAqB,EAAEE,WAJwC;MAK/DlB,QAAQ,EAAE,KAAKC,mBAAL;IALqD,CAAlD,CAAf;IAQA,MAAM,KAAKgB,UAAL,CACJ,IAAI9B,wCAAJ,CAAyBiC,MAAzB,EAAiC,KAAKV,EAAL,CAAQ,CAAR,CAAjC,EAA6CS,aAA7C,CADI,CAAN;EAGD,CA/BD;;EAgCF;AAAC,CAnGD;;AAAaI","names":["ErrorHandler","config","_errors","errorMessageProvider","utils_1","parser_1","error","exceptions_public_1","context","ruleStack","getHumanReadableRuleStack","ruleOccurrenceStack","RULE_OCCURRENCE_STACK","push","Error","Object","newErrors","occurrence","prodType","userDefinedErrMsg","ruleName","getCurrRuleFullName","ruleGrammar","getGAstProductions","lookAheadPathsPerAlternative","lookahead_1","maxLookahead","insideProdPaths","actualTokens","i","LA","msg","buildEarlyExitMessage","expectedIterationPaths","actual","previous","customUserDescription","SAVE_ERROR","errMsgTypes","previousToken","errMsg","buildNoViableAltMessage","expectedPathsPerAlt","exports"],"sourceRoot":"","sources":["../../../../../src/parse/parser/traits/error_handler.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}