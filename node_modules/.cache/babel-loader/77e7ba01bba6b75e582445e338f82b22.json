{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.canMatchCharCode = exports.firstCharOptimizedIndices = exports.getOptimizedStartCodesIndices = exports.failedOptimizationPrefixMsg = void 0;\n\nvar regexp_to_ast_1 = require(\"regexp-to-ast\");\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar reg_exp_parser_1 = require(\"./reg_exp_parser\");\n\nvar lexer_1 = require(\"./lexer\");\n\nvar complementErrorMessage = \"Complement Sets are not supported for first char optimization\";\nexports.failedOptimizationPrefixMsg = 'Unable to use \"first char\" lexer optimizations:\\n';\n\nfunction getOptimizedStartCodesIndices(regExp, ensureOptimizations) {\n  if (ensureOptimizations === void 0) {\n    ensureOptimizations = false;\n  }\n\n  try {\n    var ast = reg_exp_parser_1.getRegExpAst(regExp);\n    var firstChars = firstCharOptimizedIndices(ast.value, {}, ast.flags.ignoreCase);\n    return firstChars;\n  } catch (e) {\n    /* istanbul ignore next */\n    // Testing this relies on the regexp-to-ast library having a bug... */\n    // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n    if (e.message === complementErrorMessage) {\n      if (ensureOptimizations) {\n        utils_1.PRINT_WARNING(\"\" + exports.failedOptimizationPrefixMsg + (\"\\tUnable to optimize: < \" + regExp.toString() + \" >\\n\") + \"\\tComplement Sets cannot be automatically optimized.\\n\" + \"\\tThis will disable the lexer's first char optimizations.\\n\" + \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\");\n      }\n    } else {\n      var msgSuffix = \"\";\n\n      if (ensureOptimizations) {\n        msgSuffix = \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" + \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n      }\n\n      utils_1.PRINT_ERROR(exports.failedOptimizationPrefixMsg + \"\\n\" + (\"\\tFailed parsing: < \" + regExp.toString() + \" >\\n\") + (\"\\tUsing the regexp-to-ast library version: \" + regexp_to_ast_1.VERSION + \"\\n\") + \"\\tPlease open an issue at: https://github.com/bd82/regexp-to-ast/issues\" + msgSuffix);\n    }\n  }\n\n  return [];\n}\n\nexports.getOptimizedStartCodesIndices = getOptimizedStartCodesIndices;\n\nfunction firstCharOptimizedIndices(ast, result, ignoreCase) {\n  switch (ast.type) {\n    case \"Disjunction\":\n      for (var i = 0; i < ast.value.length; i++) {\n        firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n      }\n\n      break;\n\n    case \"Alternative\":\n      var terms = ast.value;\n\n      for (var i = 0; i < terms.length; i++) {\n        var term = terms[i]; // skip terms that cannot effect the first char results\n\n        switch (term.type) {\n          case \"EndAnchor\": // A group back reference cannot affect potential starting char.\n          // because if a back reference is the first production than automatically\n          // the group being referenced has had to come BEFORE so its codes have already been added\n\n          case \"GroupBackReference\": // assertions do not affect potential starting codes\n\n          case \"Lookahead\":\n          case \"NegativeLookahead\":\n          case \"StartAnchor\":\n          case \"WordBoundary\":\n          case \"NonWordBoundary\":\n            continue;\n        }\n\n        var atom = term;\n\n        switch (atom.type) {\n          case \"Character\":\n            addOptimizedIdxToResult(atom.value, result, ignoreCase);\n            break;\n\n          case \"Set\":\n            if (atom.complement === true) {\n              throw Error(complementErrorMessage);\n            }\n\n            utils_1.forEach(atom.value, function (code) {\n              if (typeof code === \"number\") {\n                addOptimizedIdxToResult(code, result, ignoreCase);\n              } else {\n                // range\n                var range = code; // cannot optimize when ignoreCase is\n\n                if (ignoreCase === true) {\n                  for (var rangeCode = range.from; rangeCode <= range.to; rangeCode++) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n                } // Optimization (2 orders of magnitude less work for very large ranges)\n                else {\n                  // handle unoptimized values\n                  for (var rangeCode = range.from; rangeCode <= range.to && rangeCode < lexer_1.minOptimizationVal; rangeCode++) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  } // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n\n\n                  if (range.to >= lexer_1.minOptimizationVal) {\n                    var minUnOptVal = range.from >= lexer_1.minOptimizationVal ? range.from : lexer_1.minOptimizationVal;\n                    var maxUnOptVal = range.to;\n                    var minOptIdx = lexer_1.charCodeToOptimizedIndex(minUnOptVal);\n                    var maxOptIdx = lexer_1.charCodeToOptimizedIndex(maxUnOptVal);\n\n                    for (var currOptIdx = minOptIdx; currOptIdx <= maxOptIdx; currOptIdx++) {\n                      result[currOptIdx] = currOptIdx;\n                    }\n                  }\n                }\n              }\n            });\n            break;\n\n          case \"Group\":\n            firstCharOptimizedIndices(atom.value, result, ignoreCase);\n            break;\n\n          /* istanbul ignore next */\n\n          default:\n            throw Error(\"Non Exhaustive Match\");\n        } // reached a mandatory production, no more **start** codes can be found on this alternative\n\n\n        var isOptionalQuantifier = atom.quantifier !== undefined && atom.quantifier.atLeast === 0;\n\n        if ( // A group may be optional due to empty contents /(?:)/\n        // or if everything inside it is optional /((a)?)/\n        atom.type === \"Group\" && isWholeOptional(atom) === false || // If this term is not a group it may only be optional if it has an optional quantifier\n        atom.type !== \"Group\" && isOptionalQuantifier === false) {\n          break;\n        }\n      }\n\n      break;\n\n    /* istanbul ignore next */\n\n    default:\n      throw Error(\"non exhaustive match!\");\n  } // console.log(Object.keys(result).length)\n\n\n  return utils_1.values(result);\n}\n\nexports.firstCharOptimizedIndices = firstCharOptimizedIndices;\n\nfunction addOptimizedIdxToResult(code, result, ignoreCase) {\n  var optimizedCharIdx = lexer_1.charCodeToOptimizedIndex(code);\n  result[optimizedCharIdx] = optimizedCharIdx;\n\n  if (ignoreCase === true) {\n    handleIgnoreCase(code, result);\n  }\n}\n\nfunction handleIgnoreCase(code, result) {\n  var char = String.fromCharCode(code);\n  var upperChar = char.toUpperCase();\n  /* istanbul ignore else */\n\n  if (upperChar !== char) {\n    var optimizedCharIdx = lexer_1.charCodeToOptimizedIndex(upperChar.charCodeAt(0));\n    result[optimizedCharIdx] = optimizedCharIdx;\n  } else {\n    var lowerChar = char.toLowerCase();\n\n    if (lowerChar !== char) {\n      var optimizedCharIdx = lexer_1.charCodeToOptimizedIndex(lowerChar.charCodeAt(0));\n      result[optimizedCharIdx] = optimizedCharIdx;\n    }\n  }\n}\n\nfunction findCode(setNode, targetCharCodes) {\n  return utils_1.find(setNode.value, function (codeOrRange) {\n    if (typeof codeOrRange === \"number\") {\n      return utils_1.contains(targetCharCodes, codeOrRange);\n    } else {\n      // range\n      var range_1 = codeOrRange;\n      return utils_1.find(targetCharCodes, function (targetCode) {\n        return range_1.from <= targetCode && targetCode <= range_1.to;\n      }) !== undefined;\n    }\n  });\n}\n\nfunction isWholeOptional(ast) {\n  if (ast.quantifier && ast.quantifier.atLeast === 0) {\n    return true;\n  }\n\n  if (!ast.value) {\n    return false;\n  }\n\n  return utils_1.isArray(ast.value) ? utils_1.every(ast.value, isWholeOptional) : isWholeOptional(ast.value);\n}\n\nvar CharCodeFinder =\n/** @class */\nfunction (_super) {\n  __extends(CharCodeFinder, _super);\n\n  function CharCodeFinder(targetCharCodes) {\n    var _this = _super.call(this) || this;\n\n    _this.targetCharCodes = targetCharCodes;\n    _this.found = false;\n    return _this;\n  }\n\n  CharCodeFinder.prototype.visitChildren = function (node) {\n    // No need to keep looking...\n    if (this.found === true) {\n      return;\n    } // switch lookaheads as they do not actually consume any characters thus\n    // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n\n\n    switch (node.type) {\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        return;\n\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        return;\n    }\n\n    _super.prototype.visitChildren.call(this, node);\n  };\n\n  CharCodeFinder.prototype.visitCharacter = function (node) {\n    if (utils_1.contains(this.targetCharCodes, node.value)) {\n      this.found = true;\n    }\n  };\n\n  CharCodeFinder.prototype.visitSet = function (node) {\n    if (node.complement) {\n      if (findCode(node, this.targetCharCodes) === undefined) {\n        this.found = true;\n      }\n    } else {\n      if (findCode(node, this.targetCharCodes) !== undefined) {\n        this.found = true;\n      }\n    }\n  };\n\n  return CharCodeFinder;\n}(regexp_to_ast_1.BaseRegExpVisitor);\n\nfunction canMatchCharCode(charCodes, pattern) {\n  if (pattern instanceof RegExp) {\n    var ast = reg_exp_parser_1.getRegExpAst(pattern);\n    var charCodeFinder = new CharCodeFinder(charCodes);\n    charCodeFinder.visit(ast);\n    return charCodeFinder.found;\n  } else {\n    return utils_1.find(pattern, function (char) {\n      return utils_1.contains(charCodes, char.charCodeAt(0));\n    }) !== undefined;\n  }\n}\n\nexports.canMatchCharCode = canMatchCharCode;","map":{"version":3,"mappings":"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","names":["complementErrorMessage","exports","getOptimizedStartCodesIndices","regExp","ensureOptimizations","ast","reg_exp_parser_1","firstChars","firstCharOptimizedIndices","value","flags","ignoreCase","e","message","utils_1","toString","msgSuffix","regexp_to_ast_1","result","type","i","length","terms","term","atom","addOptimizedIdxToResult","complement","Error","code","range","rangeCode","from","to","lexer_1","minUnOptVal","maxUnOptVal","minOptIdx","maxOptIdx","currOptIdx","isOptionalQuantifier","quantifier","undefined","atLeast","isWholeOptional","optimizedCharIdx","handleIgnoreCase","char","String","fromCharCode","upperChar","toUpperCase","charCodeAt","lowerChar","toLowerCase","findCode","setNode","targetCharCodes","codeOrRange","range_1","targetCode","__extends","_super","_this","CharCodeFinder","node","found","visitLookahead","visitNegativeLookahead","visitChildren","call","canMatchCharCode","charCodes","pattern","RegExp","charCodeFinder","visit"],"sourceRoot":"","sources":["../../../src/scan/reg_exp.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}