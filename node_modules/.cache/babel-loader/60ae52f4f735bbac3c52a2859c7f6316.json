{"ast":null,"code":"import { Box3, Vector3, Matrix4, Sphere, Line3 } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { SeparatingAxisTriangle } from './SeparatingAxisTriangle.js';\nimport { closestPointsSegmentToSegment } from './MathUtilities.js';\nexport class OrientedBox extends Box3 {\n  constructor() {\n    super(...arguments);\n    this.isOrientedBox = true;\n    this.matrix = new Matrix4();\n    this.invMatrix = new Matrix4();\n    this.points = new Array(8).fill().map(() => new Vector3());\n    this.satAxes = new Array(3).fill().map(() => new Vector3());\n    this.satBounds = new Array(3).fill().map(() => new SeparatingAxisBounds());\n    this.alignedSatBounds = new Array(3).fill().map(() => new SeparatingAxisBounds());\n    this.sphere = new Sphere();\n    this.needsUpdate = false;\n  }\n\n  set(min, max, matrix) {\n    super.set(min, max);\n    this.matrix = matrix;\n    this.needsUpdate = true;\n  }\n\n  copy(other) {\n    super.copy(other);\n    this.matrix.copy(other.matrix);\n    this.needsUpdate = true;\n  }\n\n}\n\nOrientedBox.prototype.update = function () {\n  return function update() {\n    const matrix = this.matrix;\n    const min = this.min;\n    const max = this.max;\n    const points = this.points;\n\n    for (let x = 0; x <= 1; x++) {\n      for (let y = 0; y <= 1; y++) {\n        for (let z = 0; z <= 1; z++) {\n          const i = (1 << 0) * x | (1 << 1) * y | (1 << 2) * z;\n          const v = points[i];\n          v.x = x ? max.x : min.x;\n          v.y = y ? max.y : min.y;\n          v.z = z ? max.z : min.z;\n          v.applyMatrix4(matrix);\n        }\n      }\n    }\n\n    this.sphere.setFromPoints(this.points);\n    const satBounds = this.satBounds;\n    const satAxes = this.satAxes;\n    const minVec = points[0];\n\n    for (let i = 0; i < 3; i++) {\n      const axis = satAxes[i];\n      const sb = satBounds[i];\n      const index = 1 << i;\n      const pi = points[index];\n      axis.subVectors(minVec, pi);\n      sb.setFromPoints(axis, points);\n    }\n\n    const alignedSatBounds = this.alignedSatBounds;\n    alignedSatBounds[0].setFromPointsField(points, 'x');\n    alignedSatBounds[1].setFromPointsField(points, 'y');\n    alignedSatBounds[2].setFromPointsField(points, 'z');\n    this.invMatrix.copy(this.matrix).invert();\n    this.needsUpdate = false;\n  };\n}();\n\nOrientedBox.prototype.intersectsBox = function () {\n  const aabbBounds = new SeparatingAxisBounds();\n  return function intersectsBox(box) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n\n    if (!box.intersectsSphere(this.sphere)) return false;\n    const min = box.min;\n    const max = box.max;\n    const satBounds = this.satBounds;\n    const satAxes = this.satAxes;\n    const alignedSatBounds = this.alignedSatBounds;\n    aabbBounds.min = min.x;\n    aabbBounds.max = max.x;\n    if (alignedSatBounds[0].isSeparated(aabbBounds)) return false;\n    aabbBounds.min = min.y;\n    aabbBounds.max = max.y;\n    if (alignedSatBounds[1].isSeparated(aabbBounds)) return false;\n    aabbBounds.min = min.z;\n    aabbBounds.max = max.z;\n    if (alignedSatBounds[2].isSeparated(aabbBounds)) return false;\n\n    for (let i = 0; i < 3; i++) {\n      const axis = satAxes[i];\n      const sb = satBounds[i];\n      aabbBounds.setFromBox(axis, box);\n      if (sb.isSeparated(aabbBounds)) return false;\n    }\n\n    return true;\n  };\n}();\n\nOrientedBox.prototype.intersectsTriangle = function () {\n  const saTri = new SeparatingAxisTriangle();\n  const pointsArr = new Array(3);\n  const cachedSatBounds = new SeparatingAxisBounds();\n  const cachedSatBounds2 = new SeparatingAxisBounds();\n  const cachedAxis = new Vector3();\n  return function intersectsTriangle(triangle) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n\n    if (!triangle.isSeparatingAxisTriangle) {\n      saTri.copy(triangle);\n      saTri.update();\n      triangle = saTri;\n    } else if (triangle.needsUpdate) {\n      triangle.update();\n    }\n\n    const satBounds = this.satBounds;\n    const satAxes = this.satAxes;\n    pointsArr[0] = triangle.a;\n    pointsArr[1] = triangle.b;\n    pointsArr[2] = triangle.c;\n\n    for (let i = 0; i < 3; i++) {\n      const sb = satBounds[i];\n      const sa = satAxes[i];\n      cachedSatBounds.setFromPoints(sa, pointsArr);\n      if (sb.isSeparated(cachedSatBounds)) return false;\n    }\n\n    const triSatBounds = triangle.satBounds;\n    const triSatAxes = triangle.satAxes;\n    const points = this.points;\n\n    for (let i = 0; i < 3; i++) {\n      const sb = triSatBounds[i];\n      const sa = triSatAxes[i];\n      cachedSatBounds.setFromPoints(sa, points);\n      if (sb.isSeparated(cachedSatBounds)) return false;\n    } // check crossed axes\n\n\n    for (let i = 0; i < 3; i++) {\n      const sa1 = satAxes[i];\n\n      for (let i2 = 0; i2 < 4; i2++) {\n        const sa2 = triSatAxes[i2];\n        cachedAxis.crossVectors(sa1, sa2);\n        cachedSatBounds.setFromPoints(cachedAxis, pointsArr);\n        cachedSatBounds2.setFromPoints(cachedAxis, points);\n        if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;\n      }\n    }\n\n    return true;\n  };\n}();\n\nOrientedBox.prototype.closestPointToPoint = function () {\n  return function closestPointToPoint(point, target1) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n\n    target1.copy(point).applyMatrix4(this.invMatrix).clamp(this.min, this.max).applyMatrix4(this.matrix);\n    return target1;\n  };\n}();\n\nOrientedBox.prototype.distanceToPoint = function () {\n  const target = new Vector3();\n  return function distanceToPoint(point) {\n    this.closestPointToPoint(point, target);\n    return point.distanceTo(target);\n  };\n}();\n\nOrientedBox.prototype.distanceToBox = function () {\n  const xyzFields = ['x', 'y', 'z'];\n  const segments1 = new Array(12).fill().map(() => new Line3());\n  const segments2 = new Array(12).fill().map(() => new Line3());\n  const point1 = new Vector3();\n  const point2 = new Vector3(); // early out if we find a value below threshold\n\n  return function distanceToBox(box) {\n    let threshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let target1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let target2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n    if (this.needsUpdate) {\n      this.update();\n    }\n\n    if (this.intersectsBox(box)) {\n      if (target1 || target2) {\n        box.getCenter(point2);\n        this.closestPointToPoint(point2, point1);\n        box.closestPointToPoint(point1, point2);\n        if (target1) target1.copy(point1);\n        if (target2) target2.copy(point2);\n      }\n\n      return 0;\n    }\n\n    const threshold2 = threshold * threshold;\n    const min = box.min;\n    const max = box.max;\n    const points = this.points; // iterate over every edge and compare distances\n\n    let closestDistanceSq = Infinity; // check over all these points\n\n    for (let i = 0; i < 8; i++) {\n      const p = points[i];\n      point2.copy(p).clamp(min, max);\n      const dist = p.distanceToSquared(point2);\n\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(p);\n        if (target2) target2.copy(point2);\n        if (dist < threshold2) return Math.sqrt(dist);\n      }\n    } // generate and check all line segment distances\n\n\n    let count = 0;\n\n    for (let i = 0; i < 3; i++) {\n      for (let i1 = 0; i1 <= 1; i1++) {\n        for (let i2 = 0; i2 <= 1; i2++) {\n          const nextIndex = (i + 1) % 3;\n          const nextIndex2 = (i + 2) % 3; // get obb line segments\n\n          const index = i1 << nextIndex | i2 << nextIndex2;\n          const index2 = 1 << i | i1 << nextIndex | i2 << nextIndex2;\n          const p1 = points[index];\n          const p2 = points[index2];\n          const line1 = segments1[count];\n          line1.set(p1, p2); // get aabb line segments\n\n          const f1 = xyzFields[i];\n          const f2 = xyzFields[nextIndex];\n          const f3 = xyzFields[nextIndex2];\n          const line2 = segments2[count];\n          const start = line2.start;\n          const end = line2.end;\n          start[f1] = min[f1];\n          start[f2] = i1 ? min[f2] : max[f2];\n          start[f3] = i2 ? min[f3] : max[f2];\n          end[f1] = max[f1];\n          end[f2] = i1 ? min[f2] : max[f2];\n          end[f3] = i2 ? min[f3] : max[f2];\n          count++;\n        }\n      }\n    } // check all the other boxes point\n\n\n    for (let x = 0; x <= 1; x++) {\n      for (let y = 0; y <= 1; y++) {\n        for (let z = 0; z <= 1; z++) {\n          point2.x = x ? max.x : min.x;\n          point2.y = y ? max.y : min.y;\n          point2.z = z ? max.z : min.z;\n          this.closestPointToPoint(point2, point1);\n          const dist = point2.distanceToSquared(point1);\n\n          if (dist < closestDistanceSq) {\n            closestDistanceSq = dist;\n            if (target1) target1.copy(point1);\n            if (target2) target2.copy(point2);\n            if (dist < threshold2) return Math.sqrt(dist);\n          }\n        }\n      }\n    }\n\n    for (let i = 0; i < 12; i++) {\n      const l1 = segments1[i];\n\n      for (let i2 = 0; i2 < 12; i2++) {\n        const l2 = segments2[i2];\n        closestPointsSegmentToSegment(l1, l2, point1, point2);\n        const dist = point1.distanceToSquared(point2);\n\n        if (dist < closestDistanceSq) {\n          closestDistanceSq = dist;\n          if (target1) target1.copy(point1);\n          if (target2) target2.copy(point2);\n          if (dist < threshold2) return Math.sqrt(dist);\n        }\n      }\n    }\n\n    return Math.sqrt(closestDistanceSq);\n  };\n}();","map":{"version":3,"names":["Box3","Vector3","Matrix4","Sphere","Line3","SeparatingAxisBounds","SeparatingAxisTriangle","closestPointsSegmentToSegment","OrientedBox","constructor","isOrientedBox","matrix","invMatrix","points","Array","fill","map","satAxes","satBounds","alignedSatBounds","sphere","needsUpdate","set","min","max","copy","other","prototype","update","x","y","z","i","v","applyMatrix4","setFromPoints","minVec","axis","sb","index","pi","subVectors","setFromPointsField","invert","intersectsBox","aabbBounds","box","intersectsSphere","isSeparated","setFromBox","intersectsTriangle","saTri","pointsArr","cachedSatBounds","cachedSatBounds2","cachedAxis","triangle","isSeparatingAxisTriangle","a","b","c","sa","triSatBounds","triSatAxes","sa1","i2","sa2","crossVectors","closestPointToPoint","point","target1","clamp","distanceToPoint","target","distanceTo","distanceToBox","xyzFields","segments1","segments2","point1","point2","threshold","target2","getCenter","threshold2","closestDistanceSq","Infinity","p","dist","distanceToSquared","Math","sqrt","count","i1","nextIndex","nextIndex2","index2","p1","p2","line1","f1","f2","f3","line2","start","end","l1","l2"],"sources":["/home/cliffexpc63/my example/portfolioQ/node_modules/three-mesh-bvh/src/Utils/OrientedBox.js"],"sourcesContent":["import { Box3, Vector3, Matrix4, Sphere, Line3 } from 'three';\r\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\r\nimport { SeparatingAxisTriangle } from './SeparatingAxisTriangle.js';\r\nimport { closestPointsSegmentToSegment } from './MathUtilities.js';\r\n\r\nexport class OrientedBox extends Box3 {\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\r\n\t\tthis.isOrientedBox = true;\r\n\t\tthis.matrix = new Matrix4();\r\n\t\tthis.invMatrix = new Matrix4();\r\n\t\tthis.points = new Array( 8 ).fill().map( () => new Vector3() );\r\n\t\tthis.satAxes = new Array( 3 ).fill().map( () => new Vector3() );\r\n\t\tthis.satBounds = new Array( 3 ).fill().map( () => new SeparatingAxisBounds() );\r\n\t\tthis.alignedSatBounds = new Array( 3 ).fill().map( () => new SeparatingAxisBounds() );\r\n\t\tthis.sphere = new Sphere();\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t}\r\n\r\n\tset( min, max, matrix ) {\r\n\r\n\t\tsuper.set( min, max );\r\n\t\tthis.matrix = matrix;\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\tcopy( other ) {\r\n\r\n\t\tsuper.copy( other );\r\n\t\tthis.matrix.copy( other.matrix );\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\nOrientedBox.prototype.update = ( function () {\r\n\r\n\treturn function update() {\r\n\r\n\t\tconst matrix = this.matrix;\r\n\t\tconst min = this.min;\r\n\t\tconst max = this.max;\r\n\r\n\t\tconst points = this.points;\r\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\r\n\r\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\r\n\r\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\r\n\r\n\t\t\t\t\tconst i = ( ( 1 << 0 ) * x ) | ( ( 1 << 1 ) * y ) | ( ( 1 << 2 ) * z );\r\n\t\t\t\t\tconst v = points[ i ];\r\n\t\t\t\t\tv.x = x ? max.x : min.x;\r\n\t\t\t\t\tv.y = y ? max.y : min.y;\r\n\t\t\t\t\tv.z = z ? max.z : min.z;\r\n\r\n\t\t\t\t\tv.applyMatrix4( matrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.sphere.setFromPoints( this.points );\r\n\r\n\t\tconst satBounds = this.satBounds;\r\n\t\tconst satAxes = this.satAxes;\r\n\t\tconst minVec = points[ 0 ];\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst axis = satAxes[ i ];\r\n\t\t\tconst sb = satBounds[ i ];\r\n\t\t\tconst index = 1 << i;\r\n\t\t\tconst pi = points[ index ];\r\n\r\n\t\t\taxis.subVectors( minVec, pi );\r\n\t\t\tsb.setFromPoints( axis, points );\r\n\r\n\t\t}\r\n\r\n\t\tconst alignedSatBounds = this.alignedSatBounds;\r\n\t\talignedSatBounds[ 0 ].setFromPointsField( points, 'x' );\r\n\t\talignedSatBounds[ 1 ].setFromPointsField( points, 'y' );\r\n\t\talignedSatBounds[ 2 ].setFromPointsField( points, 'z' );\r\n\r\n\t\tthis.invMatrix.copy( this.matrix ).invert();\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nOrientedBox.prototype.intersectsBox = ( function () {\r\n\r\n\tconst aabbBounds = new SeparatingAxisBounds();\r\n\treturn function intersectsBox( box ) {\r\n\r\n\t\tif ( this.needsUpdate ) {\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! box.intersectsSphere( this.sphere ) ) return false;\r\n\r\n\t\tconst min = box.min;\r\n\t\tconst max = box.max;\r\n\t\tconst satBounds = this.satBounds;\r\n\t\tconst satAxes = this.satAxes;\r\n\t\tconst alignedSatBounds = this.alignedSatBounds;\r\n\r\n\t\taabbBounds.min = min.x;\r\n\t\taabbBounds.max = max.x;\r\n\t\tif ( alignedSatBounds[ 0 ].isSeparated( aabbBounds ) ) return false;\r\n\r\n\t\taabbBounds.min = min.y;\r\n\t\taabbBounds.max = max.y;\r\n\t\tif ( alignedSatBounds[ 1 ].isSeparated( aabbBounds ) ) return false;\r\n\r\n\t\taabbBounds.min = min.z;\r\n\t\taabbBounds.max = max.z;\r\n\t\tif ( alignedSatBounds[ 2 ].isSeparated( aabbBounds ) ) return false;\r\n\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst axis = satAxes[ i ];\r\n\t\t\tconst sb = satBounds[ i ];\r\n\t\t\taabbBounds.setFromBox( axis, box );\r\n\t\t\tif ( sb.isSeparated( aabbBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nOrientedBox.prototype.intersectsTriangle = ( function () {\r\n\r\n\tconst saTri = new SeparatingAxisTriangle();\r\n\tconst pointsArr = new Array( 3 );\r\n\tconst cachedSatBounds = new SeparatingAxisBounds();\r\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\r\n\tconst cachedAxis = new Vector3();\r\n\treturn function intersectsTriangle( triangle ) {\r\n\r\n\t\tif ( this.needsUpdate ) {\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! triangle.isSeparatingAxisTriangle ) {\r\n\r\n\t\t\tsaTri.copy( triangle );\r\n\t\t\tsaTri.update();\r\n\t\t\ttriangle = saTri;\r\n\r\n\t\t} else if ( triangle.needsUpdate ) {\r\n\r\n\t\t\ttriangle.update();\r\n\r\n\t\t}\r\n\r\n\t\tconst satBounds = this.satBounds;\r\n\t\tconst satAxes = this.satAxes;\r\n\r\n\t\tpointsArr[ 0 ] = triangle.a;\r\n\t\tpointsArr[ 1 ] = triangle.b;\r\n\t\tpointsArr[ 2 ] = triangle.c;\r\n\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds[ i ];\r\n\t\t\tconst sa = satAxes[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, pointsArr );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\tconst triSatBounds = triangle.satBounds;\r\n\t\tconst triSatAxes = triangle.satAxes;\r\n\t\tconst points = this.points;\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst sb = triSatBounds[ i ];\r\n\t\t\tconst sa = triSatAxes[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, points );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\t// check crossed axes\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst sa1 = satAxes[ i ];\r\n\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\r\n\r\n\t\t\t\tconst sa2 = triSatAxes[ i2 ];\r\n\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\r\n\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, pointsArr );\r\n\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, points );\r\n\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nOrientedBox.prototype.closestPointToPoint = ( function () {\r\n\r\n\treturn function closestPointToPoint( point, target1 ) {\r\n\r\n\t\tif ( this.needsUpdate ) {\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t}\r\n\r\n\t\ttarget1\r\n\t\t\t.copy( point )\r\n\t\t\t.applyMatrix4( this.invMatrix )\r\n\t\t\t.clamp( this.min, this.max )\r\n\t\t\t.applyMatrix4( this.matrix );\r\n\r\n\t\treturn target1;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nOrientedBox.prototype.distanceToPoint = ( function () {\r\n\r\n\tconst target = new Vector3();\r\n\treturn function distanceToPoint( point ) {\r\n\r\n\t\tthis.closestPointToPoint( point, target );\r\n\t\treturn point.distanceTo( target );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nOrientedBox.prototype.distanceToBox = ( function () {\r\n\r\n\tconst xyzFields = [ 'x', 'y', 'z' ];\r\n\tconst segments1 = new Array( 12 ).fill().map( () => new Line3() );\r\n\tconst segments2 = new Array( 12 ).fill().map( () => new Line3() );\r\n\r\n\tconst point1 = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\r\n\t// early out if we find a value below threshold\r\n\treturn function distanceToBox( box, threshold = 0, target1 = null, target2 = null ) {\r\n\r\n\t\tif ( this.needsUpdate ) {\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.intersectsBox( box ) ) {\r\n\r\n\t\t\tif ( target1 || target2 ) {\r\n\r\n\t\t\t\tbox.getCenter( point2 );\r\n\t\t\t\tthis.closestPointToPoint( point2, point1 );\r\n\t\t\t\tbox.closestPointToPoint( point1, point2 );\r\n\r\n\t\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn 0;\r\n\r\n\t\t}\r\n\r\n\t\tconst threshold2 = threshold * threshold;\r\n\t\tconst min = box.min;\r\n\t\tconst max = box.max;\r\n\t\tconst points = this.points;\r\n\r\n\r\n\t\t// iterate over every edge and compare distances\r\n\t\tlet closestDistanceSq = Infinity;\r\n\r\n\t\t// check over all these points\r\n\t\tfor ( let i = 0; i < 8; i ++ ) {\r\n\r\n\t\t\tconst p = points[ i ];\r\n\t\t\tpoint2.copy( p ).clamp( min, max );\r\n\r\n\t\t\tconst dist = p.distanceToSquared( point2 );\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( p );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate and check all line segment distances\r\n\t\tlet count = 0;\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tfor ( let i1 = 0; i1 <= 1; i1 ++ ) {\r\n\r\n\t\t\t\tfor ( let i2 = 0; i2 <= 1; i2 ++ ) {\r\n\r\n\t\t\t\t\tconst nextIndex = ( i + 1 ) % 3;\r\n\t\t\t\t\tconst nextIndex2 = ( i + 2 ) % 3;\r\n\r\n\t\t\t\t\t// get obb line segments\r\n\t\t\t\t\tconst index = i1 << nextIndex | i2 << nextIndex2;\r\n\t\t\t\t\tconst index2 = 1 << i | i1 << nextIndex | i2 << nextIndex2;\r\n\t\t\t\t\tconst p1 = points[ index ];\r\n\t\t\t\t\tconst p2 = points[ index2 ];\r\n\t\t\t\t\tconst line1 = segments1[ count ];\r\n\t\t\t\t\tline1.set( p1, p2 );\r\n\r\n\r\n\t\t\t\t\t// get aabb line segments\r\n\t\t\t\t\tconst f1 = xyzFields[ i ];\r\n\t\t\t\t\tconst f2 = xyzFields[ nextIndex ];\r\n\t\t\t\t\tconst f3 = xyzFields[ nextIndex2 ];\r\n\t\t\t\t\tconst line2 = segments2[ count ];\r\n\t\t\t\t\tconst start = line2.start;\r\n\t\t\t\t\tconst end = line2.end;\r\n\r\n\t\t\t\t\tstart[ f1 ] = min[ f1 ];\r\n\t\t\t\t\tstart[ f2 ] = i1 ? min[ f2 ] : max[ f2 ];\r\n\t\t\t\t\tstart[ f3 ] = i2 ? min[ f3 ] : max[ f2 ];\r\n\r\n\t\t\t\t\tend[ f1 ] = max[ f1 ];\r\n\t\t\t\t\tend[ f2 ] = i1 ? min[ f2 ] : max[ f2 ];\r\n\t\t\t\t\tend[ f3 ] = i2 ? min[ f3 ] : max[ f2 ];\r\n\r\n\t\t\t\t\tcount ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// check all the other boxes point\r\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\r\n\r\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\r\n\r\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\r\n\r\n\t\t\t\t\tpoint2.x = x ? max.x : min.x;\r\n\t\t\t\t\tpoint2.y = y ? max.y : min.y;\r\n\t\t\t\t\tpoint2.z = z ? max.z : min.z;\r\n\r\n\t\t\t\t\tthis.closestPointToPoint( point2, point1 );\r\n\t\t\t\t\tconst dist = point2.distanceToSquared( point1 );\r\n\t\t\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < 12; i ++ ) {\r\n\r\n\t\t\tconst l1 = segments1[ i ];\r\n\t\t\tfor ( let i2 = 0; i2 < 12; i2 ++ ) {\r\n\r\n\t\t\t\tconst l2 = segments2[ i2 ];\r\n\t\t\t\tclosestPointsSegmentToSegment( l1, l2, point1, point2 );\r\n\t\t\t\tconst dist = point1.distanceToSquared( point2 );\r\n\t\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t};\r\n\r\n} )();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}