{"ast":null,"code":"import _classCallCheck from \"/home/cliffexpc63/my example/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/cliffexpc63/my example/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/cliffexpc63/my example/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/cliffexpc63/my example/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Triangle, Vector3, Line3, Sphere } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\nexport var SeparatingAxisTriangle = /*#__PURE__*/function (_Triangle) {\n  _inherits(SeparatingAxisTriangle, _Triangle);\n\n  var _super = _createSuper(SeparatingAxisTriangle);\n\n  function SeparatingAxisTriangle() {\n    var _this;\n\n    _classCallCheck(this, SeparatingAxisTriangle);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.isSeparatingAxisTriangle = true;\n    _this.satAxes = new Array(4).fill().map(function () {\n      return new Vector3();\n    });\n    _this.satBounds = new Array(4).fill().map(function () {\n      return new SeparatingAxisBounds();\n    });\n    _this.points = [_this.a, _this.b, _this.c];\n    _this.sphere = new Sphere();\n    _this.needsUpdate = false;\n    return _this;\n  }\n\n  _createClass(SeparatingAxisTriangle, [{\n    key: \"intersectsSphere\",\n    value: function intersectsSphere(sphere) {\n      return sphereIntersectTriangle(sphere, this);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var a = this.a;\n      var b = this.b;\n      var c = this.c;\n      var points = this.points;\n      var satAxes = this.satAxes;\n      var satBounds = this.satBounds;\n      var axis0 = satAxes[0];\n      var sab0 = satBounds[0];\n      this.getNormal(axis0);\n      sab0.setFromPoints(axis0, points);\n      var axis1 = satAxes[1];\n      var sab1 = satBounds[1];\n      axis1.subVectors(a, b);\n      sab1.setFromPoints(axis1, points);\n      var axis2 = satAxes[2];\n      var sab2 = satBounds[2];\n      axis2.subVectors(b, c);\n      sab2.setFromPoints(axis2, points);\n      var axis3 = satAxes[3];\n      var sab3 = satBounds[3];\n      axis3.subVectors(c, a);\n      sab3.setFromPoints(axis3, points);\n      this.sphere.setFromPoints(this.points);\n      this.needsUpdate = false;\n    }\n  }]);\n\n  return SeparatingAxisTriangle;\n}(Triangle);\n\nSeparatingAxisTriangle.prototype.closestPointToSegment = function () {\n  var point1 = new Vector3();\n  var point2 = new Vector3();\n  var edge = new Line3();\n  return function distanceToSegment(segment) {\n    var target1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var target2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var start = segment.start,\n        end = segment.end;\n    var points = this.points;\n    var distSq;\n    var closestDistanceSq = Infinity; // check the triangle edges\n\n    for (var i = 0; i < 3; i++) {\n      var nexti = (i + 1) % 3;\n      edge.start.copy(points[i]);\n      edge.end.copy(points[nexti]);\n      closestPointsSegmentToSegment(edge, segment, point1, point2);\n      distSq = point1.distanceToSquared(point2);\n\n      if (distSq < closestDistanceSq) {\n        closestDistanceSq = distSq;\n        if (target1) target1.copy(point1);\n        if (target2) target2.copy(point2);\n      }\n    } // check end points\n\n\n    this.closestPointToPoint(start, point1);\n    distSq = start.distanceToSquared(point1);\n\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1) target1.copy(point1);\n      if (target2) target2.copy(start);\n    }\n\n    this.closestPointToPoint(end, point1);\n    distSq = end.distanceToSquared(point1);\n\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1) target1.copy(point1);\n      if (target2) target2.copy(end);\n    }\n\n    return Math.sqrt(closestDistanceSq);\n  };\n}();\n\nSeparatingAxisTriangle.prototype.intersectsTriangle = function () {\n  var saTri2 = new SeparatingAxisTriangle();\n  var arr1 = new Array(3);\n  var arr2 = new Array(3);\n  var cachedSatBounds = new SeparatingAxisBounds();\n  var cachedSatBounds2 = new SeparatingAxisBounds();\n  var cachedAxis = new Vector3();\n  return function intersectsTriangle(other) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n\n    if (!other.isSeparatingAxisTriangle) {\n      saTri2.copy(other);\n      saTri2.update();\n      other = saTri2;\n    } else if (other.needsUpdate) {\n      other.update();\n    }\n\n    var satBounds1 = this.satBounds;\n    var satAxes1 = this.satAxes;\n    arr2[0] = other.a;\n    arr2[1] = other.b;\n    arr2[2] = other.c;\n\n    for (var i = 0; i < 4; i++) {\n      var sb = satBounds1[i];\n      var sa = satAxes1[i];\n      cachedSatBounds.setFromPoints(sa, arr2);\n      if (sb.isSeparated(cachedSatBounds)) return false;\n    }\n\n    var satBounds2 = other.satBounds;\n    var satAxes2 = other.satAxes;\n    arr1[0] = this.a;\n    arr1[1] = this.b;\n    arr1[2] = this.c;\n\n    for (var _i = 0; _i < 4; _i++) {\n      var _sb = satBounds2[_i];\n      var _sa = satAxes2[_i];\n      cachedSatBounds.setFromPoints(_sa, arr1);\n      if (_sb.isSeparated(cachedSatBounds)) return false;\n    } // check crossed axes\n\n\n    for (var _i2 = 0; _i2 < 4; _i2++) {\n      var sa1 = satAxes1[_i2];\n\n      for (var i2 = 0; i2 < 4; i2++) {\n        var sa2 = satAxes2[i2];\n        cachedAxis.crossVectors(sa1, sa2);\n        cachedSatBounds.setFromPoints(cachedAxis, arr1);\n        cachedSatBounds2.setFromPoints(cachedAxis, arr2);\n        if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;\n      }\n    }\n\n    return true;\n  };\n}();\n\nSeparatingAxisTriangle.prototype.distanceToPoint = function () {\n  var target = new Vector3();\n  return function distanceToPoint(point) {\n    this.closestPointToPoint(point, target);\n    return point.distanceTo(target);\n  };\n}();\n\nSeparatingAxisTriangle.prototype.distanceToTriangle = function () {\n  var point = new Vector3();\n  var point2 = new Vector3();\n  var cornerFields = ['a', 'b', 'c'];\n  var line1 = new Line3();\n  var line2 = new Line3();\n  return function distanceToTriangle(other) {\n    var target1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var target2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    if (this.intersectsTriangle(other)) {\n      // TODO: This will not result in a point that lies on\n      // the intersection line of the triangles\n      if (target1 || target2) {\n        this.getMidpoint(point);\n        other.closestPointToPoint(point, point2);\n        this.closestPointToPoint(point2, point);\n        if (target1) target1.copy(point);\n        if (target2) target2.copy(point2);\n      }\n\n      return 0;\n    }\n\n    var closestDistanceSq = Infinity; // check all point distances\n\n    for (var i = 0; i < 3; i++) {\n      var dist = void 0;\n      var field = cornerFields[i];\n      var otherVec = other[field];\n      this.closestPointToPoint(otherVec, point);\n      dist = otherVec.distanceToSquared(point);\n\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(point);\n        if (target2) target2.copy(otherVec);\n      }\n\n      var thisVec = this[field];\n      other.closestPointToPoint(thisVec, point);\n      dist = thisVec.distanceToSquared(point);\n\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(thisVec);\n        if (target2) target2.copy(point);\n      }\n    }\n\n    for (var _i3 = 0; _i3 < 3; _i3++) {\n      var f11 = cornerFields[_i3];\n      var f12 = cornerFields[(_i3 + 1) % 3];\n      line1.set(this[f11], this[f12]);\n\n      for (var i2 = 0; i2 < 3; i2++) {\n        var f21 = cornerFields[i2];\n        var f22 = cornerFields[(i2 + 1) % 3];\n        line2.set(other[f21], other[f22]);\n        closestPointsSegmentToSegment(line1, line2, point, point2);\n\n        var _dist = point.distanceToSquared(point2);\n\n        if (_dist < closestDistanceSq) {\n          closestDistanceSq = _dist;\n          if (target1) target1.copy(point);\n          if (target2) target2.copy(point2);\n        }\n      }\n    }\n\n    return Math.sqrt(closestDistanceSq);\n  };\n}();","map":{"version":3,"names":["Triangle","Vector3","Line3","Sphere","SeparatingAxisBounds","closestPointsSegmentToSegment","sphereIntersectTriangle","SeparatingAxisTriangle","args","isSeparatingAxisTriangle","satAxes","Array","fill","map","satBounds","points","a","b","c","sphere","needsUpdate","axis0","sab0","getNormal","setFromPoints","axis1","sab1","subVectors","axis2","sab2","axis3","sab3","prototype","closestPointToSegment","point1","point2","edge","distanceToSegment","segment","target1","target2","start","end","distSq","closestDistanceSq","Infinity","i","nexti","copy","distanceToSquared","closestPointToPoint","Math","sqrt","intersectsTriangle","saTri2","arr1","arr2","cachedSatBounds","cachedSatBounds2","cachedAxis","other","update","satBounds1","satAxes1","sb","sa","isSeparated","satBounds2","satAxes2","sa1","i2","sa2","crossVectors","distanceToPoint","target","point","distanceTo","distanceToTriangle","cornerFields","line1","line2","getMidpoint","dist","field","otherVec","thisVec","f11","f12","set","f21","f22"],"sources":["/home/cliffexpc63/my example/portfolio/node_modules/three-mesh-bvh/src/Utils/SeparatingAxisTriangle.js"],"sourcesContent":["import { Triangle, Vector3, Line3, Sphere } from 'three';\r\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\r\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\r\n\r\nexport class SeparatingAxisTriangle extends Triangle {\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\r\n\t\tthis.isSeparatingAxisTriangle = true;\r\n\t\tthis.satAxes = new Array( 4 ).fill().map( () => new Vector3() );\r\n\t\tthis.satBounds = new Array( 4 ).fill().map( () => new SeparatingAxisBounds() );\r\n\t\tthis.points = [ this.a, this.b, this.c ];\r\n\t\tthis.sphere = new Sphere();\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\treturn sphereIntersectTriangle( sphere, this );\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst a = this.a;\r\n\t\tconst b = this.b;\r\n\t\tconst c = this.c;\r\n\t\tconst points = this.points;\r\n\r\n\t\tconst satAxes = this.satAxes;\r\n\t\tconst satBounds = this.satBounds;\r\n\r\n\t\tconst axis0 = satAxes[ 0 ];\r\n\t\tconst sab0 = satBounds[ 0 ];\r\n\t\tthis.getNormal( axis0 );\r\n\t\tsab0.setFromPoints( axis0, points );\r\n\r\n\t\tconst axis1 = satAxes[ 1 ];\r\n\t\tconst sab1 = satBounds[ 1 ];\r\n\t\taxis1.subVectors( a, b );\r\n\t\tsab1.setFromPoints( axis1, points );\r\n\r\n\t\tconst axis2 = satAxes[ 2 ];\r\n\t\tconst sab2 = satBounds[ 2 ];\r\n\t\taxis2.subVectors( b, c );\r\n\t\tsab2.setFromPoints( axis2, points );\r\n\r\n\t\tconst axis3 = satAxes[ 3 ];\r\n\t\tconst sab3 = satBounds[ 3 ];\r\n\t\taxis3.subVectors( c, a );\r\n\t\tsab3.setFromPoints( axis3, points );\r\n\r\n\t\tthis.sphere.setFromPoints( this.points );\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t}\r\n\r\n}\r\n\r\nSeparatingAxisTriangle.prototype.closestPointToSegment = ( function () {\r\n\r\n\tconst point1 = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\tconst edge = new Line3();\r\n\r\n\treturn function distanceToSegment( segment, target1 = null, target2 = null ) {\r\n\r\n\t\tconst { start, end } = segment;\r\n\t\tconst points = this.points;\r\n\t\tlet distSq;\r\n\t\tlet closestDistanceSq = Infinity;\r\n\r\n\t\t// check the triangle edges\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst nexti = ( i + 1 ) % 3;\r\n\t\t\tedge.start.copy( points[ i ] );\r\n\t\t\tedge.end.copy( points[ nexti ] );\r\n\r\n\t\t\tclosestPointsSegmentToSegment( edge, segment, point1, point2 );\r\n\r\n\t\t\tdistSq = point1.distanceToSquared( point2 );\r\n\t\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = distSq;\r\n\t\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// check end points\r\n\t\tthis.closestPointToPoint( start, point1 );\r\n\t\tdistSq = start.distanceToSquared( point1 );\r\n\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\tclosestDistanceSq = distSq;\r\n\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\tif ( target2 ) target2.copy( start );\r\n\r\n\t\t}\r\n\r\n\t\tthis.closestPointToPoint( end, point1 );\r\n\t\tdistSq = end.distanceToSquared( point1 );\r\n\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\tclosestDistanceSq = distSq;\r\n\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\tif ( target2 ) target2.copy( end );\r\n\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nSeparatingAxisTriangle.prototype.intersectsTriangle = ( function () {\r\n\r\n\tconst saTri2 = new SeparatingAxisTriangle();\r\n\tconst arr1 = new Array( 3 );\r\n\tconst arr2 = new Array( 3 );\r\n\tconst cachedSatBounds = new SeparatingAxisBounds();\r\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\r\n\tconst cachedAxis = new Vector3();\r\n\treturn function intersectsTriangle( other ) {\r\n\r\n\t\tif ( this.needsUpdate ) {\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! other.isSeparatingAxisTriangle ) {\r\n\r\n\t\t\tsaTri2.copy( other );\r\n\t\t\tsaTri2.update();\r\n\t\t\tother = saTri2;\r\n\r\n\t\t} else if ( other.needsUpdate ) {\r\n\r\n\t\t\tother.update();\r\n\r\n\t\t}\r\n\r\n\t\tconst satBounds1 = this.satBounds;\r\n\t\tconst satAxes1 = this.satAxes;\r\n\t\tarr2[ 0 ] = other.a;\r\n\t\tarr2[ 1 ] = other.b;\r\n\t\tarr2[ 2 ] = other.c;\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds1[ i ];\r\n\t\t\tconst sa = satAxes1[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, arr2 );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\tconst satBounds2 = other.satBounds;\r\n\t\tconst satAxes2 = other.satAxes;\r\n\t\tarr1[ 0 ] = this.a;\r\n\t\tarr1[ 1 ] = this.b;\r\n\t\tarr1[ 2 ] = this.c;\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds2[ i ];\r\n\t\t\tconst sa = satAxes2[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, arr1 );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\t// check crossed axes\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sa1 = satAxes1[ i ];\r\n\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\r\n\r\n\t\t\t\tconst sa2 = satAxes2[ i2 ];\r\n\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\r\n\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, arr1 );\r\n\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, arr2 );\r\n\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nSeparatingAxisTriangle.prototype.distanceToPoint = ( function () {\r\n\r\n\tconst target = new Vector3();\r\n\treturn function distanceToPoint( point ) {\r\n\r\n\t\tthis.closestPointToPoint( point, target );\r\n\t\treturn point.distanceTo( target );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nSeparatingAxisTriangle.prototype.distanceToTriangle = ( function () {\r\n\r\n\tconst point = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\tconst cornerFields = [ 'a', 'b', 'c' ];\r\n\tconst line1 = new Line3();\r\n\tconst line2 = new Line3();\r\n\r\n\treturn function distanceToTriangle( other, target1 = null, target2 = null ) {\r\n\r\n\t\tif ( this.intersectsTriangle( other ) ) {\r\n\r\n\t\t\t// TODO: This will not result in a point that lies on\r\n\t\t\t// the intersection line of the triangles\r\n\t\t\tif ( target1 || target2 ) {\r\n\r\n\t\t\t\tthis.getMidpoint( point );\r\n\t\t\t\tother.closestPointToPoint( point, point2 );\r\n\t\t\t\tthis.closestPointToPoint( point2, point );\r\n\r\n\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn 0;\r\n\r\n\t\t}\r\n\r\n\t\tlet closestDistanceSq = Infinity;\r\n\r\n\t\t// check all point distances\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tlet dist;\r\n\t\t\tconst field = cornerFields[ i ];\r\n\t\t\tconst otherVec = other[ field ];\r\n\t\t\tthis.closestPointToPoint( otherVec, point );\r\n\r\n\t\t\tdist = otherVec.distanceToSquared( point );\r\n\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\tif ( target2 ) target2.copy( otherVec );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tconst thisVec = this[ field ];\r\n\t\t\tother.closestPointToPoint( thisVec, point );\r\n\r\n\t\t\tdist = thisVec.distanceToSquared( point );\r\n\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( thisVec );\r\n\t\t\t\tif ( target2 ) target2.copy( point );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst f11 = cornerFields[ i ];\r\n\t\t\tconst f12 = cornerFields[ ( i + 1 ) % 3 ];\r\n\t\t\tline1.set( this[ f11 ], this[ f12 ] );\r\n\t\t\tfor ( let i2 = 0; i2 < 3; i2 ++ ) {\r\n\r\n\t\t\t\tconst f21 = cornerFields[ i2 ];\r\n\t\t\t\tconst f22 = cornerFields[ ( i2 + 1 ) % 3 ];\r\n\t\t\t\tline2.set( other[ f21 ], other[ f22 ] );\r\n\r\n\t\t\t\tclosestPointsSegmentToSegment( line1, line2, point, point2 );\r\n\r\n\t\t\t\tconst dist = point.distanceToSquared( point2 );\r\n\t\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}