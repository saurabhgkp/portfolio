{"ast":null,"code":"import { Quaternion, Vector3, Object3D, SphereGeometry, MeshBasicMaterial, Color, LineBasicMaterial, Matrix4, Mesh, Line, BufferGeometry, BufferAttribute } from 'three';\n\n/**\n * CCD Algorithm\n *  - https://sites.google.com/site/auraliusproject/ccd-algorithm\n *\n * // ik parameter example\n * //\n * // target, effector, index in links are bone index in skeleton.bones.\n * // the bones relation should be\n * // <-- parent                                  child -->\n * // links[ n ], links[ n - 1 ], ..., links[ 0 ], effector\n * iks = [ {\n *\ttarget: 1,\n *\teffector: 2,\n *\tlinks: [ { index: 5, limitation: new Vector3( 1, 0, 0 ) }, { index: 4, enabled: false }, { index : 3 } ],\n *\titeration: 10,\n *\tminAngle: 0.0,\n *\tmaxAngle: 1.0,\n * } ];\n */\n\nvar CCDIKSolver = function () {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} iks\n   */\n  function CCDIKSolver(mesh, iks) {\n    this.mesh = mesh;\n    this.iks = iks || [];\n    this._valid();\n  }\n  CCDIKSolver.prototype = {\n    constructor: CCDIKSolver,\n    /**\n     * Update IK bones.\n     *\n     * @return {CCDIKSolver}\n     */\n    update: function () {\n      var q = new Quaternion();\n      var targetPos = new Vector3();\n      var targetVec = new Vector3();\n      var effectorPos = new Vector3();\n      var effectorVec = new Vector3();\n      var linkPos = new Vector3();\n      var invLinkQ = new Quaternion();\n      var linkScale = new Vector3();\n      var axis = new Vector3();\n      var vector = new Vector3();\n      return function update() {\n        var bones = this.mesh.skeleton.bones;\n        var iks = this.iks; // for reference overhead reduction in loop\n\n        var math = Math;\n        for (var i = 0, il = iks.length; i < il; i++) {\n          var ik = iks[i];\n          var effector = bones[ik.effector];\n          var target = bones[ik.target]; // don't use getWorldPosition() here for the performance\n          // because it calls updateMatrixWorld( true ) inside.\n\n          targetPos.setFromMatrixPosition(target.matrixWorld);\n          var links = ik.links;\n          var iteration = ik.iteration !== undefined ? ik.iteration : 1;\n          for (var j = 0; j < iteration; j++) {\n            var rotated = false;\n            for (var k = 0, kl = links.length; k < kl; k++) {\n              var link = bones[links[k].index]; // skip this link and following links.\n              // this skip is used for MMD performance optimization.\n\n              if (links[k].enabled === false) break;\n              var limitation = links[k].limitation;\n              var rotationMin = links[k].rotationMin;\n              var rotationMax = links[k].rotationMax; // don't use getWorldPosition/Quaternion() here for the performance\n              // because they call updateMatrixWorld( true ) inside.\n\n              link.matrixWorld.decompose(linkPos, invLinkQ, linkScale);\n              invLinkQ.invert();\n              effectorPos.setFromMatrixPosition(effector.matrixWorld); // work in link world\n\n              effectorVec.subVectors(effectorPos, linkPos);\n              effectorVec.applyQuaternion(invLinkQ);\n              effectorVec.normalize();\n              targetVec.subVectors(targetPos, linkPos);\n              targetVec.applyQuaternion(invLinkQ);\n              targetVec.normalize();\n              var angle = targetVec.dot(effectorVec);\n              if (angle > 1.0) {\n                angle = 1.0;\n              } else if (angle < -1.0) {\n                angle = -1.0;\n              }\n              angle = math.acos(angle); // skip if changing angle is too small to prevent vibration of bone\n              // Refer to http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mmd.three.js\n\n              if (angle < 1e-5) continue;\n              if (ik.minAngle !== undefined && angle < ik.minAngle) {\n                angle = ik.minAngle;\n              }\n              if (ik.maxAngle !== undefined && angle > ik.maxAngle) {\n                angle = ik.maxAngle;\n              }\n              axis.crossVectors(effectorVec, targetVec);\n              axis.normalize();\n              q.setFromAxisAngle(axis, angle);\n              link.quaternion.multiply(q); // TODO: re-consider the limitation specification\n\n              if (limitation !== undefined) {\n                var c = link.quaternion.w;\n                if (c > 1.0) c = 1.0;\n                var c2 = math.sqrt(1 - c * c);\n                link.quaternion.set(limitation.x * c2, limitation.y * c2, limitation.z * c2, c);\n              }\n              if (rotationMin !== undefined) {\n                link.rotation.setFromVector3(link.rotation.toVector3(vector).max(rotationMin));\n              }\n              if (rotationMax !== undefined) {\n                link.rotation.setFromVector3(link.rotation.toVector3(vector).min(rotationMax));\n              }\n              link.updateMatrixWorld(true);\n              rotated = true;\n            }\n            if (!rotated) break;\n          }\n        }\n        return this;\n      };\n    }(),\n    /**\n     * Creates Helper\n     *\n     * @return {CCDIKHelper}\n     */\n    createHelper: function createHelper() {\n      return new CCDIKHelper(this.mesh, this.mesh.geometry.userData.MMD.iks);\n    },\n    // private methods\n    _valid: function _valid() {\n      var iks = this.iks;\n      var bones = this.mesh.skeleton.bones;\n      for (var i = 0, il = iks.length; i < il; i++) {\n        var ik = iks[i];\n        var effector = bones[ik.effector];\n        var links = ik.links;\n        var link0 = void 0,\n          link1 = void 0;\n        link0 = effector;\n        for (var j = 0, jl = links.length; j < jl; j++) {\n          link1 = bones[links[j].index];\n          if (link0.parent !== link1) {\n            console.warn(\"THREE.CCDIKSolver: bone \".concat(link0.name, \" is not the child of bone \").concat(link1.name));\n          }\n          link0 = link1;\n        }\n      }\n    }\n  };\n  /**\n   * Visualize IK bones\n   *\n   * @param {SkinnedMesh} mesh\n   * @param {Array<Object>} iks\n   */\n\n  function CCDIKHelper(mesh, iks) {\n    Object3D.call(this);\n    this.root = mesh;\n    this.iks = iks || [];\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.sphereGeometry = new SphereGeometry(0.25, 16, 8);\n    this.targetSphereMaterial = new MeshBasicMaterial({\n      color: new Color(0xff8888),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.effectorSphereMaterial = new MeshBasicMaterial({\n      color: new Color(0x88ff88),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.linkSphereMaterial = new MeshBasicMaterial({\n      color: new Color(0x8888ff),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.lineMaterial = new LineBasicMaterial({\n      color: new Color(0xff0000),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this._init();\n  }\n  CCDIKHelper.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: CCDIKHelper,\n    /**\n     * Updates IK bones visualization.\n     */\n    updateMatrixWorld: function () {\n      var matrix = new Matrix4();\n      var vector = new Vector3();\n      function getPosition(bone, matrixWorldInv) {\n        return vector.setFromMatrixPosition(bone.matrixWorld).applyMatrix4(matrixWorldInv);\n      }\n      function setPositionOfBoneToAttributeArray(array, index, bone, matrixWorldInv) {\n        var v = getPosition(bone, matrixWorldInv);\n        array[index * 3 + 0] = v.x;\n        array[index * 3 + 1] = v.y;\n        array[index * 3 + 2] = v.z;\n      }\n      return function updateMatrixWorld(force) {\n        var mesh = this.root;\n        if (this.visible) {\n          var offset = 0;\n          var iks = this.iks;\n          var bones = mesh.skeleton.bones;\n          matrix.copy(mesh.matrixWorld).invert();\n          for (var i = 0, il = iks.length; i < il; i++) {\n            var ik = iks[i];\n            var targetBone = bones[ik.target];\n            var effectorBone = bones[ik.effector];\n            var targetMesh = this.children[offset++];\n            var effectorMesh = this.children[offset++];\n            targetMesh.position.copy(getPosition(targetBone, matrix));\n            effectorMesh.position.copy(getPosition(effectorBone, matrix));\n            for (var j = 0, jl = ik.links.length; j < jl; j++) {\n              var link = ik.links[j];\n              var linkBone = bones[link.index];\n              var linkMesh = this.children[offset++];\n              linkMesh.position.copy(getPosition(linkBone, matrix));\n            }\n            var line = this.children[offset++];\n            var array = line.geometry.attributes.position.array;\n            setPositionOfBoneToAttributeArray(array, 0, targetBone, matrix);\n            setPositionOfBoneToAttributeArray(array, 1, effectorBone, matrix);\n            for (var _j = 0, _jl = ik.links.length; _j < _jl; _j++) {\n              var link = ik.links[_j];\n              var linkBone = bones[link.index];\n              setPositionOfBoneToAttributeArray(array, _j + 2, linkBone, matrix);\n            }\n            line.geometry.attributes.position.needsUpdate = true;\n          }\n        }\n        this.matrix.copy(mesh.matrixWorld);\n        Object3D.prototype.updateMatrixWorld.call(this, force);\n      };\n    }(),\n    // private method\n    _init: function _init() {\n      var scope = this;\n      var iks = this.iks;\n      function createLineGeometry(ik) {\n        var geometry = new BufferGeometry();\n        var vertices = new Float32Array((2 + ik.links.length) * 3);\n        geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n        return geometry;\n      }\n      function createTargetMesh() {\n        return new Mesh(scope.sphereGeometry, scope.targetSphereMaterial);\n      }\n      function createEffectorMesh() {\n        return new Mesh(scope.sphereGeometry, scope.effectorSphereMaterial);\n      }\n      function createLinkMesh() {\n        return new Mesh(scope.sphereGeometry, scope.linkSphereMaterial);\n      }\n      function createLine(ik) {\n        return new Line(createLineGeometry(ik), scope.lineMaterial);\n      }\n      for (var i = 0, il = iks.length; i < il; i++) {\n        var ik = iks[i];\n        this.add(createTargetMesh());\n        this.add(createEffectorMesh());\n        for (var j = 0, jl = ik.links.length; j < jl; j++) {\n          this.add(createLinkMesh());\n        }\n        this.add(createLine(ik));\n      }\n    }\n  });\n  return CCDIKSolver;\n}();\nexport { CCDIKSolver };","map":null,"metadata":{},"sourceType":"module"}