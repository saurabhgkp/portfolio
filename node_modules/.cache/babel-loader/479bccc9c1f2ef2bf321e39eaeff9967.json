{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { MaxMIPLevelNode } from './MaxMIPLevelNode.js';\nfunction SpecularMIPLevelNode(roughness, texture) {\n  TempNode.call(this, 'f');\n  this.roughness = roughness;\n  this.texture = texture;\n  this.maxMIPLevel = undefined;\n}\nSpecularMIPLevelNode.Nodes = function () {\n  var getSpecularMIPLevel = new FunctionNode([\n  // taken from here: http://casual-effects.blogspot.ca/2011/08/plausible-environment-lighting-in-two.html\n  'float getSpecularMIPLevel( const in float roughness, const in float maxMIPLevelScalar ) {', '\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );', '\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );',\n  // clamp to allowable LOD ranges.\n  '\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );', '}'].join('\\n'));\n  return {\n    getSpecularMIPLevel: getSpecularMIPLevel\n  };\n}();\nSpecularMIPLevelNode.prototype = Object.create(TempNode.prototype);\nSpecularMIPLevelNode.prototype.constructor = SpecularMIPLevelNode;\nSpecularMIPLevelNode.prototype.nodeType = 'SpecularMIPLevel';\nSpecularMIPLevelNode.prototype.setTexture = function (texture) {\n  this.texture = texture;\n  return this;\n};\nSpecularMIPLevelNode.prototype.generate = function (builder, output) {\n  if (builder.isShader('fragment')) {\n    this.maxMIPLevel = this.maxMIPLevel || new MaxMIPLevelNode();\n    this.maxMIPLevel.texture = this.texture;\n    var getSpecularMIPLevel = builder.include(SpecularMIPLevelNode.Nodes.getSpecularMIPLevel);\n    return builder.format(getSpecularMIPLevel + '( ' + this.roughness.build(builder, 'f') + ', ' + this.maxMIPLevel.build(builder, 'f') + ' )', this.type, output);\n  } else {\n    console.warn('THREE.SpecularMIPLevelNode is not compatible with ' + builder.shader + ' shader.');\n    return builder.format('0.0', this.type, output);\n  }\n};\nSpecularMIPLevelNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.texture = source.texture;\n  this.roughness = source.roughness;\n  return this;\n};\nSpecularMIPLevelNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.texture = this.texture;\n    data.roughness = this.roughness;\n  }\n  return data;\n};\nexport { SpecularMIPLevelNode };","map":null,"metadata":{},"sourceType":"module"}