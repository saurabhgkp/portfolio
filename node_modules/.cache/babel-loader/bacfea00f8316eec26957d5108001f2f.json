{"ast":null,"code":"import { Object3D } from 'three';\nimport { XRHandPrimitiveModel } from './XRHandPrimitiveModel.js';\nimport { XRHandOculusMeshModel } from './XRHandOculusMeshModel.js';\nfunction XRHandModel(controller) {\n  Object3D.call(this);\n  this.controller = controller;\n  this.motionController = null;\n  this.envMap = null;\n  this.mesh = null;\n}\nXRHandModel.prototype = Object.assign(Object.create(Object3D.prototype), {\n  constructor: XRHandModel,\n  updateMatrixWorld: function updateMatrixWorld(force) {\n    Object3D.prototype.updateMatrixWorld.call(this, force);\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n});\nvar XRHandModelFactory = function () {\n  function XRHandModelFactory() {\n    this.path = '';\n  }\n  XRHandModelFactory.prototype = {\n    constructor: XRHandModelFactory,\n    setPath: function setPath(path) {\n      this.path = path;\n      return this;\n    },\n    createHandModel: function createHandModel(controller, profile, options) {\n      var _this = this;\n      var handModel = new XRHandModel(controller);\n      controller.addEventListener('connected', function (event) {\n        var xrInputSource = event.data;\n        if (xrInputSource.hand && !handModel.motionController) {\n          handModel.visible = true;\n          handModel.xrInputSource = xrInputSource; // @todo Detect profile if not provided\n\n          if (profile === undefined || profile === 'spheres') {\n            handModel.motionController = new XRHandPrimitiveModel(handModel, controller, _this.path, xrInputSource.handedness, {\n              primitive: 'sphere'\n            });\n          } else if (profile === 'boxes') {\n            handModel.motionController = new XRHandPrimitiveModel(handModel, controller, _this.path, xrInputSource.handedness, {\n              primitive: 'box'\n            });\n          } else if (profile === 'oculus') {\n            handModel.motionController = new XRHandOculusMeshModel(handModel, controller, _this.path, xrInputSource.handedness, options);\n          }\n        }\n      });\n      controller.addEventListener('disconnected', function () {// handModel.motionController = null;\n        // handModel.remove( scene );\n        // scene = null;\n      });\n      return handModel;\n    }\n  };\n  return XRHandModelFactory;\n}();\nexport { XRHandModelFactory };","map":null,"metadata":{},"sourceType":"module"}