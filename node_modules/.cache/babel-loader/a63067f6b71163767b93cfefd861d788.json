{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Lexer = exports.LexerDefinitionErrorType = void 0;\n\nvar lexer_1 = require(\"./lexer\");\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar tokens_1 = require(\"./tokens\");\n\nvar lexer_errors_public_1 = require(\"../scan/lexer_errors_public\");\n\nvar reg_exp_parser_1 = require(\"./reg_exp_parser\");\n\nvar LexerDefinitionErrorType;\n\n(function (LexerDefinitionErrorType) {\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MISSING_PATTERN\"] = 0] = \"MISSING_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_PATTERN\"] = 1] = \"INVALID_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"EOI_ANCHOR_FOUND\"] = 2] = \"EOI_ANCHOR_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNSUPPORTED_FLAGS_FOUND\"] = 3] = \"UNSUPPORTED_FLAGS_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"DUPLICATE_PATTERNS_FOUND\"] = 4] = \"DUPLICATE_PATTERNS_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_GROUP_TYPE_FOUND\"] = 5] = \"INVALID_GROUP_TYPE_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"PUSH_MODE_DOES_NOT_EXIST\"] = 6] = \"PUSH_MODE_DOES_NOT_EXIST\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\"] = 7] = \"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\"] = 8] = \"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\"] = 9] = \"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\"] = 10] = \"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"SOI_ANCHOR_FOUND\"] = 11] = \"SOI_ANCHOR_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"EMPTY_MATCH_PATTERN\"] = 12] = \"EMPTY_MATCH_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"NO_LINE_BREAKS_FLAGS\"] = 13] = \"NO_LINE_BREAKS_FLAGS\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNREACHABLE_PATTERN\"] = 14] = \"UNREACHABLE_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"IDENTIFY_TERMINATOR\"] = 15] = \"IDENTIFY_TERMINATOR\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"CUSTOM_LINE_BREAK\"] = 16] = \"CUSTOM_LINE_BREAK\";\n})(LexerDefinitionErrorType = exports.LexerDefinitionErrorType || (exports.LexerDefinitionErrorType = {}));\n\nvar DEFAULT_LEXER_CONFIG = {\n  deferDefinitionErrorsHandling: false,\n  positionTracking: \"full\",\n  lineTerminatorsPattern: /\\n|\\r\\n?/g,\n  lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n  ensureOptimizations: false,\n  safeMode: false,\n  errorMessageProvider: lexer_errors_public_1.defaultLexerErrorProvider,\n  traceInitPerf: false,\n  skipValidations: false\n};\nObject.freeze(DEFAULT_LEXER_CONFIG);\n\nvar Lexer =\n/** @class */\nfunction () {\n  function Lexer(lexerDefinition, config) {\n    var _this = this;\n\n    if (config === void 0) {\n      config = DEFAULT_LEXER_CONFIG;\n    }\n\n    this.lexerDefinition = lexerDefinition;\n    this.lexerDefinitionErrors = [];\n    this.lexerDefinitionWarning = [];\n    this.patternIdxToConfig = {};\n    this.charCodeToPatternIdxToConfig = {};\n    this.modes = [];\n    this.emptyGroups = {};\n    this.config = undefined;\n    this.trackStartLines = true;\n    this.trackEndLines = true;\n    this.hasCustom = false;\n    this.canModeBeOptimized = {};\n\n    if (typeof config === \"boolean\") {\n      throw Error(\"The second argument to the Lexer constructor is now an ILexerConfig Object.\\n\" + \"a boolean 2nd argument is no longer supported\");\n    } // todo: defaults func?\n\n\n    this.config = utils_1.merge(DEFAULT_LEXER_CONFIG, config);\n    var traceInitVal = this.config.traceInitPerf;\n\n    if (traceInitVal === true) {\n      this.traceInitMaxIdent = Infinity;\n      this.traceInitPerf = true;\n    } else if (typeof traceInitVal === \"number\") {\n      this.traceInitMaxIdent = traceInitVal;\n      this.traceInitPerf = true;\n    }\n\n    this.traceInitIndent = -1;\n    this.TRACE_INIT(\"Lexer Constructor\", function () {\n      var actualDefinition;\n      var hasOnlySingleMode = true;\n\n      _this.TRACE_INIT(\"Lexer Config handling\", function () {\n        if (_this.config.lineTerminatorsPattern === DEFAULT_LEXER_CONFIG.lineTerminatorsPattern) {\n          // optimized built-in implementation for the defaults definition of lineTerminators\n          _this.config.lineTerminatorsPattern = lexer_1.LineTerminatorOptimizedTester;\n        } else {\n          if (_this.config.lineTerminatorCharacters === DEFAULT_LEXER_CONFIG.lineTerminatorCharacters) {\n            throw Error(\"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\" + \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\");\n          }\n        }\n\n        if (config.safeMode && config.ensureOptimizations) {\n          throw Error('\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.');\n        }\n\n        _this.trackStartLines = /full|onlyStart/i.test(_this.config.positionTracking);\n        _this.trackEndLines = /full/i.test(_this.config.positionTracking); // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n\n        if (utils_1.isArray(lexerDefinition)) {\n          actualDefinition = {\n            modes: {}\n          };\n          actualDefinition.modes[lexer_1.DEFAULT_MODE] = utils_1.cloneArr(lexerDefinition);\n          actualDefinition[lexer_1.DEFAULT_MODE] = lexer_1.DEFAULT_MODE;\n        } else {\n          // no conversion needed, input should already be a IMultiModeLexerDefinition\n          hasOnlySingleMode = false;\n          actualDefinition = utils_1.cloneObj(lexerDefinition);\n        }\n      });\n\n      if (_this.config.skipValidations === false) {\n        _this.TRACE_INIT(\"performRuntimeChecks\", function () {\n          _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat(lexer_1.performRuntimeChecks(actualDefinition, _this.trackStartLines, _this.config.lineTerminatorCharacters));\n        });\n\n        _this.TRACE_INIT(\"performWarningRuntimeChecks\", function () {\n          _this.lexerDefinitionWarning = _this.lexerDefinitionWarning.concat(lexer_1.performWarningRuntimeChecks(actualDefinition, _this.trackStartLines, _this.config.lineTerminatorCharacters));\n        });\n      } // for extra robustness to avoid throwing an none informative error message\n\n\n      actualDefinition.modes = actualDefinition.modes ? actualDefinition.modes : {}; // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n      // this transformation is to increase robustness in the case of partially invalid lexer definition.\n\n      utils_1.forEach(actualDefinition.modes, function (currModeValue, currModeName) {\n        actualDefinition.modes[currModeName] = utils_1.reject(currModeValue, function (currTokType) {\n          return utils_1.isUndefined(currTokType);\n        });\n      });\n      var allModeNames = utils_1.keys(actualDefinition.modes);\n      utils_1.forEach(actualDefinition.modes, function (currModDef, currModName) {\n        _this.TRACE_INIT(\"Mode: <\" + currModName + \"> processing\", function () {\n          _this.modes.push(currModName);\n\n          if (_this.config.skipValidations === false) {\n            _this.TRACE_INIT(\"validatePatterns\", function () {\n              _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat(lexer_1.validatePatterns(currModDef, allModeNames));\n            });\n          } // If definition errors were encountered, the analysis phase may fail unexpectedly/\n          // Considering a lexer with definition errors may never be used, there is no point\n          // to performing the analysis anyhow...\n\n\n          if (utils_1.isEmpty(_this.lexerDefinitionErrors)) {\n            tokens_1.augmentTokenTypes(currModDef);\n            var currAnalyzeResult_1;\n\n            _this.TRACE_INIT(\"analyzeTokenTypes\", function () {\n              currAnalyzeResult_1 = lexer_1.analyzeTokenTypes(currModDef, {\n                lineTerminatorCharacters: _this.config.lineTerminatorCharacters,\n                positionTracking: config.positionTracking,\n                ensureOptimizations: config.ensureOptimizations,\n                safeMode: config.safeMode,\n                tracer: _this.TRACE_INIT.bind(_this)\n              });\n            });\n\n            _this.patternIdxToConfig[currModName] = currAnalyzeResult_1.patternIdxToConfig;\n            _this.charCodeToPatternIdxToConfig[currModName] = currAnalyzeResult_1.charCodeToPatternIdxToConfig;\n            _this.emptyGroups = utils_1.merge(_this.emptyGroups, currAnalyzeResult_1.emptyGroups);\n            _this.hasCustom = currAnalyzeResult_1.hasCustom || _this.hasCustom;\n            _this.canModeBeOptimized[currModName] = currAnalyzeResult_1.canBeOptimized;\n          }\n        });\n      });\n      _this.defaultMode = actualDefinition.defaultMode;\n\n      if (!utils_1.isEmpty(_this.lexerDefinitionErrors) && !_this.config.deferDefinitionErrorsHandling) {\n        var allErrMessages = utils_1.map(_this.lexerDefinitionErrors, function (error) {\n          return error.message;\n        });\n        var allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n        throw new Error(\"Errors detected in definition of Lexer:\\n\" + allErrMessagesString);\n      } // Only print warning if there are no errors, This will avoid pl\n\n\n      utils_1.forEach(_this.lexerDefinitionWarning, function (warningDescriptor) {\n        utils_1.PRINT_WARNING(warningDescriptor.message);\n      });\n\n      _this.TRACE_INIT(\"Choosing sub-methods implementations\", function () {\n        // Choose the relevant internal implementations for this specific parser.\n        // These implementations should be in-lined by the JavaScript engine\n        // to provide optimal performance in each scenario.\n        if (lexer_1.SUPPORT_STICKY) {\n          _this.chopInput = utils_1.IDENTITY;\n          _this.match = _this.matchWithTest;\n        } else {\n          _this.updateLastIndex = utils_1.NOOP;\n          _this.match = _this.matchWithExec;\n        }\n\n        if (hasOnlySingleMode) {\n          _this.handleModes = utils_1.NOOP;\n        }\n\n        if (_this.trackStartLines === false) {\n          _this.computeNewColumn = utils_1.IDENTITY;\n        }\n\n        if (_this.trackEndLines === false) {\n          _this.updateTokenEndLineColumnLocation = utils_1.NOOP;\n        }\n\n        if (/full/i.test(_this.config.positionTracking)) {\n          _this.createTokenInstance = _this.createFullToken;\n        } else if (/onlyStart/i.test(_this.config.positionTracking)) {\n          _this.createTokenInstance = _this.createStartOnlyToken;\n        } else if (/onlyOffset/i.test(_this.config.positionTracking)) {\n          _this.createTokenInstance = _this.createOffsetOnlyToken;\n        } else {\n          throw Error(\"Invalid <positionTracking> config option: \\\"\" + _this.config.positionTracking + \"\\\"\");\n        }\n\n        if (_this.hasCustom) {\n          _this.addToken = _this.addTokenUsingPush;\n          _this.handlePayload = _this.handlePayloadWithCustom;\n        } else {\n          _this.addToken = _this.addTokenUsingMemberAccess;\n          _this.handlePayload = _this.handlePayloadNoCustom;\n        }\n      });\n\n      _this.TRACE_INIT(\"Failed Optimization Warnings\", function () {\n        var unOptimizedModes = utils_1.reduce(_this.canModeBeOptimized, function (cannotBeOptimized, canBeOptimized, modeName) {\n          if (canBeOptimized === false) {\n            cannotBeOptimized.push(modeName);\n          }\n\n          return cannotBeOptimized;\n        }, []);\n\n        if (config.ensureOptimizations && !utils_1.isEmpty(unOptimizedModes)) {\n          throw Error(\"Lexer Modes: < \" + unOptimizedModes.join(\", \") + \" > cannot be optimized.\\n\" + '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' + \"\\t Or inspect the console log for details on how to resolve these issues.\");\n        }\n      });\n\n      _this.TRACE_INIT(\"clearRegExpParserCache\", function () {\n        reg_exp_parser_1.clearRegExpParserCache();\n      });\n\n      _this.TRACE_INIT(\"toFastProperties\", function () {\n        utils_1.toFastProperties(_this);\n      });\n    });\n  }\n\n  Lexer.prototype.tokenize = function (text, initialMode) {\n    if (initialMode === void 0) {\n      initialMode = this.defaultMode;\n    }\n\n    if (!utils_1.isEmpty(this.lexerDefinitionErrors)) {\n      var allErrMessages = utils_1.map(this.lexerDefinitionErrors, function (error) {\n        return error.message;\n      });\n      var allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n      throw new Error(\"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" + allErrMessagesString);\n    }\n\n    var lexResult = this.tokenizeInternal(text, initialMode);\n    return lexResult;\n  }; // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n  // This is intentional due to performance considerations.\n\n\n  Lexer.prototype.tokenizeInternal = function (text, initialMode) {\n    var _this = this;\n\n    var i, j, matchAltImage, longerAltIdx, matchedImage, payload, altPayload, imageLength, group, tokType, newToken, errLength, droppedChar, msg, match;\n    var orgText = text;\n    var orgLength = orgText.length;\n    var offset = 0;\n    var matchedTokensIndex = 0; // initializing the tokensArray to the \"guessed\" size.\n    // guessing too little will still reduce the number of array re-sizes on pushes.\n    // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n    // but would still have a faster runtime by avoiding (All but one) array resizing.\n\n    var guessedNumberOfTokens = this.hasCustom ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n    : Math.floor(text.length / 10);\n    var matchedTokens = new Array(guessedNumberOfTokens);\n    var errors = [];\n    var line = this.trackStartLines ? 1 : undefined;\n    var column = this.trackStartLines ? 1 : undefined;\n    var groups = lexer_1.cloneEmptyGroups(this.emptyGroups);\n    var trackLines = this.trackStartLines;\n    var lineTerminatorPattern = this.config.lineTerminatorsPattern;\n    var currModePatternsLength = 0;\n    var patternIdxToConfig = [];\n    var currCharCodeToPatternIdxToConfig = [];\n    var modeStack = [];\n    var emptyArray = [];\n    Object.freeze(emptyArray);\n    var getPossiblePatterns = undefined;\n\n    function getPossiblePatternsSlow() {\n      return patternIdxToConfig;\n    }\n\n    function getPossiblePatternsOptimized(charCode) {\n      var optimizedCharIdx = lexer_1.charCodeToOptimizedIndex(charCode);\n      var possiblePatterns = currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n\n      if (possiblePatterns === undefined) {\n        return emptyArray;\n      } else {\n        return possiblePatterns;\n      }\n    }\n\n    var pop_mode = function (popToken) {\n      // TODO: perhaps avoid this error in the edge case there is no more input?\n      if (modeStack.length === 1 && // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n      // So no error should occur.\n      popToken.tokenType.PUSH_MODE === undefined) {\n        // if we try to pop the last mode there lexer will no longer have ANY mode.\n        // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n        var msg_1 = _this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(popToken);\n\n        errors.push({\n          offset: popToken.startOffset,\n          line: popToken.startLine !== undefined ? popToken.startLine : undefined,\n          column: popToken.startColumn !== undefined ? popToken.startColumn : undefined,\n          length: popToken.image.length,\n          message: msg_1\n        });\n      } else {\n        modeStack.pop();\n        var newMode = utils_1.last(modeStack);\n        patternIdxToConfig = _this.patternIdxToConfig[newMode];\n        currCharCodeToPatternIdxToConfig = _this.charCodeToPatternIdxToConfig[newMode];\n        currModePatternsLength = patternIdxToConfig.length;\n        var modeCanBeOptimized = _this.canModeBeOptimized[newMode] && _this.config.safeMode === false;\n\n        if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n          getPossiblePatterns = getPossiblePatternsOptimized;\n        } else {\n          getPossiblePatterns = getPossiblePatternsSlow;\n        }\n      }\n    };\n\n    function push_mode(newMode) {\n      modeStack.push(newMode);\n      currCharCodeToPatternIdxToConfig = this.charCodeToPatternIdxToConfig[newMode];\n      patternIdxToConfig = this.patternIdxToConfig[newMode];\n      currModePatternsLength = patternIdxToConfig.length;\n      currModePatternsLength = patternIdxToConfig.length;\n      var modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n      if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n        getPossiblePatterns = getPossiblePatternsOptimized;\n      } else {\n        getPossiblePatterns = getPossiblePatternsSlow;\n      }\n    } // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n    // seem to matter performance wise.\n\n\n    push_mode.call(this, initialMode);\n    var currConfig;\n\n    while (offset < orgLength) {\n      matchedImage = null;\n      var nextCharCode = orgText.charCodeAt(offset);\n      var chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n      var chosenPatternsLength = chosenPatternIdxToConfig.length;\n\n      for (i = 0; i < chosenPatternsLength; i++) {\n        currConfig = chosenPatternIdxToConfig[i];\n        var currPattern = currConfig.pattern;\n        payload = null; // manually in-lined because > 600 chars won't be in-lined in V8\n\n        var singleCharCode = currConfig.short;\n\n        if (singleCharCode !== false) {\n          if (nextCharCode === singleCharCode) {\n            // single character string\n            matchedImage = currPattern;\n          }\n        } else if (currConfig.isCustom === true) {\n          match = currPattern.exec(orgText, offset, matchedTokens, groups);\n\n          if (match !== null) {\n            matchedImage = match[0];\n\n            if (match.payload !== undefined) {\n              payload = match.payload;\n            }\n          } else {\n            matchedImage = null;\n          }\n        } else {\n          this.updateLastIndex(currPattern, offset);\n          matchedImage = this.match(currPattern, text, offset);\n        }\n\n        if (matchedImage !== null) {\n          // even though this pattern matched we must try a another longer alternative.\n          // this can be used to prioritize keywords over identifiers\n          longerAltIdx = currConfig.longerAlt;\n\n          if (longerAltIdx !== undefined) {\n            // TODO: micro optimize, avoid extra prop access\n            // by saving/linking longerAlt on the original config?\n            var longerAltConfig = patternIdxToConfig[longerAltIdx];\n            var longerAltPattern = longerAltConfig.pattern;\n            altPayload = null; // single Char can never be a longer alt so no need to test it.\n            // manually in-lined because > 600 chars won't be in-lined in V8\n\n            if (longerAltConfig.isCustom === true) {\n              match = longerAltPattern.exec(orgText, offset, matchedTokens, groups);\n\n              if (match !== null) {\n                matchAltImage = match[0];\n\n                if (match.payload !== undefined) {\n                  altPayload = match.payload;\n                }\n              } else {\n                matchAltImage = null;\n              }\n            } else {\n              this.updateLastIndex(longerAltPattern, offset);\n              matchAltImage = this.match(longerAltPattern, text, offset);\n            }\n\n            if (matchAltImage && matchAltImage.length > matchedImage.length) {\n              matchedImage = matchAltImage;\n              payload = altPayload;\n              currConfig = longerAltConfig;\n            }\n          }\n\n          break;\n        }\n      } // successful match\n\n\n      if (matchedImage !== null) {\n        imageLength = matchedImage.length;\n        group = currConfig.group;\n\n        if (group !== undefined) {\n          tokType = currConfig.tokenTypeIdx; // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n          // createFullToken method\n\n          newToken = this.createTokenInstance(matchedImage, offset, tokType, currConfig.tokenType, line, column, imageLength);\n          this.handlePayload(newToken, payload); // TODO: optimize NOOP in case there are no special groups?\n\n          if (group === false) {\n            matchedTokensIndex = this.addToken(matchedTokens, matchedTokensIndex, newToken);\n          } else {\n            groups[group].push(newToken);\n          }\n        }\n\n        text = this.chopInput(text, imageLength);\n        offset = offset + imageLength; // TODO: with newlines the column may be assigned twice\n\n        column = this.computeNewColumn(column, imageLength);\n\n        if (trackLines === true && currConfig.canLineTerminator === true) {\n          var numOfLTsInMatch = 0;\n          var foundTerminator = void 0;\n          var lastLTEndOffset = void 0;\n          lineTerminatorPattern.lastIndex = 0;\n\n          do {\n            foundTerminator = lineTerminatorPattern.test(matchedImage);\n\n            if (foundTerminator === true) {\n              lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;\n              numOfLTsInMatch++;\n            }\n          } while (foundTerminator === true);\n\n          if (numOfLTsInMatch !== 0) {\n            line = line + numOfLTsInMatch;\n            column = imageLength - lastLTEndOffset;\n            this.updateTokenEndLineColumnLocation(newToken, group, lastLTEndOffset, numOfLTsInMatch, line, column, imageLength);\n          }\n        } // will be NOOP if no modes present\n\n\n        this.handleModes(currConfig, pop_mode, push_mode, newToken);\n      } else {\n        // error recovery, drop characters until we identify a valid token's start point\n        var errorStartOffset = offset;\n        var errorLine = line;\n        var errorColumn = column;\n        var foundResyncPoint = false;\n\n        while (!foundResyncPoint && offset < orgLength) {\n          // drop chars until we succeed in matching something\n          droppedChar = orgText.charCodeAt(offset); // Identity Func (when sticky flag is enabled)\n\n          text = this.chopInput(text, 1);\n          offset++;\n\n          for (j = 0; j < currModePatternsLength; j++) {\n            var currConfig_1 = patternIdxToConfig[j];\n            var currPattern = currConfig_1.pattern; // manually in-lined because > 600 chars won't be in-lined in V8\n\n            var singleCharCode = currConfig_1.short;\n\n            if (singleCharCode !== false) {\n              if (orgText.charCodeAt(offset) === singleCharCode) {\n                // single character string\n                foundResyncPoint = true;\n              }\n            } else if (currConfig_1.isCustom === true) {\n              foundResyncPoint = currPattern.exec(orgText, offset, matchedTokens, groups) !== null;\n            } else {\n              this.updateLastIndex(currPattern, offset);\n              foundResyncPoint = currPattern.exec(text) !== null;\n            }\n\n            if (foundResyncPoint === true) {\n              break;\n            }\n          }\n        }\n\n        errLength = offset - errorStartOffset; // at this point we either re-synced or reached the end of the input text\n\n        msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(orgText, errorStartOffset, errLength, errorLine, errorColumn);\n        errors.push({\n          offset: errorStartOffset,\n          line: errorLine,\n          column: errorColumn,\n          length: errLength,\n          message: msg\n        });\n      }\n    } // if we do have custom patterns which push directly into the\n    // TODO: custom tokens should not push directly??\n\n\n    if (!this.hasCustom) {\n      // if we guessed a too large size for the tokens array this will shrink it to the right size.\n      matchedTokens.length = matchedTokensIndex;\n    }\n\n    return {\n      tokens: matchedTokens,\n      groups: groups,\n      errors: errors\n    };\n  };\n\n  Lexer.prototype.handleModes = function (config, pop_mode, push_mode, newToken) {\n    if (config.pop === true) {\n      // need to save the PUSH_MODE property as if the mode is popped\n      // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n      var pushMode = config.push;\n      pop_mode(newToken);\n\n      if (pushMode !== undefined) {\n        push_mode.call(this, pushMode);\n      }\n    } else if (config.push !== undefined) {\n      push_mode.call(this, config.push);\n    }\n  };\n\n  Lexer.prototype.chopInput = function (text, length) {\n    return text.substring(length);\n  };\n\n  Lexer.prototype.updateLastIndex = function (regExp, newLastIndex) {\n    regExp.lastIndex = newLastIndex;\n  }; // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n\n\n  Lexer.prototype.updateTokenEndLineColumnLocation = function (newToken, group, lastLTIdx, numOfLTsInMatch, line, column, imageLength) {\n    var lastCharIsLT, fixForEndingInLT;\n\n    if (group !== undefined) {\n      // a none skipped multi line Token, need to update endLine/endColumn\n      lastCharIsLT = lastLTIdx === imageLength - 1;\n      fixForEndingInLT = lastCharIsLT ? -1 : 0;\n\n      if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n        // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n        newToken.endLine = line + fixForEndingInLT; // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n        // inclusive to exclusive range.\n\n        newToken.endColumn = column - 1 + -fixForEndingInLT;\n      } // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n\n    }\n  };\n\n  Lexer.prototype.computeNewColumn = function (oldColumn, imageLength) {\n    return oldColumn + imageLength;\n  }; // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n\n  /* istanbul ignore next - place holder */\n\n\n  Lexer.prototype.createTokenInstance = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return null;\n  };\n\n  Lexer.prototype.createOffsetOnlyToken = function (image, startOffset, tokenTypeIdx, tokenType) {\n    return {\n      image: image,\n      startOffset: startOffset,\n      tokenTypeIdx: tokenTypeIdx,\n      tokenType: tokenType\n    };\n  };\n\n  Lexer.prototype.createStartOnlyToken = function (image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn) {\n    return {\n      image: image,\n      startOffset: startOffset,\n      startLine: startLine,\n      startColumn: startColumn,\n      tokenTypeIdx: tokenTypeIdx,\n      tokenType: tokenType\n    };\n  };\n\n  Lexer.prototype.createFullToken = function (image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn, imageLength) {\n    return {\n      image: image,\n      startOffset: startOffset,\n      endOffset: startOffset + imageLength - 1,\n      startLine: startLine,\n      endLine: startLine,\n      startColumn: startColumn,\n      endColumn: startColumn + imageLength - 1,\n      tokenTypeIdx: tokenTypeIdx,\n      tokenType: tokenType\n    };\n  }; // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n\n  /* istanbul ignore next - place holder */\n\n\n  Lexer.prototype.addToken = function (tokenVector, index, tokenToAdd) {\n    return 666;\n  };\n\n  Lexer.prototype.addTokenUsingPush = function (tokenVector, index, tokenToAdd) {\n    tokenVector.push(tokenToAdd);\n    return index;\n  };\n\n  Lexer.prototype.addTokenUsingMemberAccess = function (tokenVector, index, tokenToAdd) {\n    tokenVector[index] = tokenToAdd;\n    index++;\n    return index;\n  }; // Place holder, will be replaced by the correct variant according to the hasCustom flag option at runtime.\n\n  /* istanbul ignore next - place holder */\n\n\n  Lexer.prototype.handlePayload = function (token, payload) {};\n\n  Lexer.prototype.handlePayloadNoCustom = function (token, payload) {};\n\n  Lexer.prototype.handlePayloadWithCustom = function (token, payload) {\n    if (payload !== null) {\n      token.payload = payload;\n    }\n  };\n  /* istanbul ignore next - place holder to be replaced with chosen alternative at runtime */\n\n\n  Lexer.prototype.match = function (pattern, text, offset) {\n    return null;\n  };\n\n  Lexer.prototype.matchWithTest = function (pattern, text, offset) {\n    var found = pattern.test(text);\n\n    if (found === true) {\n      return text.substring(offset, pattern.lastIndex);\n    }\n\n    return null;\n  };\n\n  Lexer.prototype.matchWithExec = function (pattern, text) {\n    var regExpArray = pattern.exec(text);\n    return regExpArray !== null ? regExpArray[0] : regExpArray;\n  }; // Duplicated from the parser's perf trace trait to allow future extraction\n  // of the lexer to a separate package.\n\n\n  Lexer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(indent + \"--> <\" + phaseDesc + \">\");\n      }\n\n      var _a = utils_1.timer(phaseImpl),\n          time = _a.time,\n          value = _a.value;\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n\n\n      var traceMethod = time > 10 ? console.warn : console.log;\n\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(indent + \"<-- <\" + phaseDesc + \"> time: \" + time + \"ms\");\n      }\n\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n\n  Lexer.SKIPPED = \"This marks a skipped Token pattern, this means each token identified by it will\" + \"be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\n  Lexer.NA = /NOT_APPLICABLE/;\n  return Lexer;\n}();\n\nexports.Lexer = Lexer;","map":{"version":3,"mappings":"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","names":["LexerDefinitionErrorType","exports","DEFAULT_LEXER_CONFIG","deferDefinitionErrorsHandling","positionTracking","lineTerminatorsPattern","lineTerminatorCharacters","ensureOptimizations","safeMode","errorMessageProvider","lexer_errors_public_1","traceInitPerf","skipValidations","Object","freeze","lexerDefinition","config","undefined","Error","utils_1","traceInitVal","traceInitMaxIdent","Infinity","traceInitIndent","TRACE_INIT","actualDefinition","hasOnlySingleMode","_this","lexer_1","trackStartLines","test","trackEndLines","modes","lexerDefinitionErrors","concat","lexerDefinitionWarning","currModeValue","currModeName","currTokType","allModeNames","currModDef","currModName","push","tokens_1","currAnalyzeResult_1","tracer","bind","patternIdxToConfig","charCodeToPatternIdxToConfig","emptyGroups","hasCustom","canModeBeOptimized","canBeOptimized","defaultMode","allErrMessages","error","message","allErrMessagesString","join","warningDescriptor","chopInput","match","matchWithTest","updateLastIndex","matchWithExec","handleModes","computeNewColumn","updateTokenEndLineColumnLocation","createTokenInstance","createFullToken","createStartOnlyToken","createOffsetOnlyToken","addToken","addTokenUsingPush","handlePayload","handlePayloadWithCustom","addTokenUsingMemberAccess","handlePayloadNoCustom","unOptimizedModes","cannotBeOptimized","modeName","reg_exp_parser_1","Lexer","text","initialMode","lexResult","tokenizeInternal","i","j","matchAltImage","longerAltIdx","matchedImage","payload","altPayload","imageLength","group","tokType","newToken","errLength","droppedChar","msg","orgText","orgLength","length","offset","matchedTokensIndex","guessedNumberOfTokens","Math","floor","matchedTokens","Array","errors","line","column","groups","trackLines","lineTerminatorPattern","currModePatternsLength","currCharCodeToPatternIdxToConfig","modeStack","emptyArray","getPossiblePatterns","getPossiblePatternsSlow","getPossiblePatternsOptimized","charCode","optimizedCharIdx","possiblePatterns","pop_mode","popToken","tokenType","PUSH_MODE","msg_1","buildUnableToPopLexerModeMessage","startOffset","startLine","startColumn","image","pop","newMode","modeCanBeOptimized","push_mode","call","currConfig","nextCharCode","charCodeAt","chosenPatternIdxToConfig","chosenPatternsLength","currPattern","pattern","singleCharCode","short","isCustom","exec","longerAlt","longerAltConfig","longerAltPattern","tokenTypeIdx","canLineTerminator","numOfLTsInMatch","foundTerminator","lastLTEndOffset","lastIndex","errorStartOffset","errorLine","errorColumn","foundResyncPoint","currConfig_1","buildUnexpectedCharactersMessage","tokens","pushMode","substring","regExp","newLastIndex","lastLTIdx","lastCharIsLT","fixForEndingInLT","endLine","endColumn","oldColumn","args","endOffset","tokenVector","index","tokenToAdd","token","found","regExpArray","phaseDesc","phaseImpl","indent","console","log","time","value","traceMethod","warn"],"sourceRoot":"","sources":["../../../src/scan/lexer_public.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}