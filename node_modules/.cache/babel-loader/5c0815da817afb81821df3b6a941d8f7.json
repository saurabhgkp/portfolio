{"ast":null,"code":"import { Vector2, WebGLRenderTarget, OrthographicCamera, Scene, Mesh, PlaneGeometry, LinearFilter, RGBAFormat } from 'three';\nimport { NodeMaterial } from '../materials/NodeMaterial.js';\nimport { ScreenNode } from '../inputs/ScreenNode.js';\nfunction NodePostProcessing(renderer, renderTarget) {\n  if (renderTarget === undefined) {\n    var parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBAFormat\n    };\n    var size = renderer.getDrawingBufferSize(new Vector2());\n    renderTarget = new WebGLRenderTarget(size.width, size.height, parameters);\n  }\n  this.renderer = renderer;\n  this.renderTarget = renderTarget;\n  this.output = new ScreenNode();\n  this.material = new NodeMaterial();\n  this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  this.scene = new Scene();\n  this.quad = new Mesh(new PlaneGeometry(2, 2), this.material);\n  this.quad.frustumCulled = false; // Avoid getting clipped\n\n  this.scene.add(this.quad);\n  this.needsUpdate = true;\n}\nNodePostProcessing.prototype = {\n  constructor: NodePostProcessing,\n  render: function render(scene, camera, frame) {\n    if (this.needsUpdate) {\n      this.material.dispose();\n      this.material.fragment.value = this.output;\n      this.material.build();\n      if (this.material.uniforms.renderTexture) {\n        this.material.uniforms.renderTexture.value = this.renderTarget.texture;\n      }\n      this.needsUpdate = false;\n    }\n    frame.setRenderer(this.renderer).setRenderTexture(this.renderTarget.texture);\n    this.renderer.setRenderTarget(this.renderTarget);\n    this.renderer.render(scene, camera);\n    frame.updateNode(this.material);\n    this.renderer.setRenderTarget(null);\n    this.renderer.render(this.scene, this.camera);\n  },\n  setPixelRatio: function setPixelRatio(value) {\n    this.renderer.setPixelRatio(value);\n    var size = this.renderer.getSize(new Vector2());\n    this.setSize(size.width, size.height);\n  },\n  setSize: function setSize(width, height) {\n    var pixelRatio = this.renderer.getPixelRatio();\n    this.renderTarget.setSize(width * pixelRatio, height * pixelRatio);\n    this.renderer.setSize(width, height);\n  },\n  copy: function copy(source) {\n    this.output = source.output;\n    return this;\n  },\n  toJSON: function toJSON(meta) {\n    var isRootObject = meta === undefined || typeof meta === 'string';\n    if (isRootObject) {\n      meta = {\n        nodes: {}\n      };\n    }\n    if (meta && !meta.post) meta.post = {};\n    if (!meta.post[this.uuid]) {\n      var data = {};\n      data.uuid = this.uuid;\n      data.type = 'NodePostProcessing';\n      meta.post[this.uuid] = data;\n      if (this.name !== '') data.name = this.name;\n      if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData;\n      data.output = this.output.toJSON(meta).uuid;\n    }\n    meta.post = this.uuid;\n    return meta;\n  }\n};\nexport { NodePostProcessing };","map":null,"metadata":{},"sourceType":"module"}