{"ast":null,"code":"import { BackSide } from 'three';\nimport { TempNode } from '../core/TempNode.js';\nimport { Vector2Node } from '../inputs/Vector2Node.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { UVNode } from '../accessors/UVNode.js';\nimport { NormalNode } from '../accessors/NormalNode.js';\nimport { PositionNode } from '../accessors/PositionNode.js';\nfunction NormalMapNode(value, scale) {\n  TempNode.call(this, 'v3');\n  this.value = value;\n  this.scale = scale || new Vector2Node(1, 1);\n}\nNormalMapNode.Nodes = function () {\n  var perturbNormal2Arb = new FunctionNode( // Per-Pixel Tangent Space Normal Mapping\n  // http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\n  \"vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 map, vec2 vUv, vec2 normalScale ) {\\n\\n\\t\\t// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\\n\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\n\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s ); // we do not care about the magnitude\\n\\n\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\n\\t\\tvec3 mapN = map * 2.0 - 1.0;\\n\\n\\t\\tmapN.xy *= normalScale;\\n\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\n\\t\\t\\t// Workaround for Adreno GPUs gl_FrontFacing bug. See #15850 and #10331\\n\\n\\t\\t\\tif ( dot( cross( S, T ), N ) < 0.0 ) mapN.xy *= - 1.0;\\n\\n\\t\\t#else\\n\\n\\t\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\n\\t\\t#endif\\n\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\n\\t}\", null, {\n    derivatives: true\n  });\n  return {\n    perturbNormal2Arb: perturbNormal2Arb\n  };\n}();\nNormalMapNode.prototype = Object.create(TempNode.prototype);\nNormalMapNode.prototype.constructor = NormalMapNode;\nNormalMapNode.prototype.nodeType = 'NormalMap';\nNormalMapNode.prototype.generate = function (builder, output) {\n  if (builder.isShader('fragment')) {\n    var perturbNormal2Arb = builder.include(NormalMapNode.Nodes.perturbNormal2Arb);\n    this.normal = this.normal || new NormalNode();\n    this.position = this.position || new PositionNode(PositionNode.VIEW);\n    this.uv = this.uv || new UVNode();\n    var scale = this.scale.build(builder, 'v2');\n    if (builder.material.side === BackSide) {\n      scale = '-' + scale;\n    }\n    return builder.format(perturbNormal2Arb + '( -' + this.position.build(builder, 'v3') + ', ' + this.normal.build(builder, 'v3') + ', ' + this.value.build(builder, 'v3') + ', ' + this.uv.build(builder, 'v2') + ', ' + scale + ' )', this.getType(builder), output);\n  } else {\n    console.warn('THREE.NormalMapNode is not compatible with ' + builder.shader + ' shader.');\n    return builder.format('vec3( 0.0 )', this.getType(builder), output);\n  }\n};\nNormalMapNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.value = source.value;\n  this.scale = source.scale;\n  return this;\n};\nNormalMapNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.value = this.value.toJSON(meta).uuid;\n    data.scale = this.scale.toJSON(meta).uuid;\n  }\n  return data;\n};\nexport { NormalMapNode };","map":null,"metadata":{},"sourceType":"module"}