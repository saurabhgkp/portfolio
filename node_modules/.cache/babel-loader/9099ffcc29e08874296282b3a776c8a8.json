{"ast":null,"code":"import { TempNode } from './TempNode.js';\nvar declarationRegexp = /^([a-z_0-9]+)\\s([a-z_0-9]+)\\s?\\=?\\s?(.*?)(\\;|$)/i;\nfunction ConstNode(src, useDefine) {\n  TempNode.call(this);\n  this.parse(src || ConstNode.PI, useDefine);\n}\nConstNode.PI = 'PI';\nConstNode.PI2 = 'PI2';\nConstNode.RECIPROCAL_PI = 'RECIPROCAL_PI';\nConstNode.RECIPROCAL_PI2 = 'RECIPROCAL_PI2';\nConstNode.LOG2 = 'LOG2';\nConstNode.EPSILON = 'EPSILON';\nConstNode.prototype = Object.create(TempNode.prototype);\nConstNode.prototype.constructor = ConstNode;\nConstNode.prototype.nodeType = 'Const';\nConstNode.prototype.getType = function (builder) {\n  return builder.getTypeByFormat(this.type);\n};\nConstNode.prototype.parse = function (src, useDefine) {\n  this.src = src || '';\n  var name,\n    type,\n    value = '';\n  var match = this.src.match(declarationRegexp);\n  this.useDefine = useDefine || this.src.charAt(0) === '#';\n  if (match && match.length > 1) {\n    type = match[1];\n    name = match[2];\n    value = match[3];\n  } else {\n    name = this.src;\n    type = 'f';\n  }\n  this.name = name;\n  this.type = type;\n  this.value = value;\n};\nConstNode.prototype.build = function (builder, output) {\n  if (output === 'source') {\n    if (this.value) {\n      if (this.useDefine) {\n        return '#define ' + this.name + ' ' + this.value;\n      }\n      return 'const ' + this.type + ' ' + this.name + ' = ' + this.value + ';';\n    } else if (this.useDefine) {\n      return this.src;\n    }\n  } else {\n    builder.include(this);\n    return builder.format(this.name, this.getType(builder), output);\n  }\n};\nConstNode.prototype.generate = function (builder, output) {\n  return builder.format(this.name, this.getType(builder), output);\n};\nConstNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.parse(source.src, source.useDefine);\n  return this;\n};\nConstNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.src = this.src;\n    if (data.useDefine === true) data.useDefine = true;\n  }\n  return data;\n};\nexport { ConstNode };","map":null,"metadata":{},"sourceType":"module"}