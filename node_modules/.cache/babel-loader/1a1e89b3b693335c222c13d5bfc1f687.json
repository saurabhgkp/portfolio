{"ast":null,"code":"import { UniformsUtils, ShaderMaterial } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { FilmShader } from '../shaders/FilmShader.js';\nvar FilmPass = function FilmPass(noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale) {\n  if (FilmShader === undefined) console.error('THREE.FilmPass relies on FilmShader');\n  var shader = FilmShader;\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  if (grayscale !== undefined) this.uniforms.grayscale.value = grayscale;\n  if (noiseIntensity !== undefined) this.uniforms.nIntensity.value = noiseIntensity;\n  if (scanlinesIntensity !== undefined) this.uniforms.sIntensity.value = scanlinesIntensity;\n  if (scanlinesCount !== undefined) this.uniforms.sCount.value = scanlinesCount;\n  this.fsQuad = new FullScreenQuad(this.material);\n};\nFilmPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: FilmPass,\n  render: function render(renderer, writeBuffer, readBuffer, deltaTime\n  /*, maskActive */) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['time'].value += deltaTime;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n});\nexport { FilmPass };","map":null,"metadata":{},"sourceType":"module"}