{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\nfunction CondNode(a, b, op, ifNode, elseNode) {\n  TempNode.call(this);\n  this.a = a;\n  this.b = b;\n  this.op = op;\n  this.ifNode = ifNode;\n  this.elseNode = elseNode;\n}\nCondNode.EQUAL = '==';\nCondNode.NOT_EQUAL = '!=';\nCondNode.GREATER = '>';\nCondNode.GREATER_EQUAL = '>=';\nCondNode.LESS = '<';\nCondNode.LESS_EQUAL = '<=';\nCondNode.AND = '&&';\nCondNode.OR = '||';\nCondNode.prototype = Object.create(TempNode.prototype);\nCondNode.prototype.constructor = CondNode;\nCondNode.prototype.nodeType = 'Cond';\nCondNode.prototype.getType = function (builder) {\n  if (this.ifNode) {\n    var ifType = this.ifNode.getType(builder);\n    var elseType = this.elseNode.getType(builder);\n    if (builder.getTypeLength(elseType) > builder.getTypeLength(ifType)) {\n      return elseType;\n    }\n    return ifType;\n  }\n  return 'b';\n};\nCondNode.prototype.getCondType = function (builder) {\n  if (builder.getTypeLength(this.b.getType(builder)) > builder.getTypeLength(this.a.getType(builder))) {\n    return this.b.getType(builder);\n  }\n  return this.a.getType(builder);\n};\nCondNode.prototype.generate = function (builder, output) {\n  var type = this.getType(builder),\n    condType = this.getCondType(builder),\n    a = this.a.build(builder, condType),\n    b = this.b.build(builder, condType),\n    code;\n  if (this.ifNode) {\n    var ifCode = this.ifNode.build(builder, type),\n      elseCode = this.elseNode.build(builder, type);\n    code = '( ' + [a, this.op, b, '?', ifCode, ':', elseCode].join(' ') + ' )';\n  } else {\n    code = '( ' + a + ' ' + this.op + ' ' + b + ' )';\n  }\n  return builder.format(code, this.getType(builder), output);\n};\nCondNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.a = source.a;\n  this.b = source.b;\n  this.op = source.op;\n  this.ifNode = source.ifNode;\n  this.elseNode = source.elseNode;\n  return this;\n};\nCondNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.a = this.a.toJSON(meta).uuid;\n    data.b = this.b.toJSON(meta).uuid;\n    data.op = this.op;\n    if (data.ifNode) data.ifNode = this.ifNode.toJSON(meta).uuid;\n    if (data.elseNode) data.elseNode = this.elseNode.toJSON(meta).uuid;\n  }\n  return data;\n};\nexport { CondNode };","map":null,"metadata":{},"sourceType":"module"}