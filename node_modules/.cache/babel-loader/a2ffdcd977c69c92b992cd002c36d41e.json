{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.firstForTerminal = exports.firstForBranching = exports.firstForSequence = exports.first = void 0;\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar gast_public_1 = require(\"./gast/gast_public\");\n\nvar gast_1 = require(\"./gast/gast\");\n\nfunction first(prod) {\n  /* istanbul ignore else */\n  if (prod instanceof gast_public_1.NonTerminal) {\n    // this could in theory cause infinite loops if\n    // (1) prod A refs prod B.\n    // (2) prod B refs prod A\n    // (3) AB can match the empty set\n    // in other words a cycle where everything is optional so the first will keep\n    // looking ahead for the next optional part and will never exit\n    // currently there is no safeguard for this unique edge case because\n    // (1) not sure a grammar in which this can happen is useful for anything (productive)\n    return first(prod.referencedRule);\n  } else if (prod instanceof gast_public_1.Terminal) {\n    return firstForTerminal(prod);\n  } else if (gast_1.isSequenceProd(prod)) {\n    return firstForSequence(prod);\n  } else if (gast_1.isBranchingProd(prod)) {\n    return firstForBranching(prod);\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexports.first = first;\n\nfunction firstForSequence(prod) {\n  var firstSet = [];\n  var seq = prod.definition;\n  var nextSubProdIdx = 0;\n  var hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  var currSubProd; // so we enter the loop at least once (if the definition is not empty\n\n  var isLastInnerProdOptional = true; // scan a sequence until it's end or until we have found a NONE optional production in it\n\n  while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n    currSubProd = seq[nextSubProdIdx];\n    isLastInnerProdOptional = gast_1.isOptionalProd(currSubProd);\n    firstSet = firstSet.concat(first(currSubProd));\n    nextSubProdIdx = nextSubProdIdx + 1;\n    hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  }\n\n  return utils_1.uniq(firstSet);\n}\n\nexports.firstForSequence = firstForSequence;\n\nfunction firstForBranching(prod) {\n  var allAlternativesFirsts = utils_1.map(prod.definition, function (innerProd) {\n    return first(innerProd);\n  });\n  return utils_1.uniq(utils_1.flatten(allAlternativesFirsts));\n}\n\nexports.firstForBranching = firstForBranching;\n\nfunction firstForTerminal(terminal) {\n  return [terminal.terminalType];\n}\n\nexports.firstForTerminal = firstForTerminal;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAGA,SAAgBA,KAAhB,CAAsBC,IAAtB,EAAuC;EACrC;EACA,IAAIA,IAAI,YAAYC,yBAApB,EAAiC;IAC/B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,OAAOF,KAAK,CAAeC,IAAK,CAACE,cAArB,CAAZ;EACD,CAVD,MAUO,IAAIF,IAAI,YAAYC,sBAApB,EAA8B;IACnC,OAAOE,gBAAgB,CAAWH,IAAX,CAAvB;EACD,CAFM,MAEA,IAAII,sBAAeJ,IAAf,CAAJ,EAA0B;IAC/B,OAAOK,gBAAgB,CAAqBL,IAArB,CAAvB;EACD,CAFM,MAEA,IAAII,uBAAgBJ,IAAhB,CAAJ,EAA2B;IAChC,OAAOM,iBAAiB,CAAqBN,IAArB,CAAxB;EACD,CAFM,MAEA;IACL,MAAMO,KAAK,CAAC,sBAAD,CAAX;EACD;AACF;;AArBDC;;AAuBA,SAAgBH,gBAAhB,CAAiCL,IAAjC,EAAyD;EACvD,IAAIS,QAAQ,GAAgB,EAA5B;EACA,IAAMC,GAAG,GAAGV,IAAI,CAACW,UAAjB;EACA,IAAIC,cAAc,GAAG,CAArB;EACA,IAAIC,sBAAsB,GAAGH,GAAG,CAACI,MAAJ,GAAaF,cAA1C;EACA,IAAIG,WAAJ,CALuD,CAMvD;;EACA,IAAIC,uBAAuB,GAAG,IAA9B,CAPuD,CAQvD;;EACA,OAAOH,sBAAsB,IAAIG,uBAAjC,EAA0D;IACxDD,WAAW,GAAGL,GAAG,CAACE,cAAD,CAAjB;IACAI,uBAAuB,GAAGZ,sBAAeW,WAAf,CAA1B;IACAN,QAAQ,GAAGA,QAAQ,CAACQ,MAAT,CAAgBlB,KAAK,CAACgB,WAAD,CAArB,CAAX;IACAH,cAAc,GAAGA,cAAc,GAAG,CAAlC;IACAC,sBAAsB,GAAGH,GAAG,CAACI,MAAJ,GAAaF,cAAtC;EACD;;EAED,OAAOM,aAAKT,QAAL,CAAP;AACD;;AAlBDD;;AAoBA,SAAgBF,iBAAhB,CAAkCN,IAAlC,EAA0D;EACxD,IAAMmB,qBAAqB,GAAkBD,YAC3ClB,IAAI,CAACW,UADsC,EAE3C,UAACS,SAAD,EAAU;IACR,OAAOrB,KAAK,CAACqB,SAAD,CAAZ;EACD,CAJ0C,CAA7C;EAMA,OAAOF,aAAKA,gBAAmBC,qBAAnB,CAAL,CAAP;AACD;;AARDX;;AAUA,SAAgBL,gBAAhB,CAAiCkB,QAAjC,EAAmD;EACjD,OAAO,CAACA,QAAQ,CAACC,YAAV,CAAP;AACD;;AAFDd","names":["first","prod","gast_public_1","referencedRule","firstForTerminal","gast_1","firstForSequence","firstForBranching","Error","exports","firstSet","seq","definition","nextSubProdIdx","hasInnerProdsRemaining","length","currSubProd","isLastInnerProdOptional","concat","utils_1","allAlternativesFirsts","innerProd","terminal","terminalType"],"sourceRoot":"","sources":["../../../../src/parse/grammar/first.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}