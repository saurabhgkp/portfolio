{"ast":null,"code":"import { TempNode } from './TempNode.js';\nvar declarationRegexp = /^struct\\s*([a-z_0-9]+)\\s*{\\s*((.|\\n)*?)}/gim,\n  propertiesRegexp = /\\s*(\\w*?)\\s*(\\w*?)(\\=|\\;)/gim;\nfunction StructNode(src) {\n  TempNode.call(this);\n  this.parse(src);\n}\nStructNode.prototype = Object.create(TempNode.prototype);\nStructNode.prototype.constructor = StructNode;\nStructNode.prototype.nodeType = 'Struct';\nStructNode.prototype.getType = function (builder) {\n  return builder.getTypeByFormat(this.name);\n};\nStructNode.prototype.getInputByName = function (name) {\n  var i = this.inputs.length;\n  while (i--) {\n    if (this.inputs[i].name === name) {\n      return this.inputs[i];\n    }\n  }\n};\nStructNode.prototype.generate = function (builder, output) {\n  if (output === 'source') {\n    return this.src + ';';\n  } else {\n    return builder.format('( ' + this.src + ' )', this.getType(builder), output);\n  }\n};\nStructNode.prototype.parse = function (src) {\n  this.src = src || '';\n  this.inputs = [];\n  var declaration = declarationRegexp.exec(this.src);\n  if (declaration) {\n    var properties = declaration[2],\n      match;\n    while (match = propertiesRegexp.exec(properties)) {\n      this.inputs.push({\n        type: match[1],\n        name: match[2]\n      });\n    }\n    this.name = declaration[1];\n  } else {\n    this.name = '';\n  }\n  this.type = this.name;\n};\nStructNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.src = this.src;\n  }\n  return data;\n};\nexport { StructNode };","map":null,"metadata":{},"sourceType":"module"}