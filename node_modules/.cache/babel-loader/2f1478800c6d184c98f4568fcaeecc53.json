{"ast":null,"code":"import { Vector3 } from 'three';\nimport { Vector3Node } from '../inputs/Vector3Node.js';\nfunction VelocityNode(target, params) {\n  Vector3Node.call(this);\n  this.params = {};\n  this.velocity = new Vector3();\n  this.setTarget(target);\n  this.setParams(params);\n}\nVelocityNode.prototype = Object.create(Vector3Node.prototype);\nVelocityNode.prototype.constructor = VelocityNode;\nVelocityNode.prototype.nodeType = 'Velocity';\nVelocityNode.prototype.getReadonly = function () /*builder*/\n{\n  return false;\n};\nVelocityNode.prototype.setParams = function (params) {\n  switch (this.params.type) {\n    case 'elastic':\n      delete this.moment;\n      delete this.speed;\n      delete this.springVelocity;\n      delete this.lastVelocity;\n      break;\n  }\n  this.params = params || {};\n  switch (this.params.type) {\n    case 'elastic':\n      this.moment = new Vector3();\n      this.speed = new Vector3();\n      this.springVelocity = new Vector3();\n      this.lastVelocity = new Vector3();\n      break;\n  }\n};\nVelocityNode.prototype.setTarget = function (target) {\n  if (this.target) {\n    delete this.position;\n    delete this.oldPosition;\n  }\n  this.target = target;\n  if (target) {\n    this.position = target.getWorldPosition(this.position || new Vector3());\n    this.oldPosition = this.position.clone();\n  }\n};\nVelocityNode.prototype.updateFrameVelocity = function () /*frame*/\n{\n  if (this.target) {\n    this.position = this.target.getWorldPosition(this.position || new Vector3());\n    this.velocity.subVectors(this.position, this.oldPosition);\n    this.oldPosition.copy(this.position);\n  }\n};\nVelocityNode.prototype.updateFrame = function (frame) {\n  this.updateFrameVelocity(frame);\n  switch (this.params.type) {\n    case 'elastic':\n      // convert to real scale: 0 at 1 values\n      var deltaFps = frame.delta * (this.params.fps || 60);\n      var spring = Math.pow(this.params.spring, deltaFps),\n        damping = Math.pow(this.params.damping, deltaFps); // fix relative frame-rate\n\n      this.velocity.multiplyScalar(Math.exp(-this.params.damping * deltaFps)); // elastic\n\n      this.velocity.add(this.springVelocity);\n      this.velocity.add(this.speed.multiplyScalar(damping).multiplyScalar(1 - spring)); // speed\n\n      this.speed.subVectors(this.velocity, this.lastVelocity); // spring velocity\n\n      this.springVelocity.add(this.speed);\n      this.springVelocity.multiplyScalar(spring); // moment\n\n      this.moment.add(this.springVelocity); // damping\n\n      this.moment.multiplyScalar(damping);\n      this.lastVelocity.copy(this.velocity);\n      this.value.copy(this.moment);\n      break;\n    default:\n      this.value.copy(this.velocity);\n  }\n};\nVelocityNode.prototype.copy = function (source) {\n  Vector3Node.prototype.copy.call(this, source);\n  if (source.target) this.setTarget(source.target);\n  this.setParams(source.params);\n  return this;\n};\nVelocityNode.prototype.toJSON = function (meta) {\n  var data = Vector3Node.prototype.toJSON.call(this, meta);\n  if (this.target) data.target = this.target.uuid; // clone params\n\n  data.params = JSON.parse(JSON.stringify(this.params));\n  return data;\n};\nexport { VelocityNode };","map":null,"metadata":{},"sourceType":"module"}