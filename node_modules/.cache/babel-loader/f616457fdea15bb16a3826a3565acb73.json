{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\nimport { NodeLib } from '../core/NodeLib.js';\nfunction PositionNode(scope) {\n  TempNode.call(this, 'v3');\n  this.scope = scope || PositionNode.LOCAL;\n}\nPositionNode.LOCAL = 'local';\nPositionNode.WORLD = 'world';\nPositionNode.VIEW = 'view';\nPositionNode.PROJECTION = 'projection';\nPositionNode.prototype = Object.create(TempNode.prototype);\nPositionNode.prototype.constructor = PositionNode;\nPositionNode.prototype.nodeType = 'Position';\nPositionNode.prototype.getType = function () {\n  switch (this.scope) {\n    case PositionNode.PROJECTION:\n      return 'v4';\n  }\n  return this.type;\n};\nPositionNode.prototype.getShared = function () /* builder */\n{\n  switch (this.scope) {\n    case PositionNode.LOCAL:\n    case PositionNode.WORLD:\n      return false;\n  }\n  return true;\n};\nPositionNode.prototype.generate = function (builder, output) {\n  var result;\n  switch (this.scope) {\n    case PositionNode.LOCAL:\n      if (builder.isShader('vertex')) {\n        result = 'transformed';\n      } else {\n        builder.requires.position = true;\n        result = 'vPosition';\n      }\n      break;\n    case PositionNode.WORLD:\n      if (builder.isShader('vertex')) {\n        return '( modelMatrix * vec4( transformed, 1.0 ) ).xyz';\n      } else {\n        builder.requires.worldPosition = true;\n        result = 'vWPosition';\n      }\n      break;\n    case PositionNode.VIEW:\n      result = builder.isShader('vertex') ? '-mvPosition.xyz' : 'vViewPosition';\n      break;\n    case PositionNode.PROJECTION:\n      result = builder.isShader('vertex') ? '( projectionMatrix * modelViewMatrix * vec4( position, 1.0 ) )' : 'vec4( 0.0 )';\n      break;\n  }\n  return builder.format(result, this.getType(builder), output);\n};\nPositionNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.scope = source.scope;\n  return this;\n};\nPositionNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.scope = this.scope;\n  }\n  return data;\n};\nNodeLib.addKeyword('position', function () {\n  return new PositionNode();\n});\nNodeLib.addKeyword('worldPosition', function () {\n  return new PositionNode(PositionNode.WORLD);\n});\nNodeLib.addKeyword('viewPosition', function () {\n  return new PositionNode(PositionNode.VIEW);\n});\nexport { PositionNode };","map":null,"metadata":{},"sourceType":"module"}