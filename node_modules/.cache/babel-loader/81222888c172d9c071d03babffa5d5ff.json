{"ast":null,"code":"import { WebGLRenderTarget, OrthographicCamera, Scene, Mesh, PlaneGeometry } from 'three';\nimport { NodeBuilder } from '../core/NodeBuilder.js';\nimport { NodeMaterial } from '../materials/NodeMaterial.js';\nimport { TextureNode } from './TextureNode.js';\nfunction RTTNode(width, height, input, options) {\n  options = options || {};\n  this.input = input;\n  this.clear = options.clear !== undefined ? options.clear : true;\n  this.renderTarget = new WebGLRenderTarget(width, height, options);\n  this.material = new NodeMaterial();\n  this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  this.scene = new Scene();\n  this.quad = new Mesh(new PlaneGeometry(2, 2), this.material);\n  this.quad.frustumCulled = false; // Avoid getting clipped\n\n  this.scene.add(this.quad);\n  this.render = true;\n  TextureNode.call(this, this.renderTarget.texture);\n}\nRTTNode.prototype = Object.create(TextureNode.prototype);\nRTTNode.prototype.constructor = RTTNode;\nRTTNode.prototype.nodeType = 'RTT';\nRTTNode.prototype.build = function (builder, output, uuid) {\n  var rttBuilder = new NodeBuilder();\n  rttBuilder.nodes = builder.nodes;\n  rttBuilder.updaters = builder.updaters;\n  this.material.fragment.value = this.input;\n  this.material.build({\n    builder: rttBuilder\n  });\n  return TextureNode.prototype.build.call(this, builder, output, uuid);\n};\nRTTNode.prototype.updateFramesaveTo = function (frame) {\n  this.saveTo.render = false;\n  if (this.saveTo !== this.saveToCurrent) {\n    if (this.saveToMaterial) this.saveToMaterial.dispose();\n    var material = new NodeMaterial();\n    material.fragment.value = this;\n    material.build();\n    var scene = new Scene();\n    var quad = new Mesh(new PlaneGeometry(2, 2), material);\n    quad.frustumCulled = false; // Avoid getting clipped\n\n    scene.add(quad);\n    this.saveToScene = scene;\n    this.saveToMaterial = material;\n  }\n  this.saveToCurrent = this.saveTo;\n  frame.renderer.setRenderTarget(this.saveTo.renderTarget);\n  if (this.saveTo.clear) frame.renderer.clear();\n  frame.renderer.render(this.saveToScene, this.camera);\n};\nRTTNode.prototype.updateFrame = function (frame) {\n  if (frame.renderer) {\n    // from the second frame\n    if (this.saveTo && this.saveTo.render === false) {\n      this.updateFramesaveTo(frame);\n    }\n    if (this.render) {\n      if (this.material.uniforms.renderTexture) {\n        this.material.uniforms.renderTexture.value = frame.renderTexture;\n      }\n      frame.renderer.setRenderTarget(this.renderTarget);\n      if (this.clear) frame.renderer.clear();\n      frame.renderer.render(this.scene, this.camera);\n    } // first frame\n\n    if (this.saveTo && this.saveTo.render === true) {\n      this.updateFramesaveTo(frame);\n    }\n  } else {\n    console.warn('RTTNode need a renderer in NodeFrame');\n  }\n};\nRTTNode.prototype.copy = function (source) {\n  TextureNode.prototype.copy.call(this, source);\n  this.saveTo = source.saveTo;\n  return this;\n};\nRTTNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = TextureNode.prototype.toJSON.call(this, meta);\n    if (this.saveTo) data.saveTo = this.saveTo.toJSON(meta).uuid;\n  }\n  return data;\n};\nexport { RTTNode };","map":null,"metadata":{},"sourceType":"module"}