{"ast":null,"code":"import { MeshStandardMaterial } from 'three';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(parameters);\n    this._debug = {\n      value: 0\n    };\n    this._tDepth = {\n      value: null\n    };\n    this._distortionMap = {\n      value: null\n    };\n    this._tDiffuse = {\n      value: null\n    };\n    this._u_mipmap_0 = {\n      value: null\n    };\n    this._u_mipmap_1 = {\n      value: null\n    };\n    this._u_mipmap_2 = {\n      value: null\n    };\n    this._u_mipmap_3 = {\n      value: null\n    };\n    this._u_mipmap_4 = {\n      value: null\n    };\n    this._u_mipmap_5 = {\n      value: null\n    };\n    this._u_mipmap_6 = {\n      value: null\n    };\n    this._u_mipmap_7 = {\n      value: null\n    };\n    this._u_mipmap_res_0 = {\n      value: null\n    };\n    this._u_mipmap_res_1 = {\n      value: null\n    };\n    this._u_mipmap_res_2 = {\n      value: null\n    };\n    this._u_mipmap_res_3 = {\n      value: null\n    };\n    this._u_mipmap_res_4 = {\n      value: null\n    };\n    this._u_mipmap_res_5 = {\n      value: null\n    };\n    this._u_mipmap_res_6 = {\n      value: null\n    };\n    this._u_mipmap_res_7 = {\n      value: null\n    };\n    this._textureMatrix = {\n      value: null\n    };\n    this._mirror = {\n      value: 0.0\n    };\n    this._mixBlur = {\n      value: 0.0\n    };\n    this._blurStrength = {\n      value: 0.5\n    };\n    this._minDepthThreshold = {\n      value: 0.9\n    };\n    this._maxDepthThreshold = {\n      value: 1\n    };\n    this._depthScale = {\n      value: 0\n    };\n    this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    this._distortion = {\n      value: 1\n    };\n    this.setValues(parameters);\n  }\n\n  onBeforeCompile(shader) {\n    var _shader$defines;\n\n    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n\n    shader.uniforms.debug = this._debug;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.u_mipmap_0 = this._u_mipmap_0;\n    shader.uniforms.u_mipmap_1 = this._u_mipmap_1;\n    shader.uniforms.u_mipmap_2 = this._u_mipmap_2;\n    shader.uniforms.u_mipmap_3 = this._u_mipmap_3;\n    shader.uniforms.u_mipmap_4 = this._u_mipmap_4;\n    shader.uniforms.u_mipmap_5 = this._u_mipmap_5;\n    shader.uniforms.u_mipmap_6 = this._u_mipmap_6;\n    shader.uniforms.u_mipmap_7 = this._u_mipmap_7;\n    shader.uniforms.u_mipmap_res_0 = this._u_mipmap_res_0;\n    shader.uniforms.u_mipmap_res_1 = this._u_mipmap_res_1;\n    shader.uniforms.u_mipmap_res_2 = this._u_mipmap_res_2;\n    shader.uniforms.u_mipmap_res_3 = this._u_mipmap_res_3;\n    shader.uniforms.u_mipmap_res_4 = this._u_mipmap_res_4;\n    shader.uniforms.u_mipmap_res_5 = this._u_mipmap_res_5;\n    shader.uniforms.u_mipmap_res_6 = this._u_mipmap_res_6;\n    shader.uniforms.u_mipmap_res_7 = this._u_mipmap_res_7;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.vertexShader = `\n        uniform mat4 textureMatrix;\n        varying vec4 my_vUv;     \n      ${shader.vertexShader}`;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `#include <project_vertex>\n        my_vUv = textureMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );`);\n    shader.fragmentShader = `\n        uniform int debug;\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDepth;\n        uniform sampler2D distortionMap;\n        uniform sampler2D u_mipmap_0;\n        uniform sampler2D u_mipmap_1;\n        uniform sampler2D u_mipmap_2;\n        uniform sampler2D u_mipmap_3;\n        uniform sampler2D u_mipmap_4;\n        uniform sampler2D u_mipmap_5;\n        uniform sampler2D u_mipmap_6;\n        uniform sampler2D u_mipmap_7;\n        uniform vec2 u_mipmap_res_0;\n        uniform vec2 u_mipmap_res_1;\n        uniform vec2 u_mipmap_res_2;\n        uniform vec2 u_mipmap_res_3;\n        uniform vec2 u_mipmap_res_4;\n        uniform vec2 u_mipmap_res_5;\n        uniform vec2 u_mipmap_res_6;\n        uniform vec2 u_mipmap_res_7;\n        uniform float distortion;\n        uniform float cameraNear;\n\t\t\t  uniform float cameraFar;\n        uniform float mixBlur;\n        uniform float mirror;\n        uniform float mixStrength;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec4 my_vUv;  \n        \n        // from http://www.java-gaming.org/index.php?topic=35123.0\n        vec4 cubic( float v ) {\n          vec4 n = vec4( 1.0, 2.0, 3.0, 4.0 ) - v;\n          vec4 s = n * n * n;\n          float x = s.x;\n          float y = s.y - 4.0 * s.x;\n          float z = s.z - 4.0 * s.y + 6.0 * s.x;\n          float w = 6.0 - x - y - z;\n          return vec4( x, y, z, w ) * ( 1.0 / 6.0 );\n        }\n        \n        vec4 textureBicubic( sampler2D sampler, vec2 texCoords, vec2 texSize ) {\n          vec2 invTexSize = 1.0 / texSize;\n          texCoords = texCoords * texSize - 0.5;\n          vec2 fxy = fract( texCoords );\n          texCoords -= fxy;\n\n          vec4 xcubic = cubic( fxy.x );\n          vec4 ycubic = cubic( fxy.y );\n          vec4 c = texCoords.xxyy + vec2 ( - 0.5, + 1.5 ).xyxy;\n          vec4 s = vec4( xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw );\n\n          vec4 offset = c + vec4( xcubic.yw, ycubic.yw ) / s;\n          offset *= invTexSize.xxyy;\n        \n          vec4 sample0 = texture2D( sampler, offset.xz);\n          vec4 sample1 = texture2D( sampler, offset.yz);\n          vec4 sample2 = texture2D( sampler, offset.xw);\n          vec4 sample3 = texture2D( sampler, offset.yw);\n        \n          float sx = s.x / ( s.x + s.y );\n          float sy = s.z / ( s.z + s.w );\n\n          return mix(\n            mix(\n              sample3,\n              sample2,\n              sx\n            ),\n            mix(\n              sample1,\n              sample0,\n              sx\n            ),\n            sy\n          );\n        }\n\n\n        ${shader.fragmentShader}`;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', `#include <emissivemap_fragment>\n    \n      float depthFactor = 1.0;\n      float distortionFactor = 0.0;\n      vec3 my_normal = vec3(0.0);\n      float reflectorRoughnessFactor = roughness;\n      vec3 coord = my_vUv.xyz / my_vUv.w;\n\n      #ifdef USE_DISTORTION\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n      #endif\n\n      #ifdef USE_NORMALMAP\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\n        my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b ,  normalColor.g * 2.0 - 1.0 ) );\n      #endif\n\n      #ifdef USE_ROUGHNESSMAP\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n      #endif\n\n      vec2 proj_vUv = coord.xy + coord.z * my_normal.xz * 0.01;\n      proj_vUv.x += distortionFactor;\n      proj_vUv.y += distortionFactor;\n      \n      float lod = 1.0 - min(1.0, mixBlur * reflectorRoughnessFactor);\n\n      #ifdef USE_DEPTH\n        vec4 depth = texture2D(tDepth, proj_vUv);\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n        depthFactor *= depthScale;\n        depthFactor = max(0.0001, min(1.0, depthFactor + depthToBlurRatioBias));\n      #endif\n\n      vec4 baseColor = texture2D(tDiffuse, proj_vUv);\n      vec4 mixedColor;\n\n      float _lod = (1.0 - pow(1.0 - lod, 4.0)) * 8.0;\n      if (_lod < 1.) {\n        vec4 one = textureBicubic(u_mipmap_7, proj_vUv, u_mipmap_res_7);\n        vec4 two = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\n        mixedColor = mix(one, two, _lod);\n      } else if (_lod < 2.) {\n        vec4 one = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\n        vec4 two = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\n        mixedColor = mix(one, two, _lod - 1.0);\n      } else if (_lod < 3.) {\n        vec4 one = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\n        vec4 two = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\n        mixedColor = mix(one, two, _lod - 2.0);\n      } else if (_lod < 4.) {\n        vec4 one = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\n        vec4 two = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\n        mixedColor = mix(one, two, _lod - 3.0);\n      } else if (_lod < 5.) {\n        vec4 one = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\n        vec4 two = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\n        mixedColor = mix(one, two, _lod - 4.0);\n      } else if (_lod < 6.) {\n        vec4 one = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\n        vec4 two = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\n        mixedColor = mix(one, two, _lod - 5.0);\n      } else if (_lod < 7.) {\n        vec4 one = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\n        vec4 two = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\n        mixedColor = mix(one, two, _lod - 6.0);\n      } else {\n        vec4 one = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\n        mixedColor = mix(one, baseColor, _lod - 7.0);\n      }\n\n      mixedColor.rgb *= depthFactor;\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + mixedColor.rgb * mixStrength);     \n      diffuseColor = sRGBToLinear(diffuseColor);\n\n      if (debug == 1) {\n        diffuseColor = sRGBToLinear(vec4(vec3(depthFactor), 1.0));\n      }\n      if (debug == 2) {\n        diffuseColor = sRGBToLinear(texture2D(tDiffuse, proj_vUv));\n      }\n      if (debug == 3) {\n        diffuseColor = sRGBToLinear(texture2D(distortionMap, vUv));\n      }\n      if (debug == 4) {\n        diffuseColor = sRGBToLinear(vec4(vec3(lod), 1.0));\n      }\n      `);\n  }\n\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n\n  get tDepth() {\n    return this._tDepth.value;\n  }\n\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n\n  get u_mipmap_0() {\n    return this._u_mipmap_0.value;\n  }\n\n  set u_mipmap_0(v) {\n    this._u_mipmap_0.value = v;\n  }\n\n  get u_mipmap_1() {\n    return this._u_mipmap_1.value;\n  }\n\n  set u_mipmap_1(v) {\n    this._u_mipmap_1.value = v;\n  }\n\n  get u_mipmap_2() {\n    return this._u_mipmap_2.value;\n  }\n\n  set u_mipmap_2(v) {\n    this._u_mipmap_2.value = v;\n  }\n\n  get u_mipmap_3() {\n    return this._u_mipmap_3.value;\n  }\n\n  set u_mipmap_3(v) {\n    this._u_mipmap_3.value = v;\n  }\n\n  get u_mipmap_4() {\n    return this._u_mipmap_4.value;\n  }\n\n  set u_mipmap_4(v) {\n    this._u_mipmap_4.value = v;\n  }\n\n  get u_mipmap_5() {\n    return this._u_mipmap_5.value;\n  }\n\n  set u_mipmap_5(v) {\n    this._u_mipmap_5.value = v;\n  }\n\n  get u_mipmap_6() {\n    return this._u_mipmap_6.value;\n  }\n\n  set u_mipmap_6(v) {\n    this._u_mipmap_6.value = v;\n  }\n\n  get u_mipmap_7() {\n    return this._u_mipmap_7.value;\n  }\n\n  set u_mipmap_7(v) {\n    this._u_mipmap_7.value = v;\n  }\n\n  get u_mipmap_res_0() {\n    return this._u_mipmap_res_0.value;\n  }\n\n  set u_mipmap_res_0(v) {\n    this._u_mipmap_res_0.value = v;\n  }\n\n  get u_mipmap_res_1() {\n    return this._u_mipmap_res_1.value;\n  }\n\n  set u_mipmap_res_1(v) {\n    this._u_mipmap_res_1.value = v;\n  }\n\n  get u_mipmap_res_2() {\n    return this._u_mipmap_res_2.value;\n  }\n\n  set u_mipmap_res_2(v) {\n    this._u_mipmap_res_2.value = v;\n  }\n\n  get u_mipmap_res_3() {\n    return this._u_mipmap_res_3.value;\n  }\n\n  set u_mipmap_res_3(v) {\n    this._u_mipmap_res_3.value = v;\n  }\n\n  get u_mipmap_res_4() {\n    return this._u_mipmap_res_4.value;\n  }\n\n  set u_mipmap_res_4(v) {\n    this._u_mipmap_res_4.value = v;\n  }\n\n  get u_mipmap_res_5() {\n    return this._u_mipmap_res_5.value;\n  }\n\n  set u_mipmap_res_5(v) {\n    this._u_mipmap_res_5.value = v;\n  }\n\n  get u_mipmap_res_6() {\n    return this._u_mipmap_res_6.value;\n  }\n\n  set u_mipmap_res_6(v) {\n    this._u_mipmap_res_6.value = v;\n  }\n\n  get u_mipmap_res_7() {\n    return this._u_mipmap_res_7.value;\n  }\n\n  set u_mipmap_res_7(v) {\n    this._u_mipmap_res_7.value = v;\n  }\n\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n\n  get mirror() {\n    return this._mirror.value;\n  }\n\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n\n  get depthScale() {\n    return this._depthScale.value;\n  }\n\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n\n  get debug() {\n    return this._debug.value;\n  }\n\n  set debug(v) {\n    this._debug.value = v;\n  }\n\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n\n  get distortion() {\n    return this._distortion.value;\n  }\n\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n\n}\n\nexport { MeshReflectorMaterial };","map":{"version":3,"names":["MeshStandardMaterial","MeshReflectorMaterial","constructor","parameters","_debug","value","_tDepth","_distortionMap","_tDiffuse","_u_mipmap_0","_u_mipmap_1","_u_mipmap_2","_u_mipmap_3","_u_mipmap_4","_u_mipmap_5","_u_mipmap_6","_u_mipmap_7","_u_mipmap_res_0","_u_mipmap_res_1","_u_mipmap_res_2","_u_mipmap_res_3","_u_mipmap_res_4","_u_mipmap_res_5","_u_mipmap_res_6","_u_mipmap_res_7","_textureMatrix","_mirror","_mixBlur","_blurStrength","_minDepthThreshold","_maxDepthThreshold","_depthScale","_depthToBlurRatioBias","_distortion","setValues","onBeforeCompile","shader","_shader$defines","defines","USE_UV","uniforms","debug","tDiffuse","tDepth","distortionMap","u_mipmap_0","u_mipmap_1","u_mipmap_2","u_mipmap_3","u_mipmap_4","u_mipmap_5","u_mipmap_6","u_mipmap_7","u_mipmap_res_0","u_mipmap_res_1","u_mipmap_res_2","u_mipmap_res_3","u_mipmap_res_4","u_mipmap_res_5","u_mipmap_res_6","u_mipmap_res_7","textureMatrix","mirror","mixBlur","mixStrength","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","distortion","vertexShader","replace","fragmentShader","v"],"sources":["/home/cliffexpc63/my example/portfolioQ/node_modules/@react-three/drei/materials/MeshReflectorMaterial.js"],"sourcesContent":["import { MeshStandardMaterial } from 'three';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n    this._debug = {\n      value: 0\n    };\n    this._tDepth = {\n      value: null\n    };\n    this._distortionMap = {\n      value: null\n    };\n    this._tDiffuse = {\n      value: null\n    };\n    this._u_mipmap_0 = {\n      value: null\n    };\n    this._u_mipmap_1 = {\n      value: null\n    };\n    this._u_mipmap_2 = {\n      value: null\n    };\n    this._u_mipmap_3 = {\n      value: null\n    };\n    this._u_mipmap_4 = {\n      value: null\n    };\n    this._u_mipmap_5 = {\n      value: null\n    };\n    this._u_mipmap_6 = {\n      value: null\n    };\n    this._u_mipmap_7 = {\n      value: null\n    };\n    this._u_mipmap_res_0 = {\n      value: null\n    };\n    this._u_mipmap_res_1 = {\n      value: null\n    };\n    this._u_mipmap_res_2 = {\n      value: null\n    };\n    this._u_mipmap_res_3 = {\n      value: null\n    };\n    this._u_mipmap_res_4 = {\n      value: null\n    };\n    this._u_mipmap_res_5 = {\n      value: null\n    };\n    this._u_mipmap_res_6 = {\n      value: null\n    };\n    this._u_mipmap_res_7 = {\n      value: null\n    };\n    this._textureMatrix = {\n      value: null\n    };\n    this._mirror = {\n      value: 0.0\n    };\n    this._mixBlur = {\n      value: 0.0\n    };\n    this._blurStrength = {\n      value: 0.5\n    };\n    this._minDepthThreshold = {\n      value: 0.9\n    };\n    this._maxDepthThreshold = {\n      value: 1\n    };\n    this._depthScale = {\n      value: 0\n    };\n    this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    this._distortion = {\n      value: 1\n    };\n    this.setValues(parameters);\n  }\n\n  onBeforeCompile(shader) {\n    var _shader$defines;\n\n    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n\n    shader.uniforms.debug = this._debug;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.u_mipmap_0 = this._u_mipmap_0;\n    shader.uniforms.u_mipmap_1 = this._u_mipmap_1;\n    shader.uniforms.u_mipmap_2 = this._u_mipmap_2;\n    shader.uniforms.u_mipmap_3 = this._u_mipmap_3;\n    shader.uniforms.u_mipmap_4 = this._u_mipmap_4;\n    shader.uniforms.u_mipmap_5 = this._u_mipmap_5;\n    shader.uniforms.u_mipmap_6 = this._u_mipmap_6;\n    shader.uniforms.u_mipmap_7 = this._u_mipmap_7;\n    shader.uniforms.u_mipmap_res_0 = this._u_mipmap_res_0;\n    shader.uniforms.u_mipmap_res_1 = this._u_mipmap_res_1;\n    shader.uniforms.u_mipmap_res_2 = this._u_mipmap_res_2;\n    shader.uniforms.u_mipmap_res_3 = this._u_mipmap_res_3;\n    shader.uniforms.u_mipmap_res_4 = this._u_mipmap_res_4;\n    shader.uniforms.u_mipmap_res_5 = this._u_mipmap_res_5;\n    shader.uniforms.u_mipmap_res_6 = this._u_mipmap_res_6;\n    shader.uniforms.u_mipmap_res_7 = this._u_mipmap_res_7;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.vertexShader = `\n        uniform mat4 textureMatrix;\n        varying vec4 my_vUv;     \n      ${shader.vertexShader}`;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `#include <project_vertex>\n        my_vUv = textureMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );`);\n    shader.fragmentShader = `\n        uniform int debug;\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDepth;\n        uniform sampler2D distortionMap;\n        uniform sampler2D u_mipmap_0;\n        uniform sampler2D u_mipmap_1;\n        uniform sampler2D u_mipmap_2;\n        uniform sampler2D u_mipmap_3;\n        uniform sampler2D u_mipmap_4;\n        uniform sampler2D u_mipmap_5;\n        uniform sampler2D u_mipmap_6;\n        uniform sampler2D u_mipmap_7;\n        uniform vec2 u_mipmap_res_0;\n        uniform vec2 u_mipmap_res_1;\n        uniform vec2 u_mipmap_res_2;\n        uniform vec2 u_mipmap_res_3;\n        uniform vec2 u_mipmap_res_4;\n        uniform vec2 u_mipmap_res_5;\n        uniform vec2 u_mipmap_res_6;\n        uniform vec2 u_mipmap_res_7;\n        uniform float distortion;\n        uniform float cameraNear;\n\t\t\t  uniform float cameraFar;\n        uniform float mixBlur;\n        uniform float mirror;\n        uniform float mixStrength;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec4 my_vUv;  \n        \n        // from http://www.java-gaming.org/index.php?topic=35123.0\n        vec4 cubic( float v ) {\n          vec4 n = vec4( 1.0, 2.0, 3.0, 4.0 ) - v;\n          vec4 s = n * n * n;\n          float x = s.x;\n          float y = s.y - 4.0 * s.x;\n          float z = s.z - 4.0 * s.y + 6.0 * s.x;\n          float w = 6.0 - x - y - z;\n          return vec4( x, y, z, w ) * ( 1.0 / 6.0 );\n        }\n        \n        vec4 textureBicubic( sampler2D sampler, vec2 texCoords, vec2 texSize ) {\n          vec2 invTexSize = 1.0 / texSize;\n          texCoords = texCoords * texSize - 0.5;\n          vec2 fxy = fract( texCoords );\n          texCoords -= fxy;\n\n          vec4 xcubic = cubic( fxy.x );\n          vec4 ycubic = cubic( fxy.y );\n          vec4 c = texCoords.xxyy + vec2 ( - 0.5, + 1.5 ).xyxy;\n          vec4 s = vec4( xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw );\n\n          vec4 offset = c + vec4( xcubic.yw, ycubic.yw ) / s;\n          offset *= invTexSize.xxyy;\n        \n          vec4 sample0 = texture2D( sampler, offset.xz);\n          vec4 sample1 = texture2D( sampler, offset.yz);\n          vec4 sample2 = texture2D( sampler, offset.xw);\n          vec4 sample3 = texture2D( sampler, offset.yw);\n        \n          float sx = s.x / ( s.x + s.y );\n          float sy = s.z / ( s.z + s.w );\n\n          return mix(\n            mix(\n              sample3,\n              sample2,\n              sx\n            ),\n            mix(\n              sample1,\n              sample0,\n              sx\n            ),\n            sy\n          );\n        }\n\n\n        ${shader.fragmentShader}`;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', `#include <emissivemap_fragment>\n    \n      float depthFactor = 1.0;\n      float distortionFactor = 0.0;\n      vec3 my_normal = vec3(0.0);\n      float reflectorRoughnessFactor = roughness;\n      vec3 coord = my_vUv.xyz / my_vUv.w;\n\n      #ifdef USE_DISTORTION\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n      #endif\n\n      #ifdef USE_NORMALMAP\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\n        my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b ,  normalColor.g * 2.0 - 1.0 ) );\n      #endif\n\n      #ifdef USE_ROUGHNESSMAP\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n      #endif\n\n      vec2 proj_vUv = coord.xy + coord.z * my_normal.xz * 0.01;\n      proj_vUv.x += distortionFactor;\n      proj_vUv.y += distortionFactor;\n      \n      float lod = 1.0 - min(1.0, mixBlur * reflectorRoughnessFactor);\n\n      #ifdef USE_DEPTH\n        vec4 depth = texture2D(tDepth, proj_vUv);\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n        depthFactor *= depthScale;\n        depthFactor = max(0.0001, min(1.0, depthFactor + depthToBlurRatioBias));\n      #endif\n\n      vec4 baseColor = texture2D(tDiffuse, proj_vUv);\n      vec4 mixedColor;\n\n      float _lod = (1.0 - pow(1.0 - lod, 4.0)) * 8.0;\n      if (_lod < 1.) {\n        vec4 one = textureBicubic(u_mipmap_7, proj_vUv, u_mipmap_res_7);\n        vec4 two = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\n        mixedColor = mix(one, two, _lod);\n      } else if (_lod < 2.) {\n        vec4 one = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\n        vec4 two = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\n        mixedColor = mix(one, two, _lod - 1.0);\n      } else if (_lod < 3.) {\n        vec4 one = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\n        vec4 two = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\n        mixedColor = mix(one, two, _lod - 2.0);\n      } else if (_lod < 4.) {\n        vec4 one = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\n        vec4 two = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\n        mixedColor = mix(one, two, _lod - 3.0);\n      } else if (_lod < 5.) {\n        vec4 one = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\n        vec4 two = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\n        mixedColor = mix(one, two, _lod - 4.0);\n      } else if (_lod < 6.) {\n        vec4 one = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\n        vec4 two = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\n        mixedColor = mix(one, two, _lod - 5.0);\n      } else if (_lod < 7.) {\n        vec4 one = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\n        vec4 two = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\n        mixedColor = mix(one, two, _lod - 6.0);\n      } else {\n        vec4 one = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\n        mixedColor = mix(one, baseColor, _lod - 7.0);\n      }\n\n      mixedColor.rgb *= depthFactor;\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + mixedColor.rgb * mixStrength);     \n      diffuseColor = sRGBToLinear(diffuseColor);\n\n      if (debug == 1) {\n        diffuseColor = sRGBToLinear(vec4(vec3(depthFactor), 1.0));\n      }\n      if (debug == 2) {\n        diffuseColor = sRGBToLinear(texture2D(tDiffuse, proj_vUv));\n      }\n      if (debug == 3) {\n        diffuseColor = sRGBToLinear(texture2D(distortionMap, vUv));\n      }\n      if (debug == 4) {\n        diffuseColor = sRGBToLinear(vec4(vec3(lod), 1.0));\n      }\n      `);\n  }\n\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n\n  get tDepth() {\n    return this._tDepth.value;\n  }\n\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n\n  get u_mipmap_0() {\n    return this._u_mipmap_0.value;\n  }\n\n  set u_mipmap_0(v) {\n    this._u_mipmap_0.value = v;\n  }\n\n  get u_mipmap_1() {\n    return this._u_mipmap_1.value;\n  }\n\n  set u_mipmap_1(v) {\n    this._u_mipmap_1.value = v;\n  }\n\n  get u_mipmap_2() {\n    return this._u_mipmap_2.value;\n  }\n\n  set u_mipmap_2(v) {\n    this._u_mipmap_2.value = v;\n  }\n\n  get u_mipmap_3() {\n    return this._u_mipmap_3.value;\n  }\n\n  set u_mipmap_3(v) {\n    this._u_mipmap_3.value = v;\n  }\n\n  get u_mipmap_4() {\n    return this._u_mipmap_4.value;\n  }\n\n  set u_mipmap_4(v) {\n    this._u_mipmap_4.value = v;\n  }\n\n  get u_mipmap_5() {\n    return this._u_mipmap_5.value;\n  }\n\n  set u_mipmap_5(v) {\n    this._u_mipmap_5.value = v;\n  }\n\n  get u_mipmap_6() {\n    return this._u_mipmap_6.value;\n  }\n\n  set u_mipmap_6(v) {\n    this._u_mipmap_6.value = v;\n  }\n\n  get u_mipmap_7() {\n    return this._u_mipmap_7.value;\n  }\n\n  set u_mipmap_7(v) {\n    this._u_mipmap_7.value = v;\n  }\n\n  get u_mipmap_res_0() {\n    return this._u_mipmap_res_0.value;\n  }\n\n  set u_mipmap_res_0(v) {\n    this._u_mipmap_res_0.value = v;\n  }\n\n  get u_mipmap_res_1() {\n    return this._u_mipmap_res_1.value;\n  }\n\n  set u_mipmap_res_1(v) {\n    this._u_mipmap_res_1.value = v;\n  }\n\n  get u_mipmap_res_2() {\n    return this._u_mipmap_res_2.value;\n  }\n\n  set u_mipmap_res_2(v) {\n    this._u_mipmap_res_2.value = v;\n  }\n\n  get u_mipmap_res_3() {\n    return this._u_mipmap_res_3.value;\n  }\n\n  set u_mipmap_res_3(v) {\n    this._u_mipmap_res_3.value = v;\n  }\n\n  get u_mipmap_res_4() {\n    return this._u_mipmap_res_4.value;\n  }\n\n  set u_mipmap_res_4(v) {\n    this._u_mipmap_res_4.value = v;\n  }\n\n  get u_mipmap_res_5() {\n    return this._u_mipmap_res_5.value;\n  }\n\n  set u_mipmap_res_5(v) {\n    this._u_mipmap_res_5.value = v;\n  }\n\n  get u_mipmap_res_6() {\n    return this._u_mipmap_res_6.value;\n  }\n\n  set u_mipmap_res_6(v) {\n    this._u_mipmap_res_6.value = v;\n  }\n\n  get u_mipmap_res_7() {\n    return this._u_mipmap_res_7.value;\n  }\n\n  set u_mipmap_res_7(v) {\n    this._u_mipmap_res_7.value = v;\n  }\n\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n\n  get mirror() {\n    return this._mirror.value;\n  }\n\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n\n  get depthScale() {\n    return this._depthScale.value;\n  }\n\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n\n  get debug() {\n    return this._debug.value;\n  }\n\n  set debug(v) {\n    this._debug.value = v;\n  }\n\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n\n  get distortion() {\n    return this._distortion.value;\n  }\n\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n\n}\n\nexport { MeshReflectorMaterial };\n"],"mappings":"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kFAF0B,CAAtB;IAGAnC,MAAM,CAACoC,cAAP,GAAyB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAUpC,MAAM,CAACoC,cAAe,EAlF5B;IAmFApC,MAAM,CAACoC,cAAP,GAAwBpC,MAAM,CAACoC,cAAP,CAAsBD,OAAtB,CAA8B,iCAA9B,EAAkE;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAxF4B,CAAxB;EAyFD;;EAEW,IAAR7B,QAAQ,GAAG;IACb,OAAO,KAAKlC,SAAL,CAAeH,KAAtB;EACD;;EAEW,IAARqC,QAAQ,CAAC+B,CAAD,EAAI;IACd,KAAKjE,SAAL,CAAeH,KAAf,GAAuBoE,CAAvB;EACD;;EAES,IAAN9B,MAAM,GAAG;IACX,O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"},"metadata":{},"sourceType":"module"}