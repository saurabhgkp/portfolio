{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { UVNode } from '../accessors/UVNode.js';\nfunction CheckerNode(uv) {\n  TempNode.call(this, 'f');\n  this.uv = uv || new UVNode();\n}\nCheckerNode.prototype = Object.create(TempNode.prototype);\nCheckerNode.prototype.constructor = CheckerNode;\nCheckerNode.prototype.nodeType = 'Noise';\nCheckerNode.Nodes = function () {\n  // https://github.com/mattdesl/glsl-checker/blob/master/index.glsl\n  var checker = new FunctionNode(['float checker( vec2 uv ) {', '\tfloat cx = floor( uv.x );', '\tfloat cy = floor( uv.y ); ', '\tfloat result = mod( cx + cy, 2.0 );', '\treturn sign( result );', '}'].join('\\n'));\n  return {\n    checker: checker\n  };\n}();\nCheckerNode.prototype.generate = function (builder, output) {\n  var snoise = builder.include(CheckerNode.Nodes.checker);\n  return builder.format(snoise + '( ' + this.uv.build(builder, 'v2') + ' )', this.getType(builder), output);\n};\nCheckerNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.uv = source.uv;\n  return this;\n};\nCheckerNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.uv = this.uv.toJSON(meta).uuid;\n  }\n  return data;\n};\nexport { CheckerNode };","map":null,"metadata":{},"sourceType":"module"}