{"ast":null,"code":"import { MathUtils } from 'three';\nimport { Node } from './Node.js';\nfunction TempNode(type, params) {\n  Node.call(this, type);\n  params = params || {};\n  this.shared = params.shared !== undefined ? params.shared : true;\n  this.unique = params.unique !== undefined ? params.unique : false;\n}\nTempNode.prototype = Object.create(Node.prototype);\nTempNode.prototype.constructor = TempNode;\nTempNode.prototype.build = function (builder, output, uuid, ns) {\n  output = output || this.getType(builder);\n  if (this.getShared(builder, output)) {\n    var isUnique = this.getUnique(builder, output);\n    if (isUnique && this.constructor.uuid === undefined) {\n      this.constructor.uuid = MathUtils.generateUUID();\n    }\n    uuid = builder.getUuid(uuid || this.getUuid(), !isUnique);\n    var data = builder.getNodeData(uuid),\n      type = data.output || this.getType(builder);\n    if (builder.analyzing) {\n      if ((data.deps || 0) > 0 || this.getLabel()) {\n        this.appendDepsNode(builder, data, output);\n        return this.generate(builder, output, uuid);\n      }\n      return Node.prototype.build.call(this, builder, output, uuid);\n    } else if (isUnique) {\n      data.name = data.name || Node.prototype.build.call(this, builder, output, uuid);\n      return data.name;\n    } else if (!this.getLabel() && (!this.getShared(builder, type) || builder.context.ignoreCache || data.deps === 1)) {\n      return Node.prototype.build.call(this, builder, output, uuid);\n    }\n    uuid = this.getUuid(false);\n    var name = this.getTemp(builder, uuid);\n    if (name) {\n      return builder.format(name, type, output);\n    } else {\n      name = TempNode.prototype.generate.call(this, builder, output, uuid, data.output, ns);\n      var code = this.generate(builder, type, uuid);\n      builder.addNodeCode(name + ' = ' + code + ';');\n      return builder.format(name, type, output);\n    }\n  }\n  return Node.prototype.build.call(this, builder, output, uuid);\n};\nTempNode.prototype.getShared = function (builder, output) {\n  return output !== 'sampler2D' && output !== 'samplerCube' && this.shared;\n};\nTempNode.prototype.getUnique = function () /* builder, output */\n{\n  return this.unique;\n};\nTempNode.prototype.setLabel = function (name) {\n  this.label = name;\n  return this;\n};\nTempNode.prototype.getLabel = function () /* builder */\n{\n  return this.label;\n};\nTempNode.prototype.getUuid = function (unique) {\n  var uuid = unique || unique == undefined ? this.constructor.uuid || this.uuid : this.uuid;\n  if (typeof this.scope === 'string') uuid = this.scope + '-' + uuid;\n  return uuid;\n};\nTempNode.prototype.getTemp = function (builder, uuid) {\n  uuid = uuid || this.uuid;\n  var tempVar = builder.getVars()[uuid];\n  return tempVar ? tempVar.name : undefined;\n};\nTempNode.prototype.generate = function (builder, output, uuid, type, ns) {\n  if (!this.getShared(builder, output)) console.error('THREE.TempNode is not shared!');\n  uuid = uuid || this.uuid;\n  return builder.getTempVar(uuid, type || this.getType(builder), ns, this.getLabel()).name;\n};\nexport { TempNode };","map":null,"metadata":{},"sourceType":"module"}