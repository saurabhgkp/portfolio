{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTokenType = exports.hasExtendingTokensTypesMapProperty = exports.hasExtendingTokensTypesProperty = exports.hasCategoriesProperty = exports.hasShortKeyProperty = exports.singleAssignCategoriesToksMap = exports.assignCategoriesMapProp = exports.assignCategoriesTokensProp = exports.assignTokenDefaultProps = exports.expandCategories = exports.augmentTokenTypes = exports.tokenIdxToClass = exports.tokenShortNameIdx = exports.tokenStructuredMatcherNoCategories = exports.tokenStructuredMatcher = void 0;\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nfunction tokenStructuredMatcher(tokInstance, tokConstructor) {\n  var instanceType = tokInstance.tokenTypeIdx;\n\n  if (instanceType === tokConstructor.tokenTypeIdx) {\n    return true;\n  } else {\n    return tokConstructor.isParent === true && tokConstructor.categoryMatchesMap[instanceType] === true;\n  }\n}\n\nexports.tokenStructuredMatcher = tokenStructuredMatcher; // Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\n\nfunction tokenStructuredMatcherNoCategories(token, tokType) {\n  return token.tokenTypeIdx === tokType.tokenTypeIdx;\n}\n\nexports.tokenStructuredMatcherNoCategories = tokenStructuredMatcherNoCategories;\nexports.tokenShortNameIdx = 1;\nexports.tokenIdxToClass = {};\n\nfunction augmentTokenTypes(tokenTypes) {\n  // collect the parent Token Types as well.\n  var tokenTypesAndParents = expandCategories(tokenTypes); // add required tokenType and categoryMatches properties\n\n  assignTokenDefaultProps(tokenTypesAndParents); // fill up the categoryMatches\n\n  assignCategoriesMapProp(tokenTypesAndParents);\n  assignCategoriesTokensProp(tokenTypesAndParents);\n  utils_1.forEach(tokenTypesAndParents, function (tokType) {\n    tokType.isParent = tokType.categoryMatches.length > 0;\n  });\n}\n\nexports.augmentTokenTypes = augmentTokenTypes;\n\nfunction expandCategories(tokenTypes) {\n  var result = utils_1.cloneArr(tokenTypes);\n  var categories = tokenTypes;\n  var searching = true;\n\n  while (searching) {\n    categories = utils_1.compact(utils_1.flatten(utils_1.map(categories, function (currTokType) {\n      return currTokType.CATEGORIES;\n    })));\n    var newCategories = utils_1.difference(categories, result);\n    result = result.concat(newCategories);\n\n    if (utils_1.isEmpty(newCategories)) {\n      searching = false;\n    } else {\n      categories = newCategories;\n    }\n  }\n\n  return result;\n}\n\nexports.expandCategories = expandCategories;\n\nfunction assignTokenDefaultProps(tokenTypes) {\n  utils_1.forEach(tokenTypes, function (currTokType) {\n    if (!hasShortKeyProperty(currTokType)) {\n      exports.tokenIdxToClass[exports.tokenShortNameIdx] = currTokType;\n      currTokType.tokenTypeIdx = exports.tokenShortNameIdx++;\n    } // CATEGORIES? : TokenType | TokenType[]\n\n\n    if (hasCategoriesProperty(currTokType) && !utils_1.isArray(currTokType.CATEGORIES) // &&\n    // !isUndefined(currTokType.CATEGORIES.PATTERN)\n    ) {\n      currTokType.CATEGORIES = [currTokType.CATEGORIES];\n    }\n\n    if (!hasCategoriesProperty(currTokType)) {\n      currTokType.CATEGORIES = [];\n    }\n\n    if (!hasExtendingTokensTypesProperty(currTokType)) {\n      currTokType.categoryMatches = [];\n    }\n\n    if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n      currTokType.categoryMatchesMap = {};\n    }\n  });\n}\n\nexports.assignTokenDefaultProps = assignTokenDefaultProps;\n\nfunction assignCategoriesTokensProp(tokenTypes) {\n  utils_1.forEach(tokenTypes, function (currTokType) {\n    // avoid duplications\n    currTokType.categoryMatches = [];\n    utils_1.forEach(currTokType.categoryMatchesMap, function (val, key) {\n      currTokType.categoryMatches.push(exports.tokenIdxToClass[key].tokenTypeIdx);\n    });\n  });\n}\n\nexports.assignCategoriesTokensProp = assignCategoriesTokensProp;\n\nfunction assignCategoriesMapProp(tokenTypes) {\n  utils_1.forEach(tokenTypes, function (currTokType) {\n    singleAssignCategoriesToksMap([], currTokType);\n  });\n}\n\nexports.assignCategoriesMapProp = assignCategoriesMapProp;\n\nfunction singleAssignCategoriesToksMap(path, nextNode) {\n  utils_1.forEach(path, function (pathNode) {\n    nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true;\n  });\n  utils_1.forEach(nextNode.CATEGORIES, function (nextCategory) {\n    var newPath = path.concat(nextNode); // avoids infinite loops due to cyclic categories.\n\n    if (!utils_1.contains(newPath, nextCategory)) {\n      singleAssignCategoriesToksMap(newPath, nextCategory);\n    }\n  });\n}\n\nexports.singleAssignCategoriesToksMap = singleAssignCategoriesToksMap;\n\nfunction hasShortKeyProperty(tokType) {\n  return utils_1.has(tokType, \"tokenTypeIdx\");\n}\n\nexports.hasShortKeyProperty = hasShortKeyProperty;\n\nfunction hasCategoriesProperty(tokType) {\n  return utils_1.has(tokType, \"CATEGORIES\");\n}\n\nexports.hasCategoriesProperty = hasCategoriesProperty;\n\nfunction hasExtendingTokensTypesProperty(tokType) {\n  return utils_1.has(tokType, \"categoryMatches\");\n}\n\nexports.hasExtendingTokensTypesProperty = hasExtendingTokensTypesProperty;\n\nfunction hasExtendingTokensTypesMapProperty(tokType) {\n  return utils_1.has(tokType, \"categoryMatchesMap\");\n}\n\nexports.hasExtendingTokensTypesMapProperty = hasExtendingTokensTypesMapProperty;\n\nfunction isTokenType(tokType) {\n  return utils_1.has(tokType, \"tokenTypeIdx\");\n}\n\nexports.isTokenType = isTokenType;","map":{"version":3,"mappings":"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","names":["tokenStructuredMatcher","tokInstance","tokConstructor","instanceType","tokenTypeIdx","isParent","categoryMatchesMap","exports","tokenStructuredMatcherNoCategories","token","tokType","augmentTokenTypes","tokenTypes","tokenTypesAndParents","expandCategories","assignTokenDefaultProps","assignCategoriesMapProp","assignCategoriesTokensProp","utils_1","categoryMatches","length","result","categories","searching","currTokType","CATEGORIES","newCategories","concat","hasShortKeyProperty","hasCategoriesProperty","hasExtendingTokensTypesProperty","hasExtendingTokensTypesMapProperty","val","key","push","singleAssignCategoriesToksMap","path","nextNode","pathNode","nextCategory","newPath","isTokenType"],"sourceRoot":"","sources":["../../../src/scan/tokens.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}