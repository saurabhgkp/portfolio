{"ast":null,"code":"import * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Color, Vector3, Spherical, AdditiveBlending, ShaderMaterial } from 'three';\n\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader:\n      /* glsl */\n      `\n      uniform float time;\n      attribute float size;\n      varying vec3 vColor;\n      void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\n        gl_Position = projectionMatrix * mvPosition;\n      }`,\n      fragmentShader:\n      /* glsl */\n      `\n      uniform sampler2D pointTexture;\n      uniform float fade;\n      varying vec3 vColor;\n      void main() {\n        float opacity = 1.0;\n        if (fade == 1.0) {\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\n        }\n        gl_FragColor = vec4(vColor, opacity);\n      }`\n    });\n  }\n\n}\n\nconst genStar = r => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\n\nconst Stars = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    radius = 100,\n    depth = 50,\n    count = 5000,\n    saturation = 0,\n    factor = 4,\n    fade = false\n  } = _ref;\n  const material = React.useRef();\n  const [position, color, size] = React.useMemo(() => {\n    const positions = [];\n    const colors = [];\n    const sizes = Array.from({\n      length: count\n    }, () => (0.5 + 0.5 * Math.random()) * factor);\n    const color = new Color();\n    let r = radius + depth;\n    const increment = depth / count;\n\n    for (let i = 0; i < count; i++) {\n      r -= increment * Math.random();\n      positions.push(...genStar(r).toArray());\n      color.setHSL(i / count, saturation, 0.9);\n      colors.push(color.r, color.g, color.b);\n    }\n\n    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n  }, [count, depth, factor, radius, saturation]);\n  useFrame(state => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime()));\n  const [starfieldMaterial] = React.useState(() => new StarfieldMaterial());\n  return /*#__PURE__*/React.createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", {\n    attach: \"geometry\"\n  }, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'position'],\n    args: [position, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'color'],\n    args: [color, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'size'],\n    args: [size, 1]\n  })), /*#__PURE__*/React.createElement(\"primitive\", {\n    dispose: undefined,\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    transparent: true,\n    vertexColors: true\n  }));\n});\nexport { Stars };","map":{"version":3,"names":["React","useFrame","Color","Vector3","Spherical","AdditiveBlending","ShaderMaterial","StarfieldMaterial","constructor","uniforms","time","value","fade","vertexShader","fragmentShader","genStar","r","setFromSpherical","Math","acos","random","PI","Stars","forwardRef","ref","radius","depth","count","saturation","factor","material","useRef","position","color","size","useMemo","positions","colors","sizes","Array","from","length","increment","i","push","toArray","setHSL","g","b","Float32Array","state","current","clock","getElapsedTime","starfieldMaterial","useState","createElement","attach","attachObject","args","dispose","undefined","object","blending","transparent","vertexColors"],"sources":["/home/cliffexpc63/my example/portfolio/node_modules/@react-three/drei/core/Stars.js"],"sourcesContent":["import * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Color, Vector3, Spherical, AdditiveBlending, ShaderMaterial } from 'three';\n\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader:\n      /* glsl */\n      `\n      uniform float time;\n      attribute float size;\n      varying vec3 vColor;\n      void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\n        gl_Position = projectionMatrix * mvPosition;\n      }`,\n      fragmentShader:\n      /* glsl */\n      `\n      uniform sampler2D pointTexture;\n      uniform float fade;\n      varying vec3 vColor;\n      void main() {\n        float opacity = 1.0;\n        if (fade == 1.0) {\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\n        }\n        gl_FragColor = vec4(vColor, opacity);\n      }`\n    });\n  }\n\n}\n\nconst genStar = r => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\n\nconst Stars = /*#__PURE__*/React.forwardRef(({\n  radius = 100,\n  depth = 50,\n  count = 5000,\n  saturation = 0,\n  factor = 4,\n  fade = false\n}, ref) => {\n  const material = React.useRef();\n  const [position, color, size] = React.useMemo(() => {\n    const positions = [];\n    const colors = [];\n    const sizes = Array.from({\n      length: count\n    }, () => (0.5 + 0.5 * Math.random()) * factor);\n    const color = new Color();\n    let r = radius + depth;\n    const increment = depth / count;\n\n    for (let i = 0; i < count; i++) {\n      r -= increment * Math.random();\n      positions.push(...genStar(r).toArray());\n      color.setHSL(i / count, saturation, 0.9);\n      colors.push(color.r, color.g, color.b);\n    }\n\n    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n  }, [count, depth, factor, radius, saturation]);\n  useFrame(state => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime()));\n  const [starfieldMaterial] = React.useState(() => new StarfieldMaterial());\n  return /*#__PURE__*/React.createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", {\n    attach: \"geometry\"\n  }, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'position'],\n    args: [position, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'color'],\n    args: [color, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'size'],\n    args: [size, 1]\n  })), /*#__PURE__*/React.createElement(\"primitive\", {\n    dispose: undefined,\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    transparent: true,\n    vertexColors: true\n  }));\n});\n\nexport { Stars };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}