{"ast":null,"code":"import { UniformsUtils, ShaderMaterial } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { DotScreenShader } from '../shaders/DotScreenShader.js';\nvar DotScreenPass = function DotScreenPass(center, angle, scale) {\n  if (DotScreenShader === undefined) console.error('THREE.DotScreenPass relies on DotScreenShader');\n  var shader = DotScreenShader;\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  if (center !== undefined) this.uniforms['center'].value.copy(center);\n  if (angle !== undefined) this.uniforms['angle'].value = angle;\n  if (scale !== undefined) this.uniforms['scale'].value = scale;\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  this.fsQuad = new FullScreenQuad(this.material);\n};\nDotScreenPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: DotScreenPass,\n  render: function render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['tSize'].value.set(readBuffer.width, readBuffer.height);\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n});\nexport { DotScreenPass };","map":null,"metadata":{},"sourceType":"module"}