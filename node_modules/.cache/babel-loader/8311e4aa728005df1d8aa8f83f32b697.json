{"ast":null,"code":"import { Color } from 'three';\nimport { InputNode } from '../core/InputNode.js';\nimport { NodeUtils } from '../core/NodeUtils.js';\nfunction ColorNode(color, g, b) {\n  InputNode.call(this, 'c');\n  this.value = color instanceof Color ? color : new Color(color || 0, g, b);\n}\nColorNode.prototype = Object.create(InputNode.prototype);\nColorNode.prototype.constructor = ColorNode;\nColorNode.prototype.nodeType = 'Color';\nNodeUtils.addShortcuts(ColorNode.prototype, 'value', ['r', 'g', 'b']);\nColorNode.prototype.generateReadonly = function (builder, output, uuid, type\n/*, ns, needsUpdate */) {\n  return builder.format('vec3( ' + this.r + ', ' + this.g + ', ' + this.b + ' )', type, output);\n};\nColorNode.prototype.copy = function (source) {\n  InputNode.prototype.copy.call(this, source);\n  this.value.copy(source);\n  return this;\n};\nColorNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.r = this.r;\n    data.g = this.g;\n    data.b = this.b;\n    if (this.readonly === true) data.readonly = true;\n  }\n  return data;\n};\nexport { ColorNode };","map":null,"metadata":{},"sourceType":"module"}