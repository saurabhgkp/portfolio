{"ast":null,"code":"\"use strict\";\n/* istanbul ignore next */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nextPossibleTokensAfter = exports.possiblePathsFrom = exports.NextTerminalAfterAtLeastOneSepWalker = exports.NextTerminalAfterAtLeastOneWalker = exports.NextTerminalAfterManySepWalker = exports.NextTerminalAfterManyWalker = exports.AbstractNextTerminalAfterProductionWalker = exports.NextAfterTokenWalker = exports.AbstractNextPossibleTokensWalker = void 0;\n\nvar rest_1 = require(\"./rest\");\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar first_1 = require(\"./first\");\n\nvar gast_public_1 = require(\"./gast/gast_public\");\n\nvar AbstractNextPossibleTokensWalker =\n/** @class */\nfunction (_super) {\n  __extends(AbstractNextPossibleTokensWalker, _super);\n\n  function AbstractNextPossibleTokensWalker(topProd, path) {\n    var _this = _super.call(this)\n    /* istanbul ignore next */\n    || this;\n\n    _this.topProd = topProd;\n    _this.path = path;\n    _this.possibleTokTypes = [];\n    _this.nextProductionName = \"\";\n    _this.nextProductionOccurrence = 0;\n    _this.found = false;\n    _this.isAtEndOfPath = false;\n    return _this;\n  }\n\n  AbstractNextPossibleTokensWalker.prototype.startWalking = function () {\n    this.found = false;\n\n    if (this.path.ruleStack[0] !== this.topProd.name) {\n      throw Error(\"The path does not start with the walker's top Rule!\");\n    } // immutable for the win\n\n\n    this.ruleStack = utils_1.cloneArr(this.path.ruleStack).reverse(); // intelij bug requires assertion\n\n    this.occurrenceStack = utils_1.cloneArr(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n    // already verified that the first production is valid, we now seek the 2nd production\n\n    this.ruleStack.pop();\n    this.occurrenceStack.pop();\n    this.updateExpectedNext();\n    this.walk(this.topProd);\n    return this.possibleTokTypes;\n  };\n\n  AbstractNextPossibleTokensWalker.prototype.walk = function (prod, prevRest) {\n    if (prevRest === void 0) {\n      prevRest = [];\n    } // stop scanning once we found the path\n\n\n    if (!this.found) {\n      _super.prototype.walk.call(this, prod, prevRest);\n    }\n  };\n\n  AbstractNextPossibleTokensWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {\n    // found the next production, need to keep walking in it\n    if (refProd.referencedRule.name === this.nextProductionName && refProd.idx === this.nextProductionOccurrence) {\n      var fullRest = currRest.concat(prevRest);\n      this.updateExpectedNext();\n      this.walk(refProd.referencedRule, fullRest);\n    }\n  };\n\n  AbstractNextPossibleTokensWalker.prototype.updateExpectedNext = function () {\n    // need to consume the Terminal\n    if (utils_1.isEmpty(this.ruleStack)) {\n      // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n      // really seeking is the last Terminal...\n      this.nextProductionName = \"\";\n      this.nextProductionOccurrence = 0;\n      this.isAtEndOfPath = true;\n    } else {\n      this.nextProductionName = this.ruleStack.pop();\n      this.nextProductionOccurrence = this.occurrenceStack.pop();\n    }\n  };\n\n  return AbstractNextPossibleTokensWalker;\n}(rest_1.RestWalker);\n\nexports.AbstractNextPossibleTokensWalker = AbstractNextPossibleTokensWalker;\n\nvar NextAfterTokenWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextAfterTokenWalker, _super);\n\n  function NextAfterTokenWalker(topProd, path) {\n    var _this = _super.call(this, topProd, path)\n    /* istanbul ignore next */\n    || this;\n\n    _this.path = path;\n    _this.nextTerminalName = \"\";\n    _this.nextTerminalOccurrence = 0;\n    _this.nextTerminalName = _this.path.lastTok.name;\n    _this.nextTerminalOccurrence = _this.path.lastTokOccurrence;\n    return _this;\n  }\n\n  NextAfterTokenWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {\n    if (this.isAtEndOfPath && terminal.terminalType.name === this.nextTerminalName && terminal.idx === this.nextTerminalOccurrence && !this.found) {\n      var fullRest = currRest.concat(prevRest);\n      var restProd = new gast_public_1.Alternative({\n        definition: fullRest\n      });\n      this.possibleTokTypes = first_1.first(restProd);\n      this.found = true;\n    }\n  };\n\n  return NextAfterTokenWalker;\n}(AbstractNextPossibleTokensWalker);\n\nexports.NextAfterTokenWalker = NextAfterTokenWalker;\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\n\nvar AbstractNextTerminalAfterProductionWalker =\n/** @class */\nfunction (_super) {\n  __extends(AbstractNextTerminalAfterProductionWalker, _super);\n\n  function AbstractNextTerminalAfterProductionWalker(topRule, occurrence) {\n    var _this = _super.call(this)\n    /* istanbul ignore next */\n    || this;\n\n    _this.topRule = topRule;\n    _this.occurrence = occurrence;\n    _this.result = {\n      token: undefined,\n      occurrence: undefined,\n      isEndOfRule: undefined\n    };\n    return _this;\n  }\n\n  AbstractNextTerminalAfterProductionWalker.prototype.startWalking = function () {\n    this.walk(this.topRule);\n    return this.result;\n  };\n\n  return AbstractNextTerminalAfterProductionWalker;\n}(rest_1.RestWalker);\n\nexports.AbstractNextTerminalAfterProductionWalker = AbstractNextTerminalAfterProductionWalker;\n\nvar NextTerminalAfterManyWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextTerminalAfterManyWalker, _super);\n\n  function NextTerminalAfterManyWalker() {\n    return _super !== null && _super.apply(this, arguments)\n    /* istanbul ignore next */\n    || this;\n  }\n\n  NextTerminalAfterManyWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n    if (manyProd.idx === this.occurrence) {\n      var firstAfterMany = utils_1.first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterMany === undefined;\n\n      if (firstAfterMany instanceof gast_public_1.Terminal) {\n        this.result.token = firstAfterMany.terminalType;\n        this.result.occurrence = firstAfterMany.idx;\n      }\n    } else {\n      _super.prototype.walkMany.call(this, manyProd, currRest, prevRest);\n    }\n  };\n\n  return NextTerminalAfterManyWalker;\n}(AbstractNextTerminalAfterProductionWalker);\n\nexports.NextTerminalAfterManyWalker = NextTerminalAfterManyWalker;\n\nvar NextTerminalAfterManySepWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextTerminalAfterManySepWalker, _super);\n\n  function NextTerminalAfterManySepWalker() {\n    return _super !== null && _super.apply(this, arguments)\n    /* istanbul ignore next */\n    || this;\n  }\n\n  NextTerminalAfterManySepWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n    if (manySepProd.idx === this.occurrence) {\n      var firstAfterManySep = utils_1.first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterManySep === undefined;\n\n      if (firstAfterManySep instanceof gast_public_1.Terminal) {\n        this.result.token = firstAfterManySep.terminalType;\n        this.result.occurrence = firstAfterManySep.idx;\n      }\n    } else {\n      _super.prototype.walkManySep.call(this, manySepProd, currRest, prevRest);\n    }\n  };\n\n  return NextTerminalAfterManySepWalker;\n}(AbstractNextTerminalAfterProductionWalker);\n\nexports.NextTerminalAfterManySepWalker = NextTerminalAfterManySepWalker;\n\nvar NextTerminalAfterAtLeastOneWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextTerminalAfterAtLeastOneWalker, _super);\n\n  function NextTerminalAfterAtLeastOneWalker() {\n    return _super !== null && _super.apply(this, arguments)\n    /* istanbul ignore next */\n    || this;\n  }\n\n  NextTerminalAfterAtLeastOneWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n    if (atLeastOneProd.idx === this.occurrence) {\n      var firstAfterAtLeastOne = utils_1.first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n\n      if (firstAfterAtLeastOne instanceof gast_public_1.Terminal) {\n        this.result.token = firstAfterAtLeastOne.terminalType;\n        this.result.occurrence = firstAfterAtLeastOne.idx;\n      }\n    } else {\n      _super.prototype.walkAtLeastOne.call(this, atLeastOneProd, currRest, prevRest);\n    }\n  };\n\n  return NextTerminalAfterAtLeastOneWalker;\n}(AbstractNextTerminalAfterProductionWalker);\n\nexports.NextTerminalAfterAtLeastOneWalker = NextTerminalAfterAtLeastOneWalker; // TODO: reduce code duplication in the AfterWalkers\n\nvar NextTerminalAfterAtLeastOneSepWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextTerminalAfterAtLeastOneSepWalker, _super);\n\n  function NextTerminalAfterAtLeastOneSepWalker() {\n    return _super !== null && _super.apply(this, arguments)\n    /* istanbul ignore next */\n    || this;\n  }\n\n  NextTerminalAfterAtLeastOneSepWalker.prototype.walkAtLeastOneSep = function (atleastOneSepProd, currRest, prevRest) {\n    if (atleastOneSepProd.idx === this.occurrence) {\n      var firstAfterfirstAfterAtLeastOneSep = utils_1.first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;\n\n      if (firstAfterfirstAfterAtLeastOneSep instanceof gast_public_1.Terminal) {\n        this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n        this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n      }\n    } else {\n      _super.prototype.walkAtLeastOneSep.call(this, atleastOneSepProd, currRest, prevRest);\n    }\n  };\n\n  return NextTerminalAfterAtLeastOneSepWalker;\n}(AbstractNextTerminalAfterProductionWalker);\n\nexports.NextTerminalAfterAtLeastOneSepWalker = NextTerminalAfterAtLeastOneSepWalker;\n\nfunction possiblePathsFrom(targetDef, maxLength, currPath) {\n  if (currPath === void 0) {\n    currPath = [];\n  } // avoid side effects\n\n\n  currPath = utils_1.cloneArr(currPath);\n  var result = [];\n  var i = 0; // TODO: avoid inner funcs\n\n  function remainingPathWith(nextDef) {\n    return nextDef.concat(utils_1.drop(targetDef, i + 1));\n  } // TODO: avoid inner funcs\n\n\n  function getAlternativesForProd(definition) {\n    var alternatives = possiblePathsFrom(remainingPathWith(definition), maxLength, currPath);\n    return result.concat(alternatives);\n  }\n  /**\n   * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n   * following (rest) of the targetDef.\n   *\n   * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n   * the optional production.\n   */\n\n\n  while (currPath.length < maxLength && i < targetDef.length) {\n    var prod = targetDef[i];\n    /* istanbul ignore else */\n\n    if (prod instanceof gast_public_1.Alternative) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof gast_public_1.NonTerminal) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof gast_public_1.Option) {\n      result = getAlternativesForProd(prod.definition);\n    } else if (prod instanceof gast_public_1.RepetitionMandatory) {\n      var newDef = prod.definition.concat([new gast_public_1.Repetition({\n        definition: prod.definition\n      })]);\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof gast_public_1.RepetitionMandatoryWithSeparator) {\n      var newDef = [new gast_public_1.Alternative({\n        definition: prod.definition\n      }), new gast_public_1.Repetition({\n        definition: [new gast_public_1.Terminal({\n          terminalType: prod.separator\n        })].concat(prod.definition)\n      })];\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof gast_public_1.RepetitionWithSeparator) {\n      var newDef = prod.definition.concat([new gast_public_1.Repetition({\n        definition: [new gast_public_1.Terminal({\n          terminalType: prod.separator\n        })].concat(prod.definition)\n      })]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof gast_public_1.Repetition) {\n      var newDef = prod.definition.concat([new gast_public_1.Repetition({\n        definition: prod.definition\n      })]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof gast_public_1.Alternation) {\n      utils_1.forEach(prod.definition, function (currAlt) {\n        // TODO: this is a limited check for empty alternatives\n        //   It would prevent a common case of infinite loops during parser initialization.\n        //   However **in-directly** empty alternatives may still cause issues.\n        if (utils_1.isEmpty(currAlt.definition) === false) {\n          result = getAlternativesForProd(currAlt.definition);\n        }\n      });\n      return result;\n    } else if (prod instanceof gast_public_1.Terminal) {\n      currPath.push(prod.terminalType);\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n\n    i++;\n  }\n\n  result.push({\n    partialPath: currPath,\n    suffixDef: utils_1.drop(targetDef, i)\n  });\n  return result;\n}\n\nexports.possiblePathsFrom = possiblePathsFrom;\n\nfunction nextPossibleTokensAfter(initialDef, tokenVector, tokMatcher, maxLookAhead) {\n  var EXIT_NON_TERMINAL = \"EXIT_NONE_TERMINAL\"; // to avoid creating a new Array each time.\n\n  var EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n  var EXIT_ALTERNATIVE = \"EXIT_ALTERNATIVE\";\n  var foundCompletePath = false;\n  var tokenVectorLength = tokenVector.length;\n  var minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n  var result = [];\n  var possiblePaths = [];\n  possiblePaths.push({\n    idx: -1,\n    def: initialDef,\n    ruleStack: [],\n    occurrenceStack: []\n  });\n\n  while (!utils_1.isEmpty(possiblePaths)) {\n    var currPath = possiblePaths.pop(); // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n\n    if (currPath === EXIT_ALTERNATIVE) {\n      if (foundCompletePath && utils_1.last(possiblePaths).idx <= minimalAlternativesIndex) {\n        // remove irrelevant alternative\n        possiblePaths.pop();\n      }\n\n      continue;\n    }\n\n    var currDef = currPath.def;\n    var currIdx = currPath.idx;\n    var currRuleStack = currPath.ruleStack;\n    var currOccurrenceStack = currPath.occurrenceStack; // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n\n    if (utils_1.isEmpty(currDef)) {\n      continue;\n    }\n\n    var prod = currDef[0];\n    /* istanbul ignore else */\n\n    if (prod === EXIT_NON_TERMINAL) {\n      var nextPath = {\n        idx: currIdx,\n        def: utils_1.drop(currDef),\n        ruleStack: utils_1.dropRight(currRuleStack),\n        occurrenceStack: utils_1.dropRight(currOccurrenceStack)\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof gast_public_1.Terminal) {\n      /* istanbul ignore else */\n      if (currIdx < tokenVectorLength - 1) {\n        var nextIdx = currIdx + 1;\n        var actualToken = tokenVector[nextIdx];\n\n        if (tokMatcher(actualToken, prod.terminalType)) {\n          var nextPath = {\n            idx: nextIdx,\n            def: utils_1.drop(currDef),\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack\n          };\n          possiblePaths.push(nextPath);\n        } // end of the line\n\n      } else if (currIdx === tokenVectorLength - 1) {\n        // IGNORE ABOVE ELSE\n        result.push({\n          nextTokenType: prod.terminalType,\n          nextTokenOccurrence: prod.idx,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        });\n        foundCompletePath = true;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    } else if (prod instanceof gast_public_1.NonTerminal) {\n      var newRuleStack = utils_1.cloneArr(currRuleStack);\n      newRuleStack.push(prod.nonTerminalName);\n      var newOccurrenceStack = utils_1.cloneArr(currOccurrenceStack);\n      newOccurrenceStack.push(prod.idx);\n      var nextPath = {\n        idx: currIdx,\n        def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, utils_1.drop(currDef)),\n        ruleStack: newRuleStack,\n        occurrenceStack: newOccurrenceStack\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof gast_public_1.Option) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      var nextPathWithout = {\n        idx: currIdx,\n        def: utils_1.drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWithout); // required marker to avoid backtracking paths whose higher priority alternatives already matched\n\n      possiblePaths.push(EXIT_ALTERNATIVE);\n      var nextPathWith = {\n        idx: currIdx,\n        def: prod.definition.concat(utils_1.drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof gast_public_1.RepetitionMandatory) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      var secondIteration = new gast_public_1.Repetition({\n        definition: prod.definition,\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([secondIteration], utils_1.drop(currDef));\n      var nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof gast_public_1.RepetitionMandatoryWithSeparator) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      var separatorGast = new gast_public_1.Terminal({\n        terminalType: prod.separator\n      });\n      var secondIteration = new gast_public_1.Repetition({\n        definition: [separatorGast].concat(prod.definition),\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([secondIteration], utils_1.drop(currDef));\n      var nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof gast_public_1.RepetitionWithSeparator) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      var nextPathWithout = {\n        idx: currIdx,\n        def: utils_1.drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWithout); // required marker to avoid backtracking paths whose higher priority alternatives already matched\n\n      possiblePaths.push(EXIT_ALTERNATIVE);\n      var separatorGast = new gast_public_1.Terminal({\n        terminalType: prod.separator\n      });\n      var nthRepetition = new gast_public_1.Repetition({\n        definition: [separatorGast].concat(prod.definition),\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([nthRepetition], utils_1.drop(currDef));\n      var nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof gast_public_1.Repetition) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      var nextPathWithout = {\n        idx: currIdx,\n        def: utils_1.drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWithout); // required marker to avoid backtracking paths whose higher priority alternatives already matched\n\n      possiblePaths.push(EXIT_ALTERNATIVE); // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n\n      var nthRepetition = new gast_public_1.Repetition({\n        definition: prod.definition,\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([nthRepetition], utils_1.drop(currDef));\n      var nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof gast_public_1.Alternation) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      for (var i = prod.definition.length - 1; i >= 0; i--) {\n        var currAlt = prod.definition[i];\n        var currAltPath = {\n          idx: currIdx,\n          def: currAlt.definition.concat(utils_1.drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(currAltPath);\n        possiblePaths.push(EXIT_ALTERNATIVE);\n      }\n    } else if (prod instanceof gast_public_1.Alternative) {\n      possiblePaths.push({\n        idx: currIdx,\n        def: prod.definition.concat(utils_1.drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      });\n    } else if (prod instanceof gast_public_1.Rule) {\n      // last because we should only encounter at most a single one of these per invocation.\n      possiblePaths.push(expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack));\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n\n  return result;\n}\n\nexports.nextPossibleTokensAfter = nextPossibleTokensAfter;\n\nfunction expandTopLevelRule(topRule, currIdx, currRuleStack, currOccurrenceStack) {\n  var newRuleStack = utils_1.cloneArr(currRuleStack);\n  newRuleStack.push(topRule.name);\n  var newCurrOccurrenceStack = utils_1.cloneArr(currOccurrenceStack); // top rule is always assumed to have been called with occurrence index 1\n\n  newCurrOccurrenceStack.push(1);\n  return {\n    idx: currIdx,\n    def: topRule.definition,\n    ruleStack: newRuleStack,\n    occurrenceStack: newCurrOccurrenceStack\n  };\n}","map":{"version":3,"mappings":"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","names":["__extends","topProd","path","_super","_this","AbstractNextPossibleTokensWalker","found","ruleStack","name","Error","utils_1","reverse","occurrenceStack","pop","updateExpectedNext","walk","possibleTokTypes","prod","prevRest","call","refProd","currRest","referencedRule","nextProductionName","idx","nextProductionOccurrence","fullRest","concat","isAtEndOfPath","rest_1","exports","nextTerminalName","lastTok","nextTerminalOccurrence","lastTokOccurrence","NextAfterTokenWalker","terminal","terminalType","restProd","gast_public_1","definition","first_1","topRule","occurrence","token","undefined","isEndOfRule","AbstractNextTerminalAfterProductionWalker","result","NextTerminalAfterManyWalker","manyProd","firstAfterMany","walkMany","NextTerminalAfterManySepWalker","manySepProd","firstAfterManySep","walkManySep","NextTerminalAfterAtLeastOneWalker","atLeastOneProd","firstAfterAtLeastOne","walkAtLeastOne","NextTerminalAfterAtLeastOneSepWalker","atleastOneSepProd","firstAfterfirstAfterAtLeastOneSep","walkAtLeastOneSep","possiblePathsFrom","targetDef","maxLength","currPath","i","remainingPathWith","nextDef","getAlternativesForProd","alternatives","length","newDef","separator","currAlt","push","partialPath","suffixDef","nextPossibleTokensAfter","initialDef","tokenVector","tokMatcher","maxLookAhead","EXIT_NON_TERMINAL","EXIT_NON_TERMINAL_ARR","EXIT_ALTERNATIVE","foundCompletePath","tokenVectorLength","minimalAlternativesIndex","possiblePaths","def","currDef","currIdx","currRuleStack","currOccurrenceStack","nextPath","nextIdx","actualToken","nextTokenType","nextTokenOccurrence","newRuleStack","nonTerminalName","newOccurrenceStack","nextPathWithout","nextPathWith","secondIteration","separatorGast","nthRepetition","currAltPath","expandTopLevelRule","newCurrOccurrenceStack"],"sourceRoot":"","sources":["../../../../src/parse/grammar/interpreter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}