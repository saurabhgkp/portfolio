{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\nimport { FloatNode } from '../inputs/FloatNode.js';\nimport { TextureCubeUVNode } from './TextureCubeUVNode.js';\nimport { ReflectNode } from '../accessors/ReflectNode.js';\nimport { NormalNode } from '../accessors/NormalNode.js';\nfunction TextureCubeNode(value, uv, bias) {\n  TempNode.call(this, 'v4');\n  this.value = value;\n  this.radianceNode = new TextureCubeUVNode(this.value, uv || new ReflectNode(ReflectNode.VECTOR),\n  // bias should be replaced in builder.context in build process\n  bias);\n  this.irradianceNode = new TextureCubeUVNode(this.value, new NormalNode(NormalNode.WORLD), new FloatNode(1).setReadonly(true));\n}\nTextureCubeNode.prototype = Object.create(TempNode.prototype);\nTextureCubeNode.prototype.constructor = TextureCubeNode;\nTextureCubeNode.prototype.nodeType = 'TextureCube';\nTextureCubeNode.prototype.generate = function (builder, output) {\n  if (builder.isShader('fragment')) {\n    builder.require('irradiance');\n    if (builder.context.bias) {\n      builder.context.bias.setTexture(this.value);\n    }\n    var scopeNode = builder.slot === 'irradiance' ? this.irradianceNode : this.radianceNode;\n    return scopeNode.build(builder, output);\n  } else {\n    console.warn('THREE.TextureCubeNode is not compatible with ' + builder.shader + ' shader.');\n    return builder.format('vec4( 0.0 )', this.getType(builder), output);\n  }\n};\nTextureCubeNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.value = source.value;\n  return this;\n};\nTextureCubeNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.value = this.value.toJSON(meta).uuid;\n  }\n  return data;\n};\nexport { TextureCubeNode };","map":null,"metadata":{},"sourceType":"module"}