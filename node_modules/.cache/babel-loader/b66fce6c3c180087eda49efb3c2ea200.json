{"ast":null,"code":"// For speed and readability this script is processed to replace the macro-like calls\n// with inline buffer reads. See generate-cast-functions.js.\nimport { Box3, Vector3, Mesh, Matrix4 } from 'three';\nimport { intersectTris, intersectClosestTri } from './Utils/RayIntersectTriUtilities.js';\nimport { arrayToBox } from './Utils/BufferNodeUtils.js';\nimport { OrientedBox } from './Utils/OrientedBox.js';\nimport { setTriangle } from './Utils/TriangleUtils.js';\nimport { SeparatingAxisTriangle } from './Utils/SeparatingAxisTriangle.js';\nimport { CONTAINED } from './Constants.js';\nvar boundingBox = new Box3();\nvar boxIntersection = new Vector3();\nvar xyzFields = ['x', 'y', 'z'];\n\nfunction IS_LEAF(n16, uint16Array) {\n  return uint16Array[n16 + 15] === 0xFFFF;\n}\n\nfunction OFFSET(n32, uint32Array) {\n  return uint32Array[n32 + 6];\n}\n\nfunction COUNT(n32, uint16Array) {\n  return uint16Array[n32 + 14];\n}\n\nfunction LEFT_NODE(n32) {\n  return n32 + 8;\n}\n\nfunction RIGHT_NODE(n32, uint32Array) {\n  return uint32Array[n32 + 6];\n}\n\nfunction SPLIT_AXIS(n32, uint32Array) {\n  return uint32Array[n32 + 7];\n}\n\nfunction BOUNDING_DATA_INDEX(n32) {\n  return n32;\n}\n\nexport function raycast(nodeIndex32, mesh, geometry, raycaster, ray, intersects) {\n  var nodeIndex16 = nodeIndex32 * 2,\n      float32Array = _float32Array,\n      uint16Array = _uint16Array,\n      uint32Array = _uint32Array;\n  var isLeaf = IS_LEAF(nodeIndex16, uint16Array);\n\n  if (isLeaf) {\n    var offset = OFFSET(nodeIndex32, uint32Array);\n    var count = COUNT(nodeIndex16, uint16Array);\n    intersectTris(mesh, geometry, raycaster, ray, offset, count, intersects);\n  } else {\n    var leftIndex = LEFT_NODE(nodeIndex32);\n\n    if (intersectRay(leftIndex, float32Array, ray, boxIntersection)) {\n      raycast(leftIndex, mesh, geometry, raycaster, ray, intersects);\n    }\n\n    var rightIndex = RIGHT_NODE(nodeIndex32, uint32Array);\n\n    if (intersectRay(rightIndex, float32Array, ray, boxIntersection)) {\n      raycast(rightIndex, mesh, geometry, raycaster, ray, intersects);\n    }\n  }\n}\nexport function raycastFirst(nodeIndex32, mesh, geometry, raycaster, ray) {\n  var nodeIndex16 = nodeIndex32 * 2,\n      float32Array = _float32Array,\n      uint16Array = _uint16Array,\n      uint32Array = _uint32Array;\n  var isLeaf = IS_LEAF(nodeIndex16, uint16Array);\n\n  if (isLeaf) {\n    var offset = OFFSET(nodeIndex32, uint32Array);\n    var count = COUNT(nodeIndex16, uint16Array);\n    return intersectClosestTri(mesh, geometry, raycaster, ray, offset, count);\n  } else {\n    // consider the position of the split plane with respect to the oncoming ray; whichever direction\n    // the ray is coming from, look for an intersection among that side of the tree first\n    var splitAxis = SPLIT_AXIS(nodeIndex32, uint32Array);\n    var xyzAxis = xyzFields[splitAxis];\n    var rayDir = ray.direction[xyzAxis];\n    var leftToRight = rayDir >= 0; // c1 is the child to check first\n\n    var c1, c2;\n\n    if (leftToRight) {\n      c1 = LEFT_NODE(nodeIndex32);\n      c2 = RIGHT_NODE(nodeIndex32, uint32Array);\n    } else {\n      c1 = RIGHT_NODE(nodeIndex32, uint32Array);\n      c2 = LEFT_NODE(nodeIndex32);\n    }\n\n    var c1Intersection = intersectRay(c1, float32Array, ray, boxIntersection);\n    var c1Result = c1Intersection ? raycastFirst(c1, mesh, geometry, raycaster, ray) : null; // if we got an intersection in the first node and it's closer than the second node's bounding\n    // box, we don't need to consider the second node because it couldn't possibly be a better result\n\n    if (c1Result) {\n      // check if the point is within the second bounds\n      var point = c1Result.localPoint[xyzAxis];\n      var isOutside = leftToRight ? point <= float32Array[c2 + splitAxis] : // min bounding data\n      point >= float32Array[c2 + splitAxis + 3]; // max bounding data\n\n      if (isOutside) {\n        return c1Result;\n      }\n    } // either there was no intersection in the first node, or there could still be a closer\n    // intersection in the second, so check the second node and then take the better of the two\n\n\n    var c2Intersection = intersectRay(c2, float32Array, ray, boxIntersection);\n    var c2Result = c2Intersection ? raycastFirst(c2, mesh, geometry, raycaster, ray) : null;\n\n    if (c1Result && c2Result) {\n      return c1Result.distance <= c2Result.distance ? c1Result : c2Result;\n    } else {\n      return c1Result || c2Result || null;\n    }\n  }\n}\nexport var shapecast = function () {\n  var _box1 = new Box3();\n\n  var _box2 = new Box3();\n\n  return function shapecast(nodeIndex32, geometry, intersectsBoundsFunc, intersectsRangeFunc) {\n    var nodeScoreFunc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    var nodeIndexByteOffset = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    var depth = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n\n    // Define these inside the function so it has access to the local variables needed\n    // when converting to the buffer equivalents\n    function getLeftOffset(nodeIndex32) {\n      var nodeIndex16 = nodeIndex32 * 2,\n          uint16Array = _uint16Array,\n          uint32Array = _uint32Array; // traverse until we find a leaf\n\n      while (!IS_LEAF(nodeIndex16, uint16Array)) {\n        nodeIndex32 = LEFT_NODE(nodeIndex32);\n        nodeIndex16 = nodeIndex32 * 2;\n      }\n\n      return OFFSET(nodeIndex32, uint32Array);\n    }\n\n    function getRightEndOffset(nodeIndex32) {\n      var nodeIndex16 = nodeIndex32 * 2,\n          uint16Array = _uint16Array,\n          uint32Array = _uint32Array; // traverse until we find a leaf\n\n      while (!IS_LEAF(nodeIndex16, uint16Array)) {\n        // adjust offset to point to the right node\n        nodeIndex32 = RIGHT_NODE(nodeIndex32, uint32Array);\n        nodeIndex16 = nodeIndex32 * 2;\n      } // return the end offset of the triangle range\n\n\n      return OFFSET(nodeIndex32, uint32Array) + COUNT(nodeIndex16, uint16Array);\n    }\n\n    var nodeIndex16 = nodeIndex32 * 2,\n        float32Array = _float32Array,\n        uint16Array = _uint16Array,\n        uint32Array = _uint32Array;\n    var isLeaf = IS_LEAF(nodeIndex16, uint16Array);\n\n    if (isLeaf) {\n      var offset = OFFSET(nodeIndex32, uint32Array);\n      var count = COUNT(nodeIndex16, uint16Array);\n      return intersectsRangeFunc(offset, count, false, depth, nodeIndexByteOffset + nodeIndex32);\n    } else {\n      var left = LEFT_NODE(nodeIndex32);\n      var right = RIGHT_NODE(nodeIndex32, uint32Array);\n      var c1 = left;\n      var c2 = right;\n      var score1, score2;\n      var box1, box2;\n\n      if (nodeScoreFunc) {\n        box1 = _box1;\n        box2 = _box2; // bounding data is not offset\n\n        arrayToBox(BOUNDING_DATA_INDEX(c1), float32Array, box1);\n        arrayToBox(BOUNDING_DATA_INDEX(c2), float32Array, box2);\n        score1 = nodeScoreFunc(box1);\n        score2 = nodeScoreFunc(box2);\n\n        if (score2 < score1) {\n          c1 = right;\n          c2 = left;\n          var temp = score1;\n          score1 = score2;\n          score2 = temp;\n          box1 = box2; // box2 is always set before use below\n        }\n      } // Check box 1 intersection\n\n\n      if (!box1) {\n        box1 = _box1;\n        arrayToBox(BOUNDING_DATA_INDEX(c1), float32Array, box1);\n      }\n\n      var isC1Leaf = IS_LEAF(c1 * 2, uint16Array);\n      var c1Intersection = intersectsBoundsFunc(box1, isC1Leaf, score1, depth + 1, nodeIndexByteOffset + c1);\n      var c1StopTraversal;\n\n      if (c1Intersection === CONTAINED) {\n        var _offset = getLeftOffset(c1);\n\n        var end = getRightEndOffset(c1);\n\n        var _count = end - _offset;\n\n        c1StopTraversal = intersectsRangeFunc(_offset, _count, true, depth + 1, nodeIndexByteOffset + c1);\n      } else {\n        c1StopTraversal = c1Intersection && shapecast(c1, geometry, intersectsBoundsFunc, intersectsRangeFunc, nodeScoreFunc, nodeIndexByteOffset, depth + 1);\n      }\n\n      if (c1StopTraversal) return true; // Check box 2 intersection\n      // cached box2 will have been overwritten by previous traversal\n\n      box2 = _box2;\n      arrayToBox(BOUNDING_DATA_INDEX(c2), float32Array, box2);\n      var isC2Leaf = IS_LEAF(c2 * 2, uint16Array);\n      var c2Intersection = intersectsBoundsFunc(box2, isC2Leaf, score2, depth + 1, nodeIndexByteOffset + c2);\n      var c2StopTraversal;\n\n      if (c2Intersection === CONTAINED) {\n        var _offset2 = getLeftOffset(c2);\n\n        var _end = getRightEndOffset(c2);\n\n        var _count2 = _end - _offset2;\n\n        c2StopTraversal = intersectsRangeFunc(_offset2, _count2, true, depth + 1, nodeIndexByteOffset + c2);\n      } else {\n        c2StopTraversal = c2Intersection && shapecast(c2, geometry, intersectsBoundsFunc, intersectsRangeFunc, nodeScoreFunc, nodeIndexByteOffset, depth + 1);\n      }\n\n      if (c2StopTraversal) return true;\n      return false;\n    }\n  };\n}();\nexport var intersectsGeometry = function () {\n  var triangle = new SeparatingAxisTriangle();\n  var triangle2 = new SeparatingAxisTriangle();\n  var cachedMesh = new Mesh();\n  var invertedMat = new Matrix4();\n  var obb = new OrientedBox();\n  var obb2 = new OrientedBox();\n  return function intersectsGeometry(nodeIndex32, mesh, geometry, otherGeometry, geometryToBvh) {\n    var cachedObb = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n    var nodeIndex16 = nodeIndex32 * 2,\n        float32Array = _float32Array,\n        uint16Array = _uint16Array,\n        uint32Array = _uint32Array;\n\n    if (cachedObb === null) {\n      if (!otherGeometry.boundingBox) {\n        otherGeometry.computeBoundingBox();\n      }\n\n      obb.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);\n      cachedObb = obb;\n    }\n\n    var isLeaf = IS_LEAF(nodeIndex16, uint16Array);\n\n    if (isLeaf) {\n      var thisGeometry = geometry;\n      var thisIndex = thisGeometry.index;\n      var thisPos = thisGeometry.attributes.position;\n      var index = otherGeometry.index;\n      var pos = otherGeometry.attributes.position;\n      var offset = OFFSET(nodeIndex32, uint32Array);\n      var count = COUNT(nodeIndex16, uint16Array); // get the inverse of the geometry matrix so we can transform our triangles into the\n      // geometry space we're trying to test. We assume there are fewer triangles being checked\n      // here.\n\n      invertedMat.copy(geometryToBvh).invert();\n\n      if (otherGeometry.boundsTree) {\n        arrayToBox(BOUNDING_DATA_INDEX(nodeIndex32), float32Array, obb2);\n        obb2.matrix.copy(invertedMat);\n        obb2.needsUpdate = true;\n        cachedMesh.geometry = otherGeometry;\n        var res = otherGeometry.boundsTree.shapecast(cachedMesh, {\n          intersectsBounds: function intersectsBounds(box) {\n            return obb2.intersectsBox(box);\n          },\n          intersectsTriangle: function intersectsTriangle(tri) {\n            tri.a.applyMatrix4(geometryToBvh);\n            tri.b.applyMatrix4(geometryToBvh);\n            tri.c.applyMatrix4(geometryToBvh);\n            tri.needsUpdate = true;\n\n            for (var i = offset * 3, l = (count + offset) * 3; i < l; i += 3) {\n              // this triangle needs to be transformed into the current BVH coordinate frame\n              setTriangle(triangle2, i, thisIndex, thisPos);\n              triangle2.needsUpdate = true;\n\n              if (tri.intersectsTriangle(triangle2)) {\n                return true;\n              }\n            }\n\n            return false;\n          }\n        });\n        cachedMesh.geometry = null;\n        return res;\n      } else {\n        for (var i = offset * 3, l = count + offset * 3; i < l; i += 3) {\n          // this triangle needs to be transformed into the current BVH coordinate frame\n          setTriangle(triangle, i, thisIndex, thisPos);\n          triangle.a.applyMatrix4(invertedMat);\n          triangle.b.applyMatrix4(invertedMat);\n          triangle.c.applyMatrix4(invertedMat);\n          triangle.needsUpdate = true;\n\n          for (var i2 = 0, l2 = index.count; i2 < l2; i2 += 3) {\n            setTriangle(triangle2, i2, index, pos);\n            triangle2.needsUpdate = true;\n\n            if (triangle.intersectsTriangle(triangle2)) {\n              return true;\n            }\n          }\n        }\n      }\n    } else {\n      var left = nodeIndex32 + 8;\n      var right = uint32Array[nodeIndex32 + 6];\n      arrayToBox(BOUNDING_DATA_INDEX(left), float32Array, boundingBox);\n      var leftIntersection = cachedObb.intersectsBox(boundingBox) && intersectsGeometry(left, mesh, geometry, otherGeometry, geometryToBvh, cachedObb);\n      if (leftIntersection) return true;\n      arrayToBox(BOUNDING_DATA_INDEX(right), float32Array, boundingBox);\n      var rightIntersection = cachedObb.intersectsBox(boundingBox) && intersectsGeometry(right, mesh, geometry, otherGeometry, geometryToBvh, cachedObb);\n      if (rightIntersection) return true;\n      return false;\n    }\n  };\n}();\n\nfunction intersectRay(nodeIndex32, array, ray, target) {\n  arrayToBox(nodeIndex32, array, boundingBox);\n  return ray.intersectBox(boundingBox, target);\n}\n\nvar bufferStack = [];\n\nvar _prevBuffer;\n\nvar _float32Array;\n\nvar _uint16Array;\n\nvar _uint32Array;\n\nexport function setBuffer(buffer) {\n  if (_prevBuffer) {\n    bufferStack.push(_prevBuffer);\n  }\n\n  _prevBuffer = buffer;\n  _float32Array = new Float32Array(buffer);\n  _uint16Array = new Uint16Array(buffer);\n  _uint32Array = new Uint32Array(buffer);\n}\nexport function clearBuffer() {\n  _prevBuffer = null;\n  _float32Array = null;\n  _uint16Array = null;\n  _uint32Array = null;\n\n  if (bufferStack.length) {\n    setBuffer(bufferStack.pop());\n  }\n}","map":{"version":3,"names":["Box3","Vector3","Mesh","Matrix4","intersectTris","intersectClosestTri","arrayToBox","OrientedBox","setTriangle","SeparatingAxisTriangle","CONTAINED","boundingBox","boxIntersection","xyzFields","IS_LEAF","n16","uint16Array","OFFSET","n32","uint32Array","COUNT","LEFT_NODE","RIGHT_NODE","SPLIT_AXIS","BOUNDING_DATA_INDEX","raycast","nodeIndex32","mesh","geometry","raycaster","ray","intersects","nodeIndex16","float32Array","_float32Array","_uint16Array","_uint32Array","isLeaf","offset","count","leftIndex","intersectRay","rightIndex","raycastFirst","splitAxis","xyzAxis","rayDir","direction","leftToRight","c1","c2","c1Intersection","c1Result","point","localPoint","isOutside","c2Intersection","c2Result","distance","shapecast","_box1","_box2","intersectsBoundsFunc","intersectsRangeFunc","nodeScoreFunc","nodeIndexByteOffset","depth","getLeftOffset","getRightEndOffset","left","right","score1","score2","box1","box2","temp","isC1Leaf","c1StopTraversal","end","isC2Leaf","c2StopTraversal","intersectsGeometry","triangle","triangle2","cachedMesh","invertedMat","obb","obb2","otherGeometry","geometryToBvh","cachedObb","computeBoundingBox","set","min","max","thisGeometry","thisIndex","index","thisPos","attributes","position","pos","copy","invert","boundsTree","matrix","needsUpdate","res","intersectsBounds","box","intersectsBox","intersectsTriangle","tri","a","applyMatrix4","b","c","i","l","i2","l2","leftIntersection","rightIntersection","array","target","intersectBox","bufferStack","_prevBuffer","setBuffer","buffer","push","Float32Array","Uint16Array","Uint32Array","clearBuffer","length","pop"],"sources":["/home/cliffexpc63/my example/portfolio/node_modules/three-mesh-bvh/src/castFunctions.js"],"sourcesContent":["// For speed and readability this script is processed to replace the macro-like calls\n// with inline buffer reads. See generate-cast-functions.js.\nimport { Box3, Vector3, Mesh, Matrix4 } from 'three';\nimport { intersectTris, intersectClosestTri } from './Utils/RayIntersectTriUtilities.js';\nimport { arrayToBox } from './Utils/BufferNodeUtils.js';\n\nimport { OrientedBox } from './Utils/OrientedBox.js';\nimport { setTriangle } from './Utils/TriangleUtils.js';\nimport { SeparatingAxisTriangle } from './Utils/SeparatingAxisTriangle.js';\nimport { CONTAINED } from './Constants.js';\n\nconst boundingBox = new Box3();\nconst boxIntersection = new Vector3();\nconst xyzFields = [ 'x', 'y', 'z' ];\n\nfunction IS_LEAF( n16, uint16Array ) {\n\n\treturn uint16Array[ n16 + 15 ] === 0xFFFF;\n\n}\n\nfunction OFFSET( n32, uint32Array ) {\n\n\treturn uint32Array[ n32 + 6 ];\n\n}\n\nfunction COUNT( n32, uint16Array ) {\n\n\treturn uint16Array[ n32 + 14 ];\n\n}\n\nfunction LEFT_NODE( n32 ) {\n\n\treturn n32 + 8;\n\n}\n\nfunction RIGHT_NODE( n32, uint32Array ) {\n\n\treturn uint32Array[ n32 + 6 ];\n\n}\n\nfunction SPLIT_AXIS( n32, uint32Array ) {\n\n\treturn uint32Array[ n32 + 7 ];\n\n}\n\nfunction BOUNDING_DATA_INDEX( n32 ) {\n\n\treturn n32;\n\n}\n\nexport function raycast( nodeIndex32, mesh, geometry, raycaster, ray, intersects ) {\n\n\tlet nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;\n\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\tintersectTris( mesh, geometry, raycaster, ray, offset, count, intersects );\n\n\t} else {\n\n\t\tconst leftIndex = LEFT_NODE( nodeIndex32 );\n\t\tif ( intersectRay( leftIndex, float32Array, ray, boxIntersection ) ) {\n\n\t\t\traycast( leftIndex, mesh, geometry, raycaster, ray, intersects );\n\n\t\t}\n\n\t\tconst rightIndex = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\tif ( intersectRay( rightIndex, float32Array, ray, boxIntersection ) ) {\n\n\t\t\traycast( rightIndex, mesh, geometry, raycaster, ray, intersects );\n\n\t\t}\n\n\t}\n\n}\n\nexport function raycastFirst( nodeIndex32, mesh, geometry, raycaster, ray ) {\n\n\tlet nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;\n\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\t\treturn intersectClosestTri( mesh, geometry, raycaster, ray, offset, count );\n\n\t} else {\n\n\t\t// consider the position of the split plane with respect to the oncoming ray; whichever direction\n\t\t// the ray is coming from, look for an intersection among that side of the tree first\n\t\tconst splitAxis = SPLIT_AXIS( nodeIndex32, uint32Array );\n\t\tconst xyzAxis = xyzFields[ splitAxis ];\n\t\tconst rayDir = ray.direction[ xyzAxis ];\n\t\tconst leftToRight = rayDir >= 0;\n\n\t\t// c1 is the child to check first\n\t\tlet c1, c2;\n\t\tif ( leftToRight ) {\n\n\t\t\tc1 = LEFT_NODE( nodeIndex32 );\n\t\t\tc2 = RIGHT_NODE( nodeIndex32, uint32Array );\n\n\t\t} else {\n\n\t\t\tc1 = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\tc2 = LEFT_NODE( nodeIndex32 );\n\n\t\t}\n\n\t\tconst c1Intersection = intersectRay( c1, float32Array, ray, boxIntersection );\n\t\tconst c1Result = c1Intersection ? raycastFirst( c1, mesh, geometry, raycaster, ray ) : null;\n\n\t\t// if we got an intersection in the first node and it's closer than the second node's bounding\n\t\t// box, we don't need to consider the second node because it couldn't possibly be a better result\n\t\tif ( c1Result ) {\n\n\t\t\t// check if the point is within the second bounds\n\t\t\tconst point = c1Result.localPoint[ xyzAxis ];\n\t\t\tconst isOutside = leftToRight ?\n\t\t\t\tpoint <= float32Array[ c2 + splitAxis ] : // min bounding data\n\t\t\t\tpoint >= float32Array[ c2 + splitAxis + 3 ]; // max bounding data\n\n\t\t\tif ( isOutside ) {\n\n\t\t\t\treturn c1Result;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// either there was no intersection in the first node, or there could still be a closer\n\t\t// intersection in the second, so check the second node and then take the better of the two\n\t\tconst c2Intersection = intersectRay( c2, float32Array, ray, boxIntersection );\n\t\tconst c2Result = c2Intersection ? raycastFirst( c2, mesh, geometry, raycaster, ray ) : null;\n\n\t\tif ( c1Result && c2Result ) {\n\n\t\t\treturn c1Result.distance <= c2Result.distance ? c1Result : c2Result;\n\n\t\t} else {\n\n\t\t\treturn c1Result || c2Result || null;\n\n\t\t}\n\n\t}\n\n}\n\nexport const shapecast = ( function () {\n\n\tconst _box1 = new Box3();\n\tconst _box2 = new Box3();\n\n\treturn function shapecast(\n\t\tnodeIndex32,\n\t\tgeometry,\n\t\tintersectsBoundsFunc,\n\t\tintersectsRangeFunc,\n\t\tnodeScoreFunc = null,\n\t\tnodeIndexByteOffset = 0, // offset for unique node identifier\n\t\tdepth = 0\n\t) {\n\n\t\t// Define these inside the function so it has access to the local variables needed\n\t\t// when converting to the buffer equivalents\n\t\tfunction getLeftOffset( nodeIndex32 ) {\n\n\t\t\tlet nodeIndex16 = nodeIndex32 * 2, uint16Array = _uint16Array, uint32Array = _uint32Array;\n\n\t\t\t// traverse until we find a leaf\n\t\t\twhile ( ! IS_LEAF( nodeIndex16, uint16Array ) ) {\n\n\t\t\t\tnodeIndex32 = LEFT_NODE( nodeIndex32 );\n\t\t\t\tnodeIndex16 = nodeIndex32 * 2;\n\n\t\t\t}\n\n\t\t\treturn OFFSET( nodeIndex32, uint32Array );\n\n\t\t}\n\n\t\tfunction getRightEndOffset( nodeIndex32 ) {\n\n\t\t\tlet nodeIndex16 = nodeIndex32 * 2, uint16Array = _uint16Array, uint32Array = _uint32Array;\n\n\t\t\t// traverse until we find a leaf\n\t\t\twhile ( ! IS_LEAF( nodeIndex16, uint16Array ) ) {\n\n\t\t\t\t// adjust offset to point to the right node\n\t\t\t\tnodeIndex32 = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\t\tnodeIndex16 = nodeIndex32 * 2;\n\n\t\t\t}\n\n\t\t\t// return the end offset of the triangle range\n\t\t\treturn OFFSET( nodeIndex32, uint32Array ) + COUNT( nodeIndex16, uint16Array );\n\n\t\t}\n\n\t\tlet nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;\n\n\t\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\t\tif ( isLeaf ) {\n\n\t\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\t\t\treturn intersectsRangeFunc( offset, count, false, depth, nodeIndexByteOffset + nodeIndex32 );\n\n\t\t} else {\n\n\t\t\tconst left = LEFT_NODE( nodeIndex32 );\n\t\t\tconst right = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\tlet c1 = left;\n\t\t\tlet c2 = right;\n\n\t\t\tlet score1, score2;\n\t\t\tlet box1, box2;\n\t\t\tif ( nodeScoreFunc ) {\n\n\t\t\t\tbox1 = _box1;\n\t\t\t\tbox2 = _box2;\n\n\t\t\t\t// bounding data is not offset\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c1 ), float32Array, box1 );\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c2 ), float32Array, box2 );\n\n\t\t\t\tscore1 = nodeScoreFunc( box1 );\n\t\t\t\tscore2 = nodeScoreFunc( box2 );\n\n\t\t\t\tif ( score2 < score1 ) {\n\n\t\t\t\t\tc1 = right;\n\t\t\t\t\tc2 = left;\n\n\t\t\t\t\tconst temp = score1;\n\t\t\t\t\tscore1 = score2;\n\t\t\t\t\tscore2 = temp;\n\n\t\t\t\t\tbox1 = box2;\n\t\t\t\t\t// box2 is always set before use below\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Check box 1 intersection\n\t\t\tif ( ! box1 ) {\n\n\t\t\t\tbox1 = _box1;\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c1 ), float32Array, box1 );\n\n\t\t\t}\n\n\t\t\tconst isC1Leaf = IS_LEAF( c1 * 2, uint16Array );\n\t\t\tconst c1Intersection = intersectsBoundsFunc( box1, isC1Leaf, score1, depth + 1, nodeIndexByteOffset + c1 );\n\n\t\t\tlet c1StopTraversal;\n\t\t\tif ( c1Intersection === CONTAINED ) {\n\n\t\t\t\tconst offset = getLeftOffset( c1 );\n\t\t\t\tconst end = getRightEndOffset( c1 );\n\t\t\t\tconst count = end - offset;\n\n\t\t\t\tc1StopTraversal = intersectsRangeFunc( offset, count, true, depth + 1, nodeIndexByteOffset + c1 );\n\n\t\t\t} else {\n\n\t\t\t\tc1StopTraversal =\n\t\t\t\t\tc1Intersection &&\n\t\t\t\t\tshapecast(\n\t\t\t\t\t\tc1,\n\t\t\t\t\t\tgeometry,\n\t\t\t\t\t\tintersectsBoundsFunc,\n\t\t\t\t\t\tintersectsRangeFunc,\n\t\t\t\t\t\tnodeScoreFunc,\n\t\t\t\t\t\tnodeIndexByteOffset,\n\t\t\t\t\t\tdepth + 1\n\t\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( c1StopTraversal ) return true;\n\n\t\t\t// Check box 2 intersection\n\t\t\t// cached box2 will have been overwritten by previous traversal\n\t\t\tbox2 = _box2;\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c2 ), float32Array, box2 );\n\n\t\t\tconst isC2Leaf = IS_LEAF( c2 * 2, uint16Array );\n\t\t\tconst c2Intersection = intersectsBoundsFunc( box2, isC2Leaf, score2, depth + 1, nodeIndexByteOffset + c2 );\n\n\t\t\tlet c2StopTraversal;\n\t\t\tif ( c2Intersection === CONTAINED ) {\n\n\t\t\t\tconst offset = getLeftOffset( c2 );\n\t\t\t\tconst end = getRightEndOffset( c2 );\n\t\t\t\tconst count = end - offset;\n\n\t\t\t\tc2StopTraversal = intersectsRangeFunc( offset, count, true, depth + 1, nodeIndexByteOffset + c2 );\n\n\t\t\t} else {\n\n\t\t\t\tc2StopTraversal =\n\t\t\t\t\tc2Intersection &&\n\t\t\t\t\tshapecast(\n\t\t\t\t\t\tc2,\n\t\t\t\t\t\tgeometry,\n\t\t\t\t\t\tintersectsBoundsFunc,\n\t\t\t\t\t\tintersectsRangeFunc,\n\t\t\t\t\t\tnodeScoreFunc,\n\t\t\t\t\t\tnodeIndexByteOffset,\n\t\t\t\t\t\tdepth + 1\n\t\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( c2StopTraversal ) return true;\n\n\t\t\treturn false;\n\n\t\t}\n\n\t};\n\n} )();\n\nexport const intersectsGeometry = ( function () {\n\n\tconst triangle = new SeparatingAxisTriangle();\n\tconst triangle2 = new SeparatingAxisTriangle();\n\tconst cachedMesh = new Mesh();\n\tconst invertedMat = new Matrix4();\n\n\tconst obb = new OrientedBox();\n\tconst obb2 = new OrientedBox();\n\n\treturn function intersectsGeometry( nodeIndex32, mesh, geometry, otherGeometry, geometryToBvh, cachedObb = null ) {\n\n\t\tlet nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;\n\n\t\tif ( cachedObb === null ) {\n\n\t\t\tif ( ! otherGeometry.boundingBox ) {\n\n\t\t\t\totherGeometry.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tobb.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\n\t\t\tcachedObb = obb;\n\n\t\t}\n\n\t\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\t\tif ( isLeaf ) {\n\n\t\t\tconst thisGeometry = geometry;\n\t\t\tconst thisIndex = thisGeometry.index;\n\t\t\tconst thisPos = thisGeometry.attributes.position;\n\n\t\t\tconst index = otherGeometry.index;\n\t\t\tconst pos = otherGeometry.attributes.position;\n\n\t\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\t\t// get the inverse of the geometry matrix so we can transform our triangles into the\n\t\t\t// geometry space we're trying to test. We assume there are fewer triangles being checked\n\t\t\t// here.\n\t\t\tinvertedMat.copy( geometryToBvh ).invert();\n\n\t\t\tif ( otherGeometry.boundsTree ) {\n\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( nodeIndex32 ), float32Array, obb2 );\n\t\t\t\tobb2.matrix.copy( invertedMat );\n\t\t\t\tobb2.needsUpdate = true;\n\n\t\t\t\tcachedMesh.geometry = otherGeometry;\n\t\t\t\tconst res = otherGeometry.boundsTree.shapecast( cachedMesh, {\n\n\t\t\t\t\tintersectsBounds: box => obb2.intersectsBox( box ),\n\n\t\t\t\t\tintersectsTriangle: tri => {\n\n\t\t\t\t\t\ttri.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttri.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttri.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttri.needsUpdate = true;\n\n\t\t\t\t\t\tfor ( let i = offset * 3, l = ( count + offset ) * 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\n\t\t\t\t\t\t\tsetTriangle( triangle2, i, thisIndex, thisPos );\n\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\t\t\t\t\t\t\tif ( tri.intersectsTriangle( triangle2 ) ) {\n\n\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tcachedMesh.geometry = null;\n\n\t\t\t\treturn res;\n\n\t\t\t} else {\n\n\t\t\t\tfor ( let i = offset * 3, l = ( count + offset * 3 ); i < l; i += 3 ) {\n\n\t\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\n\t\t\t\t\tsetTriangle( triangle, i, thisIndex, thisPos );\n\t\t\t\t\ttriangle.a.applyMatrix4( invertedMat );\n\t\t\t\t\ttriangle.b.applyMatrix4( invertedMat );\n\t\t\t\t\ttriangle.c.applyMatrix4( invertedMat );\n\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\tfor ( let i2 = 0, l2 = index.count; i2 < l2; i2 += 3 ) {\n\n\t\t\t\t\t\tsetTriangle( triangle2, i2, index, pos );\n\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\tif ( triangle.intersectsTriangle( triangle2 ) ) {\n\n\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst left = nodeIndex32 + 8;\n\t\t\tconst right = uint32Array[ nodeIndex32 + 6 ];\n\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( left ), float32Array, boundingBox );\n\t\t\tconst leftIntersection =\n\t\t\t\tcachedObb.intersectsBox( boundingBox ) &&\n\t\t\t\tintersectsGeometry( left, mesh, geometry, otherGeometry, geometryToBvh, cachedObb );\n\n\t\t\tif ( leftIntersection ) return true;\n\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( right ), float32Array, boundingBox );\n\t\t\tconst rightIntersection =\n\t\t\t\tcachedObb.intersectsBox( boundingBox ) &&\n\t\t\t\tintersectsGeometry( right, mesh, geometry, otherGeometry, geometryToBvh, cachedObb );\n\n\t\t\tif ( rightIntersection ) return true;\n\n\t\t\treturn false;\n\n\t\t}\n\n\t};\n\n} )();\n\nfunction intersectRay( nodeIndex32, array, ray, target ) {\n\n\tarrayToBox( nodeIndex32, array, boundingBox );\n\treturn ray.intersectBox( boundingBox, target );\n\n}\n\nconst bufferStack = [];\nlet _prevBuffer;\nlet _float32Array;\nlet _uint16Array;\nlet _uint32Array;\nexport function setBuffer( buffer ) {\n\n\tif ( _prevBuffer ) {\n\n\t\tbufferStack.push( _prevBuffer );\n\n\t}\n\n\t_prevBuffer = buffer;\n\t_float32Array = new Float32Array( buffer );\n\t_uint16Array = new Uint16Array( buffer );\n\t_uint32Array = new Uint32Array( buffer );\n\n}\n\nexport function clearBuffer() {\n\n\t_prevBuffer = null;\n\t_float32Array = null;\n\t_uint16Array = null;\n\t_uint32Array = null;\n\n\tif ( bufferStack.length ) {\n\n\t\tsetBuffer( bufferStack.pop() );\n\n\t}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}