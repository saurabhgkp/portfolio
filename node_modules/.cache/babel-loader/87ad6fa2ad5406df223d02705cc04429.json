{"ast":null,"code":"import { Node } from '../core/Node.js';\nfunction SwitchNode(node, components) {\n  Node.call(this);\n  this.node = node;\n  this.components = components || 'x';\n}\nSwitchNode.prototype = Object.create(Node.prototype);\nSwitchNode.prototype.constructor = SwitchNode;\nSwitchNode.prototype.nodeType = 'Switch';\nSwitchNode.prototype.getType = function (builder) {\n  return builder.getTypeFromLength(this.components.length);\n};\nSwitchNode.prototype.generate = function (builder, output) {\n  var type = this.node.getType(builder),\n    node = this.node.build(builder, type),\n    inputLength = builder.getTypeLength(type) - 1;\n  if (inputLength > 0) {\n    // get max length\n    var outputLength = 0,\n      components = builder.colorToVectorProperties(this.components);\n    var i,\n      len = components.length;\n    for (i = 0; i < len; i++) {\n      outputLength = Math.max(outputLength, builder.getIndexByElement(components.charAt(i)));\n    }\n    if (outputLength > inputLength) outputLength = inputLength; // split\n\n    node += '.';\n    for (i = 0; i < len; i++) {\n      var idx = builder.getIndexByElement(components.charAt(i));\n      if (idx > outputLength) idx = outputLength;\n      node += builder.getElementByIndex(idx);\n    }\n    return builder.format(node, this.getType(builder), output);\n  } else {\n    // join\n    return builder.format(node, type, output);\n  }\n};\nSwitchNode.prototype.copy = function (source) {\n  Node.prototype.copy.call(this, source);\n  this.node = source.node;\n  this.components = source.components;\n  return this;\n};\nSwitchNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.node = this.node.toJSON(meta).uuid;\n    data.components = this.components;\n  }\n  return data;\n};\nexport { SwitchNode };","map":null,"metadata":{},"sourceType":"module"}