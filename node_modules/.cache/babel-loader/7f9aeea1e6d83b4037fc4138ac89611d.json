{"ast":null,"code":"var _jsxFileName = \"/home/cliffexpc63/my example/portfolio/src/Box/Smoke.js\",\n    _s = $RefreshSig$();\n\nimport React, { Suspense, useRef, useMemo } from \"react\";\nimport * as THREE from 'three';\nimport { useFrame, useLoader } from \"react-three-fiber\";\nimport { Object3D } from \"three\";\nimport cloudImg from \"../assets/smoke.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Cloud() {\n  _s();\n\n  const tempObject = useMemo(() => new Object3D(), []);\n  const ref = useRef();\n  const texture = useLoader(THREE.TextureLoader, cloudImg);\n  const particles = useMemo(() => {\n    const cloudParticles = [];\n\n    for (let p = 0; p < 50; p++) {\n      const positionX = Math.random() * 800 - 400;\n      const positionZ = Math.random() * 500 - 500;\n      const rotationZ = Math.random() * 2 * Math.PI;\n      cloudParticles.push({\n        positionX,\n        positionZ,\n        rotationZ\n      });\n    }\n\n    return cloudParticles;\n  }, []);\n  useFrame(state => {\n    particles.forEach((particle, i) => {\n      let {\n        positionX,\n        positionZ,\n        rotationZ\n      } = particle;\n      tempObject.position.set(positionX, 0, positionZ);\n      tempObject.rotation.set(0, 0, rotationZ);\n      tempObject.updateMatrix();\n      ref.current.setMatrixAt(i, tempObject.matrix);\n    });\n    particles.forEach(particle => particle.rotationZ -= 0.001);\n    ref.current.instanceMatrix.needsUpdate = true;\n  });\n  return /*#__PURE__*/_jsxDEV(\"instancedMesh\", {\n    ref: ref,\n    args: [null, null, 40],\n    children: [/*#__PURE__*/_jsxDEV(\"planeBufferGeometry\", {\n      attach: \"geometry\",\n      args: [500, 500]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshLambertMaterial\", {\n      attach: \"material\",\n      map: texture,\n      depthWrite: false,\n      transparent: true,\n      opacity: 0.55\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n} //revolving dibba for test\n// function Dibba() {\n//   const mesh = useRef();\n//   useFrame(\n//     () =>\n//       (mesh.current.rotation.x = mesh.current.rotation.y = mesh.current.rotation.z += 0.01)\n//   );\n//   return (\n//     <mesh ref={mesh}>\n//       <boxBufferGeometry attach=\"geometry\" args={[20, 20, 20]} />\n//       <meshLambertMaterial attach=\"material\" />\n//     </mesh>\n//   );\n// }\n\n\n_s(Cloud, \"c8PiaHdee7z0Up4L4TRNrh8dISc=\", false, function () {\n  return [useLoader, useFrame];\n});\n\n_c = Cloud;\n\nfunction Smoke() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"head\",\n      children: \"NoobSaiyan\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n      color: \"#ff1100\",\n      intensity: 1.2,\n      position: [0, 0, 200]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n      color: \"#ff1100\",\n      intensity: 0.2,\n      position: [0, 0, -200],\n      rotation: [1, 0, 0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      color: \"#555555\",\n      intensity: 0.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      color: \"#d40027\",\n      intensity: 30,\n      position: [-200, 0, -40],\n      distance: 500,\n      decay: 1.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      color: \"#d8547e\",\n      intensity: 30,\n      position: [100, 0, -40],\n      distance: 500,\n      decay: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      color: \"#ff0048\",\n      intensity: 30,\n      position: [300, 0, -50],\n      distance: 500,\n      decay: 1.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: null,\n      children: /*#__PURE__*/_jsxDEV(Cloud, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_c2 = Smoke;\nexport default Smoke;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Cloud\");\n$RefreshReg$(_c2, \"Smoke\");","map":{"version":3,"names":["React","Suspense","useRef","useMemo","THREE","useFrame","useLoader","Object3D","cloudImg","Cloud","tempObject","ref","texture","TextureLoader","particles","cloudParticles","p","positionX","Math","random","positionZ","rotationZ","PI","push","state","forEach","particle","i","position","set","rotation","updateMatrix","current","setMatrixAt","matrix","instanceMatrix","needsUpdate","Smoke"],"sources":["/home/cliffexpc63/my example/portfolio/src/Box/Smoke.js"],"sourcesContent":["import React, { Suspense, useRef, useMemo } from \"react\";\nimport * as THREE from 'three';\nimport {  useFrame ,useLoader } from \"react-three-fiber\";\nimport { Object3D } from \"three\";\nimport cloudImg from \"../assets/smoke.png\";\n\n\n\nfunction Cloud() {\n  const tempObject = useMemo(() => new Object3D(), []);\n  const ref = useRef();\n \n  const texture = useLoader(THREE.TextureLoader, cloudImg);\n\n  const particles = useMemo(() => {\n    const cloudParticles = [];\n    for (let p = 0; p < 50; p++) {\n      const positionX = Math.random() * 800 - 400;\n      const positionZ = Math.random() * 500 - 500;\n      const rotationZ = Math.random() * 2 * Math.PI;\n\n      cloudParticles.push({\n        positionX,\n        positionZ,\n        rotationZ,\n      });\n    }\n    return cloudParticles;\n  },[]);\n\n  useFrame((state) => {\n    particles.forEach((particle, i) => {\n      let { positionX, positionZ, rotationZ } = particle;\n      tempObject.position.set(positionX, 0, positionZ);\n      tempObject.rotation.set(0, 0, rotationZ);\n      tempObject.updateMatrix();\n      ref.current.setMatrixAt(i, tempObject.matrix);\n    });\n    particles.forEach((particle) => (particle.rotationZ -= 0.001));\n    ref.current.instanceMatrix.needsUpdate = true;\n  });\n\n  return (\n    <instancedMesh ref={ref} args={[null, null, 40]}>\n      <planeBufferGeometry attach=\"geometry\" args={[500, 500]} />\n      <meshLambertMaterial\n        attach=\"material\"\n        map={texture}\n        depthWrite={false}\n        transparent\n        opacity={0.55}\n      />\n    </instancedMesh>\n  );\n}\n\n//revolving dibba for test\n// function Dibba() {\n//   const mesh = useRef();\n//   useFrame(\n//     () =>\n//       (mesh.current.rotation.x = mesh.current.rotation.y = mesh.current.rotation.z += 0.01)\n//   );\n//   return (\n//     <mesh ref={mesh}>\n//       <boxBufferGeometry attach=\"geometry\" args={[20, 20, 20]} />\n//       <meshLambertMaterial attach=\"material\" />\n//     </mesh>\n//   );\n// }\n\nfunction Smoke() {\n  return (\n    <>\n      <div className='head'>NoobSaiyan</div>\n     \n        <directionalLight\n          color=\"#ff1100\"\n          intensity={1.2}\n          position={[0, 0, 200]}\n        />\n        <directionalLight\n          color=\"#ff1100\"\n          intensity={0.2}\n          position={[0, 0, -200]}\n          rotation={[1, 0, 0]}\n        />\n        <ambientLight color=\"#555555\" intensity={0.5} />\n        <pointLight\n          color=\"#d40027\"\n          intensity={30}\n          position={[-200, 0, -40]}\n          distance={500}\n          decay={1.5}\n        />\n        <pointLight\n          color=\"#d8547e\"\n          intensity={30}\n          position={[100, 0, -40]}\n          distance={500}\n          decay={1}\n        />\n        <pointLight\n          color=\"#ff0048\"\n          intensity={30}\n          position={[300, 0, -50]}\n          distance={500}\n          decay={1.5}\n        />\n        <Suspense fallback={null}>\n          <Cloud />\n        </Suspense>\n     \n    </>\n  );\n}\n\nexport default Smoke;"],"mappings":"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"},"metadata":{},"sourceType":"module"}