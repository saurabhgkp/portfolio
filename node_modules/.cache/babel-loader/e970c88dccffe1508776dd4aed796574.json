{"ast":null,"code":"import { WebGLRenderTarget, NearestFilter, MeshDepthMaterial, RGBADepthPacking, NoBlending, UniformsUtils, ShaderMaterial, Color } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { BokehShader } from '../shaders/BokehShader.js';\n\n/**\n * Depth-of-field post-process with bokeh shader\n */\n\nvar BokehPass = function BokehPass(scene, camera, params) {\n  this.scene = scene;\n  this.camera = camera;\n  var focus = params.focus !== undefined ? params.focus : 1.0;\n  var aspect = params.aspect !== undefined ? params.aspect : camera.aspect;\n  var aperture = params.aperture !== undefined ? params.aperture : 0.025;\n  var maxblur = params.maxblur !== undefined ? params.maxblur : 1.0; // render targets\n\n  var width = params.width || window.innerWidth || 1;\n  var height = params.height || window.innerHeight || 1;\n  this.renderTargetDepth = new WebGLRenderTarget(width, height, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter\n  });\n  this.renderTargetDepth.texture.name = 'BokehPass.depth'; // depth material\n\n  this.materialDepth = new MeshDepthMaterial();\n  this.materialDepth.depthPacking = RGBADepthPacking;\n  this.materialDepth.blending = NoBlending; // bokeh material\n\n  if (BokehShader === undefined) {\n    console.error('THREE.BokehPass relies on BokehShader');\n  }\n  var bokehShader = BokehShader;\n  var bokehUniforms = UniformsUtils.clone(bokehShader.uniforms);\n  bokehUniforms['tDepth'].value = this.renderTargetDepth.texture;\n  bokehUniforms['focus'].value = focus;\n  bokehUniforms['aspect'].value = aspect;\n  bokehUniforms['aperture'].value = aperture;\n  bokehUniforms['maxblur'].value = maxblur;\n  bokehUniforms['nearClip'].value = camera.near;\n  bokehUniforms['farClip'].value = camera.far;\n  this.materialBokeh = new ShaderMaterial({\n    defines: Object.assign({}, bokehShader.defines),\n    uniforms: bokehUniforms,\n    vertexShader: bokehShader.vertexShader,\n    fragmentShader: bokehShader.fragmentShader\n  });\n  this.uniforms = bokehUniforms;\n  this.needsSwap = false;\n  this.fsQuad = new FullScreenQuad(this.materialBokeh);\n  this._oldClearColor = new Color();\n};\nBokehPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: BokehPass,\n  render: function render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive*/) {\n    // Render depth into texture\n    this.scene.overrideMaterial = this.materialDepth;\n    renderer.getClearColor(this._oldClearColor);\n    var oldClearAlpha = renderer.getClearAlpha();\n    var oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setClearColor(0xffffff);\n    renderer.setClearAlpha(1.0);\n    renderer.setRenderTarget(this.renderTargetDepth);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // Render bokeh composite\n\n    this.uniforms['tColor'].value = readBuffer.texture;\n    this.uniforms['nearClip'].value = this.camera.near;\n    this.uniforms['farClip'].value = this.camera.far;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n    this.scene.overrideMaterial = null;\n    renderer.setClearColor(this._oldClearColor);\n    renderer.setClearAlpha(oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  }\n});\nexport { BokehPass };","map":null,"metadata":{},"sourceType":"module"}