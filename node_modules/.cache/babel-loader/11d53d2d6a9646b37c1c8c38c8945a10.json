{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\nimport { ResolutionNode } from './ResolutionNode.js';\nfunction ScreenUVNode(resolution) {\n  TempNode.call(this, 'v2');\n  this.resolution = resolution || new ResolutionNode();\n}\nScreenUVNode.prototype = Object.create(TempNode.prototype);\nScreenUVNode.prototype.constructor = ScreenUVNode;\nScreenUVNode.prototype.nodeType = 'ScreenUV';\nScreenUVNode.prototype.generate = function (builder, output) {\n  var result;\n  if (builder.isShader('fragment')) {\n    result = '( gl_FragCoord.xy / ' + this.resolution.build(builder, 'v2') + ')';\n  } else {\n    console.warn('THREE.ScreenUVNode is not compatible with ' + builder.shader + ' shader.');\n    result = 'vec2( 0.0 )';\n  }\n  return builder.format(result, this.getType(builder), output);\n};\nScreenUVNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.resolution = source.resolution;\n  return this;\n};\nScreenUVNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.resolution = this.resolution.toJSON(meta).uuid;\n  }\n  return data;\n};\nexport { ScreenUVNode };","map":null,"metadata":{},"sourceType":"module"}