{"ast":null,"code":"import { Vector3, Loader, FileLoader, Matrix4, MeshStandardMaterial, Color, MeshPhongMaterial, LineBasicMaterial, ShaderMaterial, UniformsUtils, UniformsLib, Group, BufferGeometry, Float32BufferAttribute, LineSegments, Mesh, BufferAttribute } from 'three'; // Note: \"MATERIAL\" tag (e.g. GLITTER, SPECKLE) is not implemented\n\nconst FINISH_TYPE_DEFAULT = 0;\nconst FINISH_TYPE_CHROME = 1;\nconst FINISH_TYPE_PEARLESCENT = 2;\nconst FINISH_TYPE_RUBBER = 3;\nconst FINISH_TYPE_MATTE_METALLIC = 4;\nconst FINISH_TYPE_METAL = 5; // State machine to search a subobject path.\n// The LDraw standard establishes these various possible subfolders.\n\nconst FILE_LOCATION_AS_IS = 0;\nconst FILE_LOCATION_TRY_PARTS = 1;\nconst FILE_LOCATION_TRY_P = 2;\nconst FILE_LOCATION_TRY_MODELS = 3;\nconst FILE_LOCATION_TRY_RELATIVE = 4;\nconst FILE_LOCATION_TRY_ABSOLUTE = 5;\nconst FILE_LOCATION_NOT_FOUND = 6;\nconst conditionalLineVertShader =\n/* glsl */\n`\n\tattribute vec3 control0;\n\tattribute vec3 control1;\n\tattribute vec3 direction;\n\tvarying float discardFlag;\n\n\t#include <common>\n\t#include <color_pars_vertex>\n\t#include <fog_pars_vertex>\n\t#include <logdepthbuf_pars_vertex>\n\t#include <clipping_planes_pars_vertex>\n\tvoid main() {\n\t\t#include <color_vertex>\n\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t// Transform the line segment ends and control points into camera clip space\n\t\tvec4 c0 = projectionMatrix * modelViewMatrix * vec4( control0, 1.0 );\n\t\tvec4 c1 = projectionMatrix * modelViewMatrix * vec4( control1, 1.0 );\n\t\tvec4 p0 = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\tvec4 p1 = projectionMatrix * modelViewMatrix * vec4( position + direction, 1.0 );\n\n\t\tc0.xy /= c0.w;\n\t\tc1.xy /= c1.w;\n\t\tp0.xy /= p0.w;\n\t\tp1.xy /= p1.w;\n\n\t\t// Get the direction of the segment and an orthogonal vector\n\t\tvec2 dir = p1.xy - p0.xy;\n\t\tvec2 norm = vec2( -dir.y, dir.x );\n\n\t\t// Get control point directions from the line\n\t\tvec2 c0dir = c0.xy - p1.xy;\n\t\tvec2 c1dir = c1.xy - p1.xy;\n\n\t\t// If the vectors to the controls points are pointed in different directions away\n\t\t// from the line segment then the line should not be drawn.\n\t\tfloat d0 = dot( normalize( norm ), normalize( c0dir ) );\n\t\tfloat d1 = dot( normalize( norm ), normalize( c1dir ) );\n\t\tdiscardFlag = float( sign( d0 ) != sign( d1 ) );\n\n\t\t#include <logdepthbuf_vertex>\n\t\t#include <clipping_planes_vertex>\n\t\t#include <fog_vertex>\n\t}\n\t`;\nconst conditionalLineFragShader =\n/* glsl */\n`\n\tuniform vec3 diffuse;\n\tuniform float opacity;\n\tvarying float discardFlag;\n\n\t#include <common>\n\t#include <color_pars_fragment>\n\t#include <fog_pars_fragment>\n\t#include <logdepthbuf_pars_fragment>\n\t#include <clipping_planes_pars_fragment>\n\tvoid main() {\n\n\t\tif ( discardFlag > 0.5 ) discard;\n\n\t\t#include <clipping_planes_fragment>\n\t\tvec3 outgoingLight = vec3( 0.0 );\n\t\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t\t#include <logdepthbuf_fragment>\n\t\t#include <color_fragment>\n\t\toutgoingLight = diffuseColor.rgb; // simple shader\n\t\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t\t#include <tonemapping_fragment>\n\t\t#include <encodings_fragment>\n\t\t#include <fog_fragment>\n\t\t#include <premultiplied_alpha_fragment>\n\t}\n\t`;\n\nconst _tempVec0 = new Vector3();\n\nconst _tempVec1 = new Vector3();\n\nfunction smoothNormals(triangles, lineSegments) {\n  function hashVertex(v) {\n    // NOTE: 1e2 is pretty coarse but was chosen because it allows edges\n    // to be smoothed as expected (see minifig arms). The errors between edges\n    // could be due to matrix multiplication.\n    const x = ~~(v.x * 1e2);\n    const y = ~~(v.y * 1e2);\n    const z = ~~(v.z * 1e2);\n    return `${x},${y},${z}`;\n  }\n\n  function hashEdge(v0, v1) {\n    return `${hashVertex(v0)}_${hashVertex(v1)}`;\n  }\n\n  const hardEdges = new Set();\n  const halfEdgeList = {};\n  const fullHalfEdgeList = {};\n  const normals = []; // Save the list of hard edges by hash\n\n  for (let i = 0, l = lineSegments.length; i < l; i++) {\n    const ls = lineSegments[i];\n    const v0 = ls.v0;\n    const v1 = ls.v1;\n    hardEdges.add(hashEdge(v0, v1));\n    hardEdges.add(hashEdge(v1, v0));\n  } // track the half edges associated with each triangle\n\n\n  for (let i = 0, l = triangles.length; i < l; i++) {\n    const tri = triangles[i];\n\n    for (let i2 = 0, l2 = 3; i2 < l2; i2++) {\n      const index = i2;\n      const next = (i2 + 1) % 3;\n      const v0 = tri[`v${index}`];\n      const v1 = tri[`v${next}`];\n      const hash = hashEdge(v0, v1); // don't add the triangle if the edge is supposed to be hard\n\n      if (hardEdges.has(hash)) continue;\n      halfEdgeList[hash] = tri;\n      fullHalfEdgeList[hash] = tri;\n    }\n  } // NOTE: Some of the normals wind up being skewed in an unexpected way because\n  // quads provide more \"influence\" to some vertex normals than a triangle due to\n  // the fact that a quad is made up of two triangles and all triangles are weighted\n  // equally. To fix this quads could be tracked separately so their vertex normals\n  // are weighted appropriately or we could try only adding a normal direction\n  // once per normal.\n  // Iterate until we've tried to connect all triangles to share normals\n\n\n  while (true) {\n    // Stop if there are no more triangles left\n    const halfEdges = Object.keys(halfEdgeList);\n    if (halfEdges.length === 0) break; // Exhaustively find all connected triangles\n\n    let i = 0;\n    const queue = [fullHalfEdgeList[halfEdges[0]]];\n\n    while (i < queue.length) {\n      // initialize all vertex normals in this triangle\n      const tri = queue[i];\n      i++;\n      const faceNormal = tri.faceNormal;\n\n      if (tri.n0 === null) {\n        tri.n0 = faceNormal.clone();\n        normals.push(tri.n0);\n      }\n\n      if (tri.n1 === null) {\n        tri.n1 = faceNormal.clone();\n        normals.push(tri.n1);\n      }\n\n      if (tri.n2 === null) {\n        tri.n2 = faceNormal.clone();\n        normals.push(tri.n2);\n      } // Check if any edge is connected to another triangle edge\n\n\n      for (let i2 = 0, l2 = 3; i2 < l2; i2++) {\n        const index = i2;\n        const next = (i2 + 1) % 3;\n        const v0 = tri[`v${index}`];\n        const v1 = tri[`v${next}`]; // delete this triangle from the list so it won't be found again\n\n        const hash = hashEdge(v0, v1);\n        delete halfEdgeList[hash];\n        const reverseHash = hashEdge(v1, v0);\n        const otherTri = fullHalfEdgeList[reverseHash];\n\n        if (otherTri) {\n          // NOTE: If the angle between triangles is > 67.5 degrees then assume it's\n          // hard edge. There are some cases where the line segments do not line up exactly\n          // with or span multiple triangle edges (see Lunar Vehicle wheels).\n          if (Math.abs(otherTri.faceNormal.dot(tri.faceNormal)) < 0.25) {\n            continue;\n          } // if this triangle has already been traversed then it won't be in\n          // the halfEdgeList. If it has not then add it to the queue and delete\n          // it so it won't be found again.\n\n\n          if (reverseHash in halfEdgeList) {\n            queue.push(otherTri);\n            delete halfEdgeList[reverseHash];\n          } // Find the matching edge in this triangle and copy the normal vector over\n\n\n          for (let i3 = 0, l3 = 3; i3 < l3; i3++) {\n            const otherIndex = i3;\n            const otherNext = (i3 + 1) % 3;\n            const otherV0 = otherTri[`v${otherIndex}`];\n            const otherV1 = otherTri[`v${otherNext}`];\n            const otherHash = hashEdge(otherV0, otherV1);\n\n            if (otherHash === reverseHash) {\n              if (otherTri[`n${otherIndex}`] === null) {\n                const norm = tri[`n${next}`];\n                otherTri[`n${otherIndex}`] = norm;\n                norm.add(otherTri.faceNormal);\n              }\n\n              if (otherTri[`n${otherNext}`] === null) {\n                const norm = tri[`n${index}`];\n                otherTri[`n${otherNext}`] = norm;\n                norm.add(otherTri.faceNormal);\n              }\n\n              break;\n            }\n          }\n        }\n      }\n    }\n  } // The normals of each face have been added up so now we average them by normalizing the vector.\n\n\n  for (let i = 0, l = normals.length; i < l; i++) {\n    normals[i].normalize();\n  }\n}\n\nfunction isPrimitiveType(type) {\n  return /primitive/i.test(type) || type === 'Subpart';\n}\n\nclass LineParser {\n  constructor(line, lineNumber) {\n    this.line = line;\n    this.lineLength = line.length;\n    this.currentCharIndex = 0;\n    this.currentChar = ' ';\n    this.lineNumber = lineNumber;\n  }\n\n  seekNonSpace() {\n    while (this.currentCharIndex < this.lineLength) {\n      this.currentChar = this.line.charAt(this.currentCharIndex);\n\n      if (this.currentChar !== ' ' && this.currentChar !== '\\t') {\n        return;\n      }\n\n      this.currentCharIndex++;\n    }\n  }\n\n  getToken() {\n    const pos0 = this.currentCharIndex++; // Seek space\n\n    while (this.currentCharIndex < this.lineLength) {\n      this.currentChar = this.line.charAt(this.currentCharIndex);\n\n      if (this.currentChar === ' ' || this.currentChar === '\\t') {\n        break;\n      }\n\n      this.currentCharIndex++;\n    }\n\n    const pos1 = this.currentCharIndex;\n    this.seekNonSpace();\n    return this.line.substring(pos0, pos1);\n  }\n\n  getRemainingString() {\n    return this.line.substring(this.currentCharIndex, this.lineLength);\n  }\n\n  isAtTheEnd() {\n    return this.currentCharIndex >= this.lineLength;\n  }\n\n  setToEnd() {\n    this.currentCharIndex = this.lineLength;\n  }\n\n  getLineNumberString() {\n    return this.lineNumber >= 0 ? ' at line ' + this.lineNumber : '';\n  }\n\n}\n\nfunction sortByMaterial(a, b) {\n  if (a.colourCode === b.colourCode) {\n    return 0;\n  }\n\n  if (a.colourCode < b.colourCode) {\n    return -1;\n  }\n\n  return 1;\n}\n\nfunction createObject(elements, elementSize, isConditionalSegments) {\n  // Creates a LineSegments (elementSize = 2) or a Mesh (elementSize = 3 )\n  // With per face / segment material, implemented with mesh groups and materials array\n  // Sort the triangles or line segments by colour code to make later the mesh groups\n  elements.sort(sortByMaterial);\n  const positions = [];\n  const normals = [];\n  const materials = [];\n  const bufferGeometry = new BufferGeometry();\n  let prevMaterial = null;\n  let index0 = 0;\n  let numGroupVerts = 0;\n\n  for (let iElem = 0, nElem = elements.length; iElem < nElem; iElem++) {\n    const elem = elements[iElem];\n    const v0 = elem.v0;\n    const v1 = elem.v1; // Note that LDraw coordinate system is rotated 180 deg. in the X axis w.r.t. Three.js's one\n\n    positions.push(v0.x, v0.y, v0.z, v1.x, v1.y, v1.z);\n\n    if (elementSize === 3) {\n      positions.push(elem.v2.x, elem.v2.y, elem.v2.z);\n      const n0 = elem.n0 || elem.faceNormal;\n      const n1 = elem.n1 || elem.faceNormal;\n      const n2 = elem.n2 || elem.faceNormal;\n      normals.push(n0.x, n0.y, n0.z);\n      normals.push(n1.x, n1.y, n1.z);\n      normals.push(n2.x, n2.y, n2.z);\n    }\n\n    if (prevMaterial !== elem.material) {\n      if (prevMaterial !== null) {\n        bufferGeometry.addGroup(index0, numGroupVerts, materials.length - 1);\n      }\n\n      materials.push(elem.material);\n      prevMaterial = elem.material;\n      index0 = iElem * elementSize;\n      numGroupVerts = elementSize;\n    } else {\n      numGroupVerts += elementSize;\n    }\n  }\n\n  if (numGroupVerts > 0) {\n    bufferGeometry.addGroup(index0, Infinity, materials.length - 1);\n  }\n\n  bufferGeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\n  if (elementSize === 3) {\n    bufferGeometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n  }\n\n  let object3d = null;\n\n  if (elementSize === 2) {\n    object3d = new LineSegments(bufferGeometry, materials);\n  } else if (elementSize === 3) {\n    object3d = new Mesh(bufferGeometry, materials);\n  }\n\n  if (isConditionalSegments) {\n    object3d.isConditionalLine = true;\n    const controlArray0 = new Float32Array(elements.length * 3 * 2);\n    const controlArray1 = new Float32Array(elements.length * 3 * 2);\n    const directionArray = new Float32Array(elements.length * 3 * 2);\n\n    for (let i = 0, l = elements.length; i < l; i++) {\n      const os = elements[i];\n      const c0 = os.c0;\n      const c1 = os.c1;\n      const v0 = os.v0;\n      const v1 = os.v1;\n      const index = i * 3 * 2;\n      controlArray0[index + 0] = c0.x;\n      controlArray0[index + 1] = c0.y;\n      controlArray0[index + 2] = c0.z;\n      controlArray0[index + 3] = c0.x;\n      controlArray0[index + 4] = c0.y;\n      controlArray0[index + 5] = c0.z;\n      controlArray1[index + 0] = c1.x;\n      controlArray1[index + 1] = c1.y;\n      controlArray1[index + 2] = c1.z;\n      controlArray1[index + 3] = c1.x;\n      controlArray1[index + 4] = c1.y;\n      controlArray1[index + 5] = c1.z;\n      directionArray[index + 0] = v1.x - v0.x;\n      directionArray[index + 1] = v1.y - v0.y;\n      directionArray[index + 2] = v1.z - v0.z;\n      directionArray[index + 3] = v1.x - v0.x;\n      directionArray[index + 4] = v1.y - v0.y;\n      directionArray[index + 5] = v1.z - v0.z;\n    }\n\n    bufferGeometry.setAttribute('control0', new BufferAttribute(controlArray0, 3, false));\n    bufferGeometry.setAttribute('control1', new BufferAttribute(controlArray1, 3, false));\n    bufferGeometry.setAttribute('direction', new BufferAttribute(directionArray, 3, false));\n  }\n\n  return object3d;\n} //\n\n\nclass LDrawLoader extends Loader {\n  constructor(manager) {\n    super(manager); // This is a stack of 'parse scopes' with one level per subobject loaded file.\n    // Each level contains a material lib and also other runtime variables passed between parent and child subobjects\n    // When searching for a material code, the stack is read from top of the stack to bottom\n    // Each material library is an object map keyed by colour codes.\n\n    this.parseScopesStack = null; // Array of THREE.Material\n\n    this.materials = []; // Not using THREE.Cache here because it returns the previous HTML error response instead of calling onError()\n    // This also allows to handle the embedded text files (\"0 FILE\" lines)\n\n    this.subobjectCache = {}; // This object is a map from file names to paths. It agilizes the paths search. If it is not set then files will be searched by trial and error.\n\n    this.fileMap = null; // Add default main triangle and line edge materials (used in piecess that can be coloured with a main color)\n\n    this.setMaterials([this.parseColourMetaDirective(new LineParser('Main_Colour CODE 16 VALUE #FF8080 EDGE #333333')), this.parseColourMetaDirective(new LineParser('Edge_Colour CODE 24 VALUE #A0A0A0 EDGE #333333'))]); // If this flag is set to true, each subobject will be a Object.\n    // If not (the default), only one object which contains all the merged primitives will be created.\n\n    this.separateObjects = false; // If this flag is set to true the vertex normals will be smoothed.\n\n    this.smoothNormals = true;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    if (!this.fileMap) {\n      this.fileMap = {};\n    }\n\n    const scope = this;\n    const fileLoader = new FileLoader(this.manager);\n    fileLoader.setPath(this.path);\n    fileLoader.setRequestHeader(this.requestHeader);\n    fileLoader.setWithCredentials(this.withCredentials);\n    fileLoader.load(url, function (text) {\n      scope.processObject(text, onLoad, null, url);\n    }, onProgress, onError);\n  }\n\n  parse(text, path, onLoad) {\n    // Async parse.  This function calls onParse with the parsed THREE.Object3D as parameter\n    this.processObject(text, onLoad, null, path);\n  }\n\n  setMaterials(materials) {\n    // Clears parse scopes stack, adds new scope with material library\n    this.parseScopesStack = [];\n    this.newParseScopeLevel(materials);\n    this.getCurrentParseScope().isFromParse = false;\n    this.materials = materials;\n    return this;\n  }\n\n  setFileMap(fileMap) {\n    this.fileMap = fileMap;\n    return this;\n  }\n\n  newParseScopeLevel(materials) {\n    // Adds a new scope level, assign materials to it and returns it\n    const matLib = {};\n\n    if (materials) {\n      for (let i = 0, n = materials.length; i < n; i++) {\n        const material = materials[i];\n        matLib[material.userData.code] = material;\n      }\n    }\n\n    const topParseScope = this.getCurrentParseScope();\n    const newParseScope = {\n      lib: matLib,\n      url: null,\n      // Subobjects\n      subobjects: null,\n      numSubobjects: 0,\n      subobjectIndex: 0,\n      inverted: false,\n      category: null,\n      keywords: null,\n      // Current subobject\n      currentFileName: null,\n      mainColourCode: topParseScope ? topParseScope.mainColourCode : '16',\n      mainEdgeColourCode: topParseScope ? topParseScope.mainEdgeColourCode : '24',\n      currentMatrix: new Matrix4(),\n      matrix: new Matrix4(),\n      // If false, it is a root material scope previous to parse\n      isFromParse: true,\n      triangles: null,\n      lineSegments: null,\n      conditionalSegments: null,\n      // If true, this object is the start of a construction step\n      startingConstructionStep: false\n    };\n    this.parseScopesStack.push(newParseScope);\n    return newParseScope;\n  }\n\n  removeScopeLevel() {\n    this.parseScopesStack.pop();\n    return this;\n  }\n\n  addMaterial(material) {\n    // Adds a material to the material library which is on top of the parse scopes stack. And also to the materials array\n    const matLib = this.getCurrentParseScope().lib;\n\n    if (!matLib[material.userData.code]) {\n      this.materials.push(material);\n    }\n\n    matLib[material.userData.code] = material;\n    return this;\n  }\n\n  getMaterial(colourCode) {\n    // Given a colour code search its material in the parse scopes stack\n    if (colourCode.startsWith('0x2')) {\n      // Special 'direct' material value (RGB colour)\n      const colour = colourCode.substring(3);\n      return this.parseColourMetaDirective(new LineParser('Direct_Color_' + colour + ' CODE -1 VALUE #' + colour + ' EDGE #' + colour + ''));\n    }\n\n    for (let i = this.parseScopesStack.length - 1; i >= 0; i--) {\n      const material = this.parseScopesStack[i].lib[colourCode];\n\n      if (material) {\n        return material;\n      }\n    } // Material was not found\n\n\n    return null;\n  }\n\n  getParentParseScope() {\n    if (this.parseScopesStack.length > 1) {\n      return this.parseScopesStack[this.parseScopesStack.length - 2];\n    }\n\n    return null;\n  }\n\n  getCurrentParseScope() {\n    if (this.parseScopesStack.length > 0) {\n      return this.parseScopesStack[this.parseScopesStack.length - 1];\n    }\n\n    return null;\n  }\n\n  parseColourMetaDirective(lineParser) {\n    // Parses a colour definition and returns a THREE.Material or null if error\n    let code = null; // Triangle and line colours\n\n    let colour = 0xff00ff;\n    let edgeColour = 0xff00ff; // Transparency\n\n    let alpha = 1;\n    let isTransparent = false; // Self-illumination:\n\n    let luminance = 0;\n    let finishType = FINISH_TYPE_DEFAULT;\n    let canHaveEnvMap = true;\n    let edgeMaterial = null;\n    const name = lineParser.getToken();\n\n    if (!name) {\n      throw 'LDrawLoader: Material name was expected after \"!COLOUR tag' + lineParser.getLineNumberString() + '.';\n    } // Parse tag tokens and their parameters\n\n\n    let token = null;\n\n    while (true) {\n      token = lineParser.getToken();\n\n      if (!token) {\n        break;\n      }\n\n      switch (token.toUpperCase()) {\n        case 'CODE':\n          code = lineParser.getToken();\n          break;\n\n        case 'VALUE':\n          colour = lineParser.getToken();\n\n          if (colour.startsWith('0x')) {\n            colour = '#' + colour.substring(2);\n          } else if (!colour.startsWith('#')) {\n            throw 'LDrawLoader: Invalid colour while parsing material' + lineParser.getLineNumberString() + '.';\n          }\n\n          break;\n\n        case 'EDGE':\n          edgeColour = lineParser.getToken();\n\n          if (edgeColour.startsWith('0x')) {\n            edgeColour = '#' + edgeColour.substring(2);\n          } else if (!edgeColour.startsWith('#')) {\n            // Try to see if edge colour is a colour code\n            edgeMaterial = this.getMaterial(edgeColour);\n\n            if (!edgeMaterial) {\n              throw 'LDrawLoader: Invalid edge colour while parsing material' + lineParser.getLineNumberString() + '.';\n            } // Get the edge material for this triangle material\n\n\n            edgeMaterial = edgeMaterial.userData.edgeMaterial;\n          }\n\n          break;\n\n        case 'ALPHA':\n          alpha = parseInt(lineParser.getToken());\n\n          if (isNaN(alpha)) {\n            throw 'LDrawLoader: Invalid alpha value in material definition' + lineParser.getLineNumberString() + '.';\n          }\n\n          alpha = Math.max(0, Math.min(1, alpha / 255));\n\n          if (alpha < 1) {\n            isTransparent = true;\n          }\n\n          break;\n\n        case 'LUMINANCE':\n          luminance = parseInt(lineParser.getToken());\n\n          if (isNaN(luminance)) {\n            throw 'LDrawLoader: Invalid luminance value in material definition' + LineParser.getLineNumberString() + '.';\n          }\n\n          luminance = Math.max(0, Math.min(1, luminance / 255));\n          break;\n\n        case 'CHROME':\n          finishType = FINISH_TYPE_CHROME;\n          break;\n\n        case 'PEARLESCENT':\n          finishType = FINISH_TYPE_PEARLESCENT;\n          break;\n\n        case 'RUBBER':\n          finishType = FINISH_TYPE_RUBBER;\n          break;\n\n        case 'MATTE_METALLIC':\n          finishType = FINISH_TYPE_MATTE_METALLIC;\n          break;\n\n        case 'METAL':\n          finishType = FINISH_TYPE_METAL;\n          break;\n\n        case 'MATERIAL':\n          // Not implemented\n          lineParser.setToEnd();\n          break;\n\n        default:\n          throw 'LDrawLoader: Unknown token \"' + token + '\" while parsing material' + lineParser.getLineNumberString() + '.';\n      }\n    }\n\n    let material = null;\n\n    switch (finishType) {\n      case FINISH_TYPE_DEFAULT:\n        material = new MeshStandardMaterial({\n          color: colour,\n          roughness: 0.3,\n          envMapIntensity: 0.3,\n          metalness: 0\n        });\n        break;\n\n      case FINISH_TYPE_PEARLESCENT:\n        // Try to imitate pearlescency by setting the specular to the complementary of the color, and low shininess\n        const specular = new Color(colour);\n        const hsl = specular.getHSL({\n          h: 0,\n          s: 0,\n          l: 0\n        });\n        hsl.h = (hsl.h + 0.5) % 1;\n        hsl.l = Math.min(1, hsl.l + (1 - hsl.l) * 0.7);\n        specular.setHSL(hsl.h, hsl.s, hsl.l);\n        material = new MeshPhongMaterial({\n          color: colour,\n          specular: specular,\n          shininess: 10,\n          reflectivity: 0.3\n        });\n        break;\n\n      case FINISH_TYPE_CHROME:\n        // Mirror finish surface\n        material = new MeshStandardMaterial({\n          color: colour,\n          roughness: 0,\n          metalness: 1\n        });\n        break;\n\n      case FINISH_TYPE_RUBBER:\n        // Rubber finish\n        material = new MeshStandardMaterial({\n          color: colour,\n          roughness: 0.9,\n          metalness: 0\n        });\n        canHaveEnvMap = false;\n        break;\n\n      case FINISH_TYPE_MATTE_METALLIC:\n        // Brushed metal finish\n        material = new MeshStandardMaterial({\n          color: colour,\n          roughness: 0.8,\n          metalness: 0.4\n        });\n        break;\n\n      case FINISH_TYPE_METAL:\n        // Average metal finish\n        material = new MeshStandardMaterial({\n          color: colour,\n          roughness: 0.2,\n          metalness: 0.85\n        });\n        break;\n    }\n\n    material.transparent = isTransparent;\n    material.premultipliedAlpha = true;\n    material.opacity = alpha;\n    material.depthWrite = !isTransparent;\n    material.polygonOffset = true;\n    material.polygonOffsetFactor = 1;\n    material.userData.canHaveEnvMap = canHaveEnvMap;\n\n    if (luminance !== 0) {\n      material.emissive.set(material.color).multiplyScalar(luminance);\n    }\n\n    if (!edgeMaterial) {\n      // This is the material used for edges\n      edgeMaterial = new LineBasicMaterial({\n        color: edgeColour,\n        transparent: isTransparent,\n        opacity: alpha,\n        depthWrite: !isTransparent\n      });\n      edgeMaterial.userData.code = code;\n      edgeMaterial.name = name + ' - Edge';\n      edgeMaterial.userData.canHaveEnvMap = false; // This is the material used for conditional edges\n\n      edgeMaterial.userData.conditionalEdgeMaterial = new ShaderMaterial({\n        vertexShader: conditionalLineVertShader,\n        fragmentShader: conditionalLineFragShader,\n        uniforms: UniformsUtils.merge([UniformsLib.fog, {\n          diffuse: {\n            value: new Color(edgeColour)\n          },\n          opacity: {\n            value: alpha\n          }\n        }]),\n        fog: true,\n        transparent: isTransparent,\n        depthWrite: !isTransparent\n      });\n      edgeMaterial.userData.conditionalEdgeMaterial.userData.canHaveEnvMap = false;\n    }\n\n    material.userData.code = code;\n    material.name = name;\n    material.userData.edgeMaterial = edgeMaterial;\n    return material;\n  } //\n\n\n  objectParse(text) {\n    // Retrieve data from the parent parse scope\n    const parentParseScope = this.getParentParseScope(); // Main colour codes passed to this subobject (or default codes 16 and 24 if it is the root object)\n\n    const mainColourCode = parentParseScope.mainColourCode;\n    const mainEdgeColourCode = parentParseScope.mainEdgeColourCode;\n    const currentParseScope = this.getCurrentParseScope(); // Parse result variables\n\n    let triangles;\n    let lineSegments;\n    let conditionalSegments;\n    const subobjects = [];\n    let category = null;\n    let keywords = null;\n\n    if (text.indexOf('\\r\\n') !== -1) {\n      // This is faster than String.split with regex that splits on both\n      text = text.replace(/\\r\\n/g, '\\n');\n    }\n\n    const lines = text.split('\\n');\n    const numLines = lines.length;\n    let parsingEmbeddedFiles = false;\n    let currentEmbeddedFileName = null;\n    let currentEmbeddedText = null;\n    let bfcCertified = false;\n    let bfcCCW = true;\n    let bfcInverted = false;\n    let bfcCull = true;\n    let type = '';\n    let startingConstructionStep = false;\n    const scope = this;\n\n    function parseColourCode(lineParser, forEdge) {\n      // Parses next colour code and returns a THREE.Material\n      let colourCode = lineParser.getToken();\n\n      if (!forEdge && colourCode === '16') {\n        colourCode = mainColourCode;\n      }\n\n      if (forEdge && colourCode === '24') {\n        colourCode = mainEdgeColourCode;\n      }\n\n      const material = scope.getMaterial(colourCode);\n\n      if (!material) {\n        throw 'LDrawLoader: Unknown colour code \"' + colourCode + '\" is used' + lineParser.getLineNumberString() + ' but it was not defined previously.';\n      }\n\n      return material;\n    }\n\n    function parseVector(lp) {\n      const v = new Vector3(parseFloat(lp.getToken()), parseFloat(lp.getToken()), parseFloat(lp.getToken()));\n\n      if (!scope.separateObjects) {\n        v.applyMatrix4(currentParseScope.currentMatrix);\n      }\n\n      return v;\n    } // Parse all line commands\n\n\n    for (let lineIndex = 0; lineIndex < numLines; lineIndex++) {\n      const line = lines[lineIndex];\n      if (line.length === 0) continue;\n\n      if (parsingEmbeddedFiles) {\n        if (line.startsWith('0 FILE ')) {\n          // Save previous embedded file in the cache\n          this.subobjectCache[currentEmbeddedFileName.toLowerCase()] = currentEmbeddedText; // New embedded text file\n\n          currentEmbeddedFileName = line.substring(7);\n          currentEmbeddedText = '';\n        } else {\n          currentEmbeddedText += line + '\\n';\n        }\n\n        continue;\n      }\n\n      const lp = new LineParser(line, lineIndex + 1);\n      lp.seekNonSpace();\n\n      if (lp.isAtTheEnd()) {\n        // Empty line\n        continue;\n      } // Parse the line type\n\n\n      const lineType = lp.getToken();\n      let material;\n      let segment;\n      let inverted;\n      let ccw;\n      let doubleSided;\n      let v0, v1, v2, v3, faceNormal;\n\n      switch (lineType) {\n        // Line type 0: Comment or META\n        case '0':\n          // Parse meta directive\n          const meta = lp.getToken();\n\n          if (meta) {\n            switch (meta) {\n              case '!LDRAW_ORG':\n                type = lp.getToken();\n                currentParseScope.triangles = [];\n                currentParseScope.lineSegments = [];\n                currentParseScope.conditionalSegments = [];\n                currentParseScope.type = type;\n                const isRoot = !parentParseScope.isFromParse;\n\n                if (isRoot || scope.separateObjects && !isPrimitiveType(type)) {\n                  currentParseScope.groupObject = new Group();\n                  currentParseScope.groupObject.userData.startingConstructionStep = currentParseScope.startingConstructionStep;\n                } // If the scale of the object is negated then the triangle winding order\n                // needs to be flipped.\n\n\n                if (currentParseScope.matrix.determinant() < 0 && (scope.separateObjects && isPrimitiveType(type) || !scope.separateObjects)) {\n                  currentParseScope.inverted = !currentParseScope.inverted;\n                }\n\n                triangles = currentParseScope.triangles;\n                lineSegments = currentParseScope.lineSegments;\n                conditionalSegments = currentParseScope.conditionalSegments;\n                break;\n\n              case '!COLOUR':\n                material = this.parseColourMetaDirective(lp);\n\n                if (material) {\n                  this.addMaterial(material);\n                } else {\n                  console.warn('LDrawLoader: Error parsing material' + lp.getLineNumberString());\n                }\n\n                break;\n\n              case '!CATEGORY':\n                category = lp.getToken();\n                break;\n\n              case '!KEYWORDS':\n                const newKeywords = lp.getRemainingString().split(',');\n\n                if (newKeywords.length > 0) {\n                  if (!keywords) {\n                    keywords = [];\n                  }\n\n                  newKeywords.forEach(function (keyword) {\n                    keywords.push(keyword.trim());\n                  });\n                }\n\n                break;\n\n              case 'FILE':\n                if (lineIndex > 0) {\n                  // Start embedded text files parsing\n                  parsingEmbeddedFiles = true;\n                  currentEmbeddedFileName = lp.getRemainingString();\n                  currentEmbeddedText = '';\n                  bfcCertified = false;\n                  bfcCCW = true;\n                }\n\n                break;\n\n              case 'BFC':\n                // Changes to the backface culling state\n                while (!lp.isAtTheEnd()) {\n                  const token = lp.getToken();\n\n                  switch (token) {\n                    case 'CERTIFY':\n                    case 'NOCERTIFY':\n                      bfcCertified = token === 'CERTIFY';\n                      bfcCCW = true;\n                      break;\n\n                    case 'CW':\n                    case 'CCW':\n                      bfcCCW = token === 'CCW';\n                      break;\n\n                    case 'INVERTNEXT':\n                      bfcInverted = true;\n                      break;\n\n                    case 'CLIP':\n                    case 'NOCLIP':\n                      bfcCull = token === 'CLIP';\n                      break;\n\n                    default:\n                      console.warn('THREE.LDrawLoader: BFC directive \"' + token + '\" is unknown.');\n                      break;\n                  }\n                }\n\n                break;\n\n              case 'STEP':\n                startingConstructionStep = true;\n                break;\n            }\n          }\n\n          break;\n        // Line type 1: Sub-object file\n\n        case '1':\n          material = parseColourCode(lp);\n          const posX = parseFloat(lp.getToken());\n          const posY = parseFloat(lp.getToken());\n          const posZ = parseFloat(lp.getToken());\n          const m0 = parseFloat(lp.getToken());\n          const m1 = parseFloat(lp.getToken());\n          const m2 = parseFloat(lp.getToken());\n          const m3 = parseFloat(lp.getToken());\n          const m4 = parseFloat(lp.getToken());\n          const m5 = parseFloat(lp.getToken());\n          const m6 = parseFloat(lp.getToken());\n          const m7 = parseFloat(lp.getToken());\n          const m8 = parseFloat(lp.getToken());\n          const matrix = new Matrix4().set(m0, m1, m2, posX, m3, m4, m5, posY, m6, m7, m8, posZ, 0, 0, 0, 1);\n          let fileName = lp.getRemainingString().trim().replace(/\\\\/g, '/');\n\n          if (scope.fileMap[fileName]) {\n            // Found the subobject path in the preloaded file path map\n            fileName = scope.fileMap[fileName];\n          } else {\n            // Standardized subfolders\n            if (fileName.startsWith('s/')) {\n              fileName = 'parts/' + fileName;\n            } else if (fileName.startsWith('48/')) {\n              fileName = 'p/' + fileName;\n            }\n          }\n\n          subobjects.push({\n            material: material,\n            matrix: matrix,\n            fileName: fileName,\n            originalFileName: fileName,\n            locationState: FILE_LOCATION_AS_IS,\n            url: null,\n            triedLowerCase: false,\n            inverted: bfcInverted !== currentParseScope.inverted,\n            startingConstructionStep: startingConstructionStep\n          });\n          bfcInverted = false;\n          break;\n        // Line type 2: Line segment\n\n        case '2':\n          material = parseColourCode(lp, true);\n          segment = {\n            material: material.userData.edgeMaterial,\n            colourCode: material.userData.code,\n            v0: parseVector(lp),\n            v1: parseVector(lp)\n          };\n          lineSegments.push(segment);\n          break;\n        // Line type 5: Conditional Line segment\n\n        case '5':\n          material = parseColourCode(lp, true);\n          segment = {\n            material: material.userData.edgeMaterial.userData.conditionalEdgeMaterial,\n            colourCode: material.userData.code,\n            v0: parseVector(lp),\n            v1: parseVector(lp),\n            c0: parseVector(lp),\n            c1: parseVector(lp)\n          };\n          conditionalSegments.push(segment);\n          break;\n        // Line type 3: Triangle\n\n        case '3':\n          material = parseColourCode(lp);\n          inverted = currentParseScope.inverted;\n          ccw = bfcCCW !== inverted;\n          doubleSided = !bfcCertified || !bfcCull;\n\n          if (ccw === true) {\n            v0 = parseVector(lp);\n            v1 = parseVector(lp);\n            v2 = parseVector(lp);\n          } else {\n            v2 = parseVector(lp);\n            v1 = parseVector(lp);\n            v0 = parseVector(lp);\n          }\n\n          _tempVec0.subVectors(v1, v0);\n\n          _tempVec1.subVectors(v2, v1);\n\n          faceNormal = new Vector3().crossVectors(_tempVec0, _tempVec1).normalize();\n          triangles.push({\n            material: material,\n            colourCode: material.userData.code,\n            v0: v0,\n            v1: v1,\n            v2: v2,\n            faceNormal: faceNormal,\n            n0: null,\n            n1: null,\n            n2: null\n          });\n\n          if (doubleSided === true) {\n            triangles.push({\n              material: material,\n              colourCode: material.userData.code,\n              v0: v0,\n              v1: v2,\n              v2: v1,\n              faceNormal: faceNormal,\n              n0: null,\n              n1: null,\n              n2: null\n            });\n          }\n\n          break;\n        // Line type 4: Quadrilateral\n\n        case '4':\n          material = parseColourCode(lp);\n          inverted = currentParseScope.inverted;\n          ccw = bfcCCW !== inverted;\n          doubleSided = !bfcCertified || !bfcCull;\n\n          if (ccw === true) {\n            v0 = parseVector(lp);\n            v1 = parseVector(lp);\n            v2 = parseVector(lp);\n            v3 = parseVector(lp);\n          } else {\n            v3 = parseVector(lp);\n            v2 = parseVector(lp);\n            v1 = parseVector(lp);\n            v0 = parseVector(lp);\n          }\n\n          _tempVec0.subVectors(v1, v0);\n\n          _tempVec1.subVectors(v2, v1);\n\n          faceNormal = new Vector3().crossVectors(_tempVec0, _tempVec1).normalize();\n          triangles.push({\n            material: material,\n            colourCode: material.userData.code,\n            v0: v0,\n            v1: v1,\n            v2: v2,\n            faceNormal: faceNormal,\n            n0: null,\n            n1: null,\n            n2: null\n          });\n          triangles.push({\n            material: material,\n            colourCode: material.userData.code,\n            v0: v0,\n            v1: v2,\n            v2: v3,\n            faceNormal: faceNormal,\n            n0: null,\n            n1: null,\n            n2: null\n          });\n\n          if (doubleSided === true) {\n            triangles.push({\n              material: material,\n              colourCode: material.userData.code,\n              v0: v0,\n              v1: v2,\n              v2: v1,\n              faceNormal: faceNormal,\n              n0: null,\n              n1: null,\n              n2: null\n            });\n            triangles.push({\n              material: material,\n              colourCode: material.userData.code,\n              v0: v0,\n              v1: v3,\n              v2: v2,\n              faceNormal: faceNormal,\n              n0: null,\n              n1: null,\n              n2: null\n            });\n          }\n\n          break;\n\n        default:\n          throw 'LDrawLoader: Unknown line type \"' + lineType + '\"' + lp.getLineNumberString() + '.';\n      }\n    }\n\n    if (parsingEmbeddedFiles) {\n      this.subobjectCache[currentEmbeddedFileName.toLowerCase()] = currentEmbeddedText;\n    }\n\n    currentParseScope.category = category;\n    currentParseScope.keywords = keywords;\n    currentParseScope.subobjects = subobjects;\n    currentParseScope.numSubobjects = subobjects.length;\n    currentParseScope.subobjectIndex = 0;\n  }\n\n  computeConstructionSteps(model) {\n    // Sets userdata.constructionStep number in Group objects and userData.numConstructionSteps number in the root Group object.\n    let stepNumber = 0;\n    model.traverse(c => {\n      if (c.isGroup) {\n        if (c.userData.startingConstructionStep) {\n          stepNumber++;\n        }\n\n        c.userData.constructionStep = stepNumber;\n      }\n    });\n    model.userData.numConstructionSteps = stepNumber + 1;\n  }\n\n  processObject(text, onProcessed, subobject, url) {\n    const scope = this;\n    const parseScope = scope.newParseScopeLevel();\n    parseScope.url = url;\n    const parentParseScope = scope.getParentParseScope(); // Set current matrix\n\n    if (subobject) {\n      parseScope.currentMatrix.multiplyMatrices(parentParseScope.currentMatrix, subobject.matrix);\n      parseScope.matrix.copy(subobject.matrix);\n      parseScope.inverted = subobject.inverted;\n      parseScope.startingConstructionStep = subobject.startingConstructionStep;\n    } // Add to cache\n\n\n    let currentFileName = parentParseScope.currentFileName;\n\n    if (currentFileName !== null) {\n      currentFileName = parentParseScope.currentFileName.toLowerCase();\n    }\n\n    if (scope.subobjectCache[currentFileName] === undefined) {\n      scope.subobjectCache[currentFileName] = text;\n    } // Parse the object (returns a Group)\n\n\n    scope.objectParse(text);\n    let finishedCount = 0;\n    onSubobjectFinish();\n\n    function onSubobjectFinish() {\n      finishedCount++;\n\n      if (finishedCount === parseScope.subobjects.length + 1) {\n        finalizeObject();\n      } else {\n        // Once the previous subobject has finished we can start processing the next one in the list.\n        // The subobject processing shares scope in processing so it's important that they be loaded serially\n        // to avoid race conditions.\n        // Promise.resolve is used as an approach to asynchronously schedule a task _before_ this frame ends to\n        // avoid stack overflow exceptions when loading many subobjects from the cache. RequestAnimationFrame\n        // will work but causes the load to happen after the next frame which causes the load to take significantly longer.\n        const subobject = parseScope.subobjects[parseScope.subobjectIndex];\n        Promise.resolve().then(function () {\n          loadSubobject(subobject);\n        });\n        parseScope.subobjectIndex++;\n      }\n    }\n\n    function finalizeObject() {\n      if (scope.smoothNormals && parseScope.type === 'Part') {\n        smoothNormals(parseScope.triangles, parseScope.lineSegments);\n      }\n\n      const isRoot = !parentParseScope.isFromParse;\n\n      if (scope.separateObjects && !isPrimitiveType(parseScope.type) || isRoot) {\n        const objGroup = parseScope.groupObject;\n\n        if (parseScope.triangles.length > 0) {\n          objGroup.add(createObject(parseScope.triangles, 3));\n        }\n\n        if (parseScope.lineSegments.length > 0) {\n          objGroup.add(createObject(parseScope.lineSegments, 2));\n        }\n\n        if (parseScope.conditionalSegments.length > 0) {\n          objGroup.add(createObject(parseScope.conditionalSegments, 2, true));\n        }\n\n        if (parentParseScope.groupObject) {\n          objGroup.name = parseScope.fileName;\n          objGroup.userData.category = parseScope.category;\n          objGroup.userData.keywords = parseScope.keywords;\n          parseScope.matrix.decompose(objGroup.position, objGroup.quaternion, objGroup.scale);\n          parentParseScope.groupObject.add(objGroup);\n        }\n      } else {\n        const separateObjects = scope.separateObjects;\n        const parentLineSegments = parentParseScope.lineSegments;\n        const parentConditionalSegments = parentParseScope.conditionalSegments;\n        const parentTriangles = parentParseScope.triangles;\n        const lineSegments = parseScope.lineSegments;\n        const conditionalSegments = parseScope.conditionalSegments;\n        const triangles = parseScope.triangles;\n\n        for (let i = 0, l = lineSegments.length; i < l; i++) {\n          const ls = lineSegments[i];\n\n          if (separateObjects) {\n            ls.v0.applyMatrix4(parseScope.matrix);\n            ls.v1.applyMatrix4(parseScope.matrix);\n          }\n\n          parentLineSegments.push(ls);\n        }\n\n        for (let i = 0, l = conditionalSegments.length; i < l; i++) {\n          const os = conditionalSegments[i];\n\n          if (separateObjects) {\n            os.v0.applyMatrix4(parseScope.matrix);\n            os.v1.applyMatrix4(parseScope.matrix);\n            os.c0.applyMatrix4(parseScope.matrix);\n            os.c1.applyMatrix4(parseScope.matrix);\n          }\n\n          parentConditionalSegments.push(os);\n        }\n\n        for (let i = 0, l = triangles.length; i < l; i++) {\n          const tri = triangles[i];\n\n          if (separateObjects) {\n            tri.v0 = tri.v0.clone().applyMatrix4(parseScope.matrix);\n            tri.v1 = tri.v1.clone().applyMatrix4(parseScope.matrix);\n            tri.v2 = tri.v2.clone().applyMatrix4(parseScope.matrix);\n\n            _tempVec0.subVectors(tri.v1, tri.v0);\n\n            _tempVec1.subVectors(tri.v2, tri.v1);\n\n            tri.faceNormal.crossVectors(_tempVec0, _tempVec1).normalize();\n          }\n\n          parentTriangles.push(tri);\n        }\n      }\n\n      scope.removeScopeLevel(); // If it is root object, compute construction steps\n\n      if (!parentParseScope.isFromParse) {\n        scope.computeConstructionSteps(parseScope.groupObject);\n      }\n\n      if (onProcessed) {\n        onProcessed(parseScope.groupObject);\n      }\n    }\n\n    function loadSubobject(subobject) {\n      parseScope.mainColourCode = subobject.material.userData.code;\n      parseScope.mainEdgeColourCode = subobject.material.userData.edgeMaterial.userData.code;\n      parseScope.currentFileName = subobject.originalFileName; // If subobject was cached previously, use the cached one\n\n      const cached = scope.subobjectCache[subobject.originalFileName.toLowerCase()];\n\n      if (cached) {\n        scope.processObject(cached, function (subobjectGroup) {\n          onSubobjectLoaded(subobjectGroup, subobject);\n          onSubobjectFinish();\n        }, subobject, url);\n        return;\n      } // Adjust file name to locate the subobject file path in standard locations (always under directory scope.path)\n      // Update also subobject.locationState for the next try if this load fails.\n\n\n      let subobjectURL = subobject.fileName;\n      let newLocationState = FILE_LOCATION_NOT_FOUND;\n\n      switch (subobject.locationState) {\n        case FILE_LOCATION_AS_IS:\n          newLocationState = subobject.locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_PARTS:\n          subobjectURL = 'parts/' + subobjectURL;\n          newLocationState = subobject.locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_P:\n          subobjectURL = 'p/' + subobjectURL;\n          newLocationState = subobject.locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_MODELS:\n          subobjectURL = 'models/' + subobjectURL;\n          newLocationState = subobject.locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_RELATIVE:\n          subobjectURL = url.substring(0, url.lastIndexOf('/') + 1) + subobjectURL;\n          newLocationState = subobject.locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_ABSOLUTE:\n          if (subobject.triedLowerCase) {\n            // Try absolute path\n            newLocationState = FILE_LOCATION_NOT_FOUND;\n          } else {\n            // Next attempt is lower case\n            subobject.fileName = subobject.fileName.toLowerCase();\n            subobjectURL = subobject.fileName;\n            subobject.triedLowerCase = true;\n            newLocationState = FILE_LOCATION_AS_IS;\n          }\n\n          break;\n\n        case FILE_LOCATION_NOT_FOUND:\n          // All location possibilities have been tried, give up loading this object\n          console.warn('LDrawLoader: Subobject \"' + subobject.originalFileName + '\" could not be found.');\n          return;\n      }\n\n      subobject.locationState = newLocationState;\n      subobject.url = subobjectURL; // Load the subobject\n      // Use another file loader here so we can keep track of the subobject information\n      // and use it when processing the next model.\n\n      const fileLoader = new FileLoader(scope.manager);\n      fileLoader.setPath(scope.path);\n      fileLoader.setRequestHeader(scope.requestHeader);\n      fileLoader.setWithCredentials(scope.withCredentials);\n      fileLoader.load(subobjectURL, function (text) {\n        scope.processObject(text, function (subobjectGroup) {\n          onSubobjectLoaded(subobjectGroup, subobject);\n          onSubobjectFinish();\n        }, subobject, url);\n      }, undefined, function (err) {\n        onSubobjectError(err, subobject);\n      }, subobject);\n    }\n\n    function onSubobjectLoaded(subobjectGroup, subobject) {\n      if (subobjectGroup === null) {\n        // Try to reload\n        loadSubobject(subobject);\n        return;\n      }\n\n      scope.fileMap[subobject.originalFileName] = subobject.url;\n    }\n\n    function onSubobjectError(err, subobject) {\n      // Retry download from a different default possible location\n      loadSubobject(subobject);\n    }\n  }\n\n}\n\nexport { LDrawLoader };","map":{"version":3,"names":["Vector3","Loader","FileLoader","Matrix4","MeshStandardMaterial","Color","MeshPhongMaterial","LineBasicMaterial","ShaderMaterial","UniformsUtils","UniformsLib","Group","BufferGeometry","Float32BufferAttribute","LineSegments","Mesh","BufferAttribute","FINISH_TYPE_DEFAULT","FINISH_TYPE_CHROME","FINISH_TYPE_PEARLESCENT","FINISH_TYPE_RUBBER","FINISH_TYPE_MATTE_METALLIC","FINISH_TYPE_METAL","FILE_LOCATION_AS_IS","FILE_LOCATION_TRY_PARTS","FILE_LOCATION_TRY_P","FILE_LOCATION_TRY_MODELS","FILE_LOCATION_TRY_RELATIVE","FILE_LOCATION_TRY_ABSOLUTE","FILE_LOCATION_NOT_FOUND","conditionalLineVertShader","conditionalLineFragShader","_tempVec0","_tempVec1","smoothNormals","triangles","lineSegments","hashVertex","v","x","y","z","hashEdge","v0","v1","hardEdges","Set","halfEdgeList","fullHalfEdgeList","normals","i","l","length","ls","add","tri","i2","l2","index","next","hash","has","halfEdges","Object","keys","queue","faceNormal","n0","clone","push","n1","n2","reverseHash","otherTri","Math","abs","dot","i3","l3","otherIndex","otherNext","otherV0","otherV1","otherHash","norm","normalize","isPrimitiveType","type","test","LineParser","constructor","line","lineNumber","lineLength","currentCharIndex","currentChar","seekNonSpace","charAt","getToken","pos0","pos1","substring","getRemainingString","isAtTheEnd","setToEnd","getLineNumberString","sortByMaterial","a","b","colourCode","createObject","elements","elementSize","isConditionalSegments","sort","positions","materials","bufferGeometry","prevMaterial","index0","numGroupVerts","iElem","nElem","elem","v2","material","addGroup","Infinity","setAttribute","object3d","isConditionalLine","controlArray0","Float32Array","controlArray1","directionArray","os","c0","c1","LDrawLoader","manager","parseScopesStack","subobjectCache","fileMap","setMaterials","parseColourMetaDirective","separateObjects","load","url","onLoad","onProgress","onError","scope","fileLoader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","processObject","parse","newParseScopeLevel","getCurrentParseScope","isFromParse","setFileMap","matLib","n","userData","code","topParseScope","newParseScope","lib","subobjects","numSubobjects","subobjectIndex","inverted","category","keywords","currentFileName","mainColourCode","mainEdgeColourCode","currentMatrix","matrix","conditionalSegments","startingConstructionStep","removeScopeLevel","pop","addMaterial","getMaterial","startsWith","colour","getParentParseScope","lineParser","edgeColour","alpha","isTransparent","luminance","finishType","canHaveEnvMap","edgeMaterial","name","token","toUpperCase","parseInt","isNaN","max","min","color","roughness","envMapIntensity","metalness","specular","hsl","getHSL","h","s","setHSL","shininess","reflectivity","transparent","premultipliedAlpha","opacity","depthWrite","polygonOffset","polygonOffsetFactor","emissive","set","multiplyScalar","conditionalEdgeMaterial","vertexShader","fragmentShader","uniforms","merge","fog","diffuse","value","objectParse","parentParseScope","currentParseScope","indexOf","replace","lines","split","numLines","parsingEmbeddedFiles","currentEmbeddedFileName","currentEmbeddedText","bfcCertified","bfcCCW","bfcInverted","bfcCull","parseColourCode","forEdge","parseVector","lp","parseFloat","applyMatrix4","lineIndex","toLowerCase","lineType","segment","ccw","doubleSided","v3","meta","isRoot","groupObject","determinant","console","warn","newKeywords","forEach","keyword","trim","posX","posY","posZ","m0","m1","m2","m3","m4","m5","m6","m7","m8","fileName","originalFileName","locationState","triedLowerCase","subVectors","crossVectors","computeConstructionSteps","model","stepNumber","traverse","c","isGroup","constructionStep","numConstructionSteps","onProcessed","subobject","parseScope","multiplyMatrices","copy","undefined","finishedCount","onSubobjectFinish","finalizeObject","Promise","resolve","then","loadSubobject","objGroup","decompose","position","quaternion","scale","parentLineSegments","parentConditionalSegments","parentTriangles","cached","subobjectGroup","onSubobjectLoaded","subobjectURL","newLocationState","lastIndexOf","err","onSubobjectError"],"sources":["/home/cliffexpc63/my example/portfolioQ/node_modules/three-stdlib/loaders/LDrawLoader.js"],"sourcesContent":["import { Vector3, Loader, FileLoader, Matrix4, MeshStandardMaterial, Color, MeshPhongMaterial, LineBasicMaterial, ShaderMaterial, UniformsUtils, UniformsLib, Group, BufferGeometry, Float32BufferAttribute, LineSegments, Mesh, BufferAttribute } from 'three';\n\n// Note: \"MATERIAL\" tag (e.g. GLITTER, SPECKLE) is not implemented\n\nconst FINISH_TYPE_DEFAULT = 0;\nconst FINISH_TYPE_CHROME = 1;\nconst FINISH_TYPE_PEARLESCENT = 2;\nconst FINISH_TYPE_RUBBER = 3;\nconst FINISH_TYPE_MATTE_METALLIC = 4;\nconst FINISH_TYPE_METAL = 5; // State machine to search a subobject path.\n// The LDraw standard establishes these various possible subfolders.\n\nconst FILE_LOCATION_AS_IS = 0;\nconst FILE_LOCATION_TRY_PARTS = 1;\nconst FILE_LOCATION_TRY_P = 2;\nconst FILE_LOCATION_TRY_MODELS = 3;\nconst FILE_LOCATION_TRY_RELATIVE = 4;\nconst FILE_LOCATION_TRY_ABSOLUTE = 5;\nconst FILE_LOCATION_NOT_FOUND = 6;\nconst conditionalLineVertShader =\n/* glsl */\n`\n\tattribute vec3 control0;\n\tattribute vec3 control1;\n\tattribute vec3 direction;\n\tvarying float discardFlag;\n\n\t#include <common>\n\t#include <color_pars_vertex>\n\t#include <fog_pars_vertex>\n\t#include <logdepthbuf_pars_vertex>\n\t#include <clipping_planes_pars_vertex>\n\tvoid main() {\n\t\t#include <color_vertex>\n\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t// Transform the line segment ends and control points into camera clip space\n\t\tvec4 c0 = projectionMatrix * modelViewMatrix * vec4( control0, 1.0 );\n\t\tvec4 c1 = projectionMatrix * modelViewMatrix * vec4( control1, 1.0 );\n\t\tvec4 p0 = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\tvec4 p1 = projectionMatrix * modelViewMatrix * vec4( position + direction, 1.0 );\n\n\t\tc0.xy /= c0.w;\n\t\tc1.xy /= c1.w;\n\t\tp0.xy /= p0.w;\n\t\tp1.xy /= p1.w;\n\n\t\t// Get the direction of the segment and an orthogonal vector\n\t\tvec2 dir = p1.xy - p0.xy;\n\t\tvec2 norm = vec2( -dir.y, dir.x );\n\n\t\t// Get control point directions from the line\n\t\tvec2 c0dir = c0.xy - p1.xy;\n\t\tvec2 c1dir = c1.xy - p1.xy;\n\n\t\t// If the vectors to the controls points are pointed in different directions away\n\t\t// from the line segment then the line should not be drawn.\n\t\tfloat d0 = dot( normalize( norm ), normalize( c0dir ) );\n\t\tfloat d1 = dot( normalize( norm ), normalize( c1dir ) );\n\t\tdiscardFlag = float( sign( d0 ) != sign( d1 ) );\n\n\t\t#include <logdepthbuf_vertex>\n\t\t#include <clipping_planes_vertex>\n\t\t#include <fog_vertex>\n\t}\n\t`;\nconst conditionalLineFragShader =\n/* glsl */\n`\n\tuniform vec3 diffuse;\n\tuniform float opacity;\n\tvarying float discardFlag;\n\n\t#include <common>\n\t#include <color_pars_fragment>\n\t#include <fog_pars_fragment>\n\t#include <logdepthbuf_pars_fragment>\n\t#include <clipping_planes_pars_fragment>\n\tvoid main() {\n\n\t\tif ( discardFlag > 0.5 ) discard;\n\n\t\t#include <clipping_planes_fragment>\n\t\tvec3 outgoingLight = vec3( 0.0 );\n\t\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t\t#include <logdepthbuf_fragment>\n\t\t#include <color_fragment>\n\t\toutgoingLight = diffuseColor.rgb; // simple shader\n\t\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t\t#include <tonemapping_fragment>\n\t\t#include <encodings_fragment>\n\t\t#include <fog_fragment>\n\t\t#include <premultiplied_alpha_fragment>\n\t}\n\t`;\n\nconst _tempVec0 = new Vector3();\n\nconst _tempVec1 = new Vector3();\n\nfunction smoothNormals(triangles, lineSegments) {\n  function hashVertex(v) {\n    // NOTE: 1e2 is pretty coarse but was chosen because it allows edges\n    // to be smoothed as expected (see minifig arms). The errors between edges\n    // could be due to matrix multiplication.\n    const x = ~~(v.x * 1e2);\n    const y = ~~(v.y * 1e2);\n    const z = ~~(v.z * 1e2);\n    return `${x},${y},${z}`;\n  }\n\n  function hashEdge(v0, v1) {\n    return `${hashVertex(v0)}_${hashVertex(v1)}`;\n  }\n\n  const hardEdges = new Set();\n  const halfEdgeList = {};\n  const fullHalfEdgeList = {};\n  const normals = []; // Save the list of hard edges by hash\n\n  for (let i = 0, l = lineSegments.length; i < l; i++) {\n    const ls = lineSegments[i];\n    const v0 = ls.v0;\n    const v1 = ls.v1;\n    hardEdges.add(hashEdge(v0, v1));\n    hardEdges.add(hashEdge(v1, v0));\n  } // track the half edges associated with each triangle\n\n\n  for (let i = 0, l = triangles.length; i < l; i++) {\n    const tri = triangles[i];\n\n    for (let i2 = 0, l2 = 3; i2 < l2; i2++) {\n      const index = i2;\n      const next = (i2 + 1) % 3;\n      const v0 = tri[`v${index}`];\n      const v1 = tri[`v${next}`];\n      const hash = hashEdge(v0, v1); // don't add the triangle if the edge is supposed to be hard\n\n      if (hardEdges.has(hash)) continue;\n      halfEdgeList[hash] = tri;\n      fullHalfEdgeList[hash] = tri;\n    }\n  } // NOTE: Some of the normals wind up being skewed in an unexpected way because\n  // quads provide more \"influence\" to some vertex normals than a triangle due to\n  // the fact that a quad is made up of two triangles and all triangles are weighted\n  // equally. To fix this quads could be tracked separately so their vertex normals\n  // are weighted appropriately or we could try only adding a normal direction\n  // once per normal.\n  // Iterate until we've tried to connect all triangles to share normals\n\n\n  while (true) {\n    // Stop if there are no more triangles left\n    const halfEdges = Object.keys(halfEdgeList);\n    if (halfEdges.length === 0) break; // Exhaustively find all connected triangles\n\n    let i = 0;\n    const queue = [fullHalfEdgeList[halfEdges[0]]];\n\n    while (i < queue.length) {\n      // initialize all vertex normals in this triangle\n      const tri = queue[i];\n      i++;\n      const faceNormal = tri.faceNormal;\n\n      if (tri.n0 === null) {\n        tri.n0 = faceNormal.clone();\n        normals.push(tri.n0);\n      }\n\n      if (tri.n1 === null) {\n        tri.n1 = faceNormal.clone();\n        normals.push(tri.n1);\n      }\n\n      if (tri.n2 === null) {\n        tri.n2 = faceNormal.clone();\n        normals.push(tri.n2);\n      } // Check if any edge is connected to another triangle edge\n\n\n      for (let i2 = 0, l2 = 3; i2 < l2; i2++) {\n        const index = i2;\n        const next = (i2 + 1) % 3;\n        const v0 = tri[`v${index}`];\n        const v1 = tri[`v${next}`]; // delete this triangle from the list so it won't be found again\n\n        const hash = hashEdge(v0, v1);\n        delete halfEdgeList[hash];\n        const reverseHash = hashEdge(v1, v0);\n        const otherTri = fullHalfEdgeList[reverseHash];\n\n        if (otherTri) {\n          // NOTE: If the angle between triangles is > 67.5 degrees then assume it's\n          // hard edge. There are some cases where the line segments do not line up exactly\n          // with or span multiple triangle edges (see Lunar Vehicle wheels).\n          if (Math.abs(otherTri.faceNormal.dot(tri.faceNormal)) < 0.25) {\n            continue;\n          } // if this triangle has already been traversed then it won't be in\n          // the halfEdgeList. If it has not then add it to the queue and delete\n          // it so it won't be found again.\n\n\n          if (reverseHash in halfEdgeList) {\n            queue.push(otherTri);\n            delete halfEdgeList[reverseHash];\n          } // Find the matching edge in this triangle and copy the normal vector over\n\n\n          for (let i3 = 0, l3 = 3; i3 < l3; i3++) {\n            const otherIndex = i3;\n            const otherNext = (i3 + 1) % 3;\n            const otherV0 = otherTri[`v${otherIndex}`];\n            const otherV1 = otherTri[`v${otherNext}`];\n            const otherHash = hashEdge(otherV0, otherV1);\n\n            if (otherHash === reverseHash) {\n              if (otherTri[`n${otherIndex}`] === null) {\n                const norm = tri[`n${next}`];\n                otherTri[`n${otherIndex}`] = norm;\n                norm.add(otherTri.faceNormal);\n              }\n\n              if (otherTri[`n${otherNext}`] === null) {\n                const norm = tri[`n${index}`];\n                otherTri[`n${otherNext}`] = norm;\n                norm.add(otherTri.faceNormal);\n              }\n\n              break;\n            }\n          }\n        }\n      }\n    }\n  } // The normals of each face have been added up so now we average them by normalizing the vector.\n\n\n  for (let i = 0, l = normals.length; i < l; i++) {\n    normals[i].normalize();\n  }\n}\n\nfunction isPrimitiveType(type) {\n  return /primitive/i.test(type) || type === 'Subpart';\n}\n\nclass LineParser {\n  constructor(line, lineNumber) {\n    this.line = line;\n    this.lineLength = line.length;\n    this.currentCharIndex = 0;\n    this.currentChar = ' ';\n    this.lineNumber = lineNumber;\n  }\n\n  seekNonSpace() {\n    while (this.currentCharIndex < this.lineLength) {\n      this.currentChar = this.line.charAt(this.currentCharIndex);\n\n      if (this.currentChar !== ' ' && this.currentChar !== '\\t') {\n        return;\n      }\n\n      this.currentCharIndex++;\n    }\n  }\n\n  getToken() {\n    const pos0 = this.currentCharIndex++; // Seek space\n\n    while (this.currentCharIndex < this.lineLength) {\n      this.currentChar = this.line.charAt(this.currentCharIndex);\n\n      if (this.currentChar === ' ' || this.currentChar === '\\t') {\n        break;\n      }\n\n      this.currentCharIndex++;\n    }\n\n    const pos1 = this.currentCharIndex;\n    this.seekNonSpace();\n    return this.line.substring(pos0, pos1);\n  }\n\n  getRemainingString() {\n    return this.line.substring(this.currentCharIndex, this.lineLength);\n  }\n\n  isAtTheEnd() {\n    return this.currentCharIndex >= this.lineLength;\n  }\n\n  setToEnd() {\n    this.currentCharIndex = this.lineLength;\n  }\n\n  getLineNumberString() {\n    return this.lineNumber >= 0 ? ' at line ' + this.lineNumber : '';\n  }\n\n}\n\nfunction sortByMaterial(a, b) {\n  if (a.colourCode === b.colourCode) {\n    return 0;\n  }\n\n  if (a.colourCode < b.colourCode) {\n    return -1;\n  }\n\n  return 1;\n}\n\nfunction createObject(elements, elementSize, isConditionalSegments) {\n  // Creates a LineSegments (elementSize = 2) or a Mesh (elementSize = 3 )\n  // With per face / segment material, implemented with mesh groups and materials array\n  // Sort the triangles or line segments by colour code to make later the mesh groups\n  elements.sort(sortByMaterial);\n  const positions = [];\n  const normals = [];\n  const materials = [];\n  const bufferGeometry = new BufferGeometry();\n  let prevMaterial = null;\n  let index0 = 0;\n  let numGroupVerts = 0;\n\n  for (let iElem = 0, nElem = elements.length; iElem < nElem; iElem++) {\n    const elem = elements[iElem];\n    const v0 = elem.v0;\n    const v1 = elem.v1; // Note that LDraw coordinate system is rotated 180 deg. in the X axis w.r.t. Three.js's one\n\n    positions.push(v0.x, v0.y, v0.z, v1.x, v1.y, v1.z);\n\n    if (elementSize === 3) {\n      positions.push(elem.v2.x, elem.v2.y, elem.v2.z);\n      const n0 = elem.n0 || elem.faceNormal;\n      const n1 = elem.n1 || elem.faceNormal;\n      const n2 = elem.n2 || elem.faceNormal;\n      normals.push(n0.x, n0.y, n0.z);\n      normals.push(n1.x, n1.y, n1.z);\n      normals.push(n2.x, n2.y, n2.z);\n    }\n\n    if (prevMaterial !== elem.material) {\n      if (prevMaterial !== null) {\n        bufferGeometry.addGroup(index0, numGroupVerts, materials.length - 1);\n      }\n\n      materials.push(elem.material);\n      prevMaterial = elem.material;\n      index0 = iElem * elementSize;\n      numGroupVerts = elementSize;\n    } else {\n      numGroupVerts += elementSize;\n    }\n  }\n\n  if (numGroupVerts > 0) {\n    bufferGeometry.addGroup(index0, Infinity, materials.length - 1);\n  }\n\n  bufferGeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\n  if (elementSize === 3) {\n    bufferGeometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n  }\n\n  let object3d = null;\n\n  if (elementSize === 2) {\n    object3d = new LineSegments(bufferGeometry, materials);\n  } else if (elementSize === 3) {\n    object3d = new Mesh(bufferGeometry, materials);\n  }\n\n  if (isConditionalSegments) {\n    object3d.isConditionalLine = true;\n    const controlArray0 = new Float32Array(elements.length * 3 * 2);\n    const controlArray1 = new Float32Array(elements.length * 3 * 2);\n    const directionArray = new Float32Array(elements.length * 3 * 2);\n\n    for (let i = 0, l = elements.length; i < l; i++) {\n      const os = elements[i];\n      const c0 = os.c0;\n      const c1 = os.c1;\n      const v0 = os.v0;\n      const v1 = os.v1;\n      const index = i * 3 * 2;\n      controlArray0[index + 0] = c0.x;\n      controlArray0[index + 1] = c0.y;\n      controlArray0[index + 2] = c0.z;\n      controlArray0[index + 3] = c0.x;\n      controlArray0[index + 4] = c0.y;\n      controlArray0[index + 5] = c0.z;\n      controlArray1[index + 0] = c1.x;\n      controlArray1[index + 1] = c1.y;\n      controlArray1[index + 2] = c1.z;\n      controlArray1[index + 3] = c1.x;\n      controlArray1[index + 4] = c1.y;\n      controlArray1[index + 5] = c1.z;\n      directionArray[index + 0] = v1.x - v0.x;\n      directionArray[index + 1] = v1.y - v0.y;\n      directionArray[index + 2] = v1.z - v0.z;\n      directionArray[index + 3] = v1.x - v0.x;\n      directionArray[index + 4] = v1.y - v0.y;\n      directionArray[index + 5] = v1.z - v0.z;\n    }\n\n    bufferGeometry.setAttribute('control0', new BufferAttribute(controlArray0, 3, false));\n    bufferGeometry.setAttribute('control1', new BufferAttribute(controlArray1, 3, false));\n    bufferGeometry.setAttribute('direction', new BufferAttribute(directionArray, 3, false));\n  }\n\n  return object3d;\n} //\n\n\nclass LDrawLoader extends Loader {\n  constructor(manager) {\n    super(manager); // This is a stack of 'parse scopes' with one level per subobject loaded file.\n    // Each level contains a material lib and also other runtime variables passed between parent and child subobjects\n    // When searching for a material code, the stack is read from top of the stack to bottom\n    // Each material library is an object map keyed by colour codes.\n\n    this.parseScopesStack = null; // Array of THREE.Material\n\n    this.materials = []; // Not using THREE.Cache here because it returns the previous HTML error response instead of calling onError()\n    // This also allows to handle the embedded text files (\"0 FILE\" lines)\n\n    this.subobjectCache = {}; // This object is a map from file names to paths. It agilizes the paths search. If it is not set then files will be searched by trial and error.\n\n    this.fileMap = null; // Add default main triangle and line edge materials (used in piecess that can be coloured with a main color)\n\n    this.setMaterials([this.parseColourMetaDirective(new LineParser('Main_Colour CODE 16 VALUE #FF8080 EDGE #333333')), this.parseColourMetaDirective(new LineParser('Edge_Colour CODE 24 VALUE #A0A0A0 EDGE #333333'))]); // If this flag is set to true, each subobject will be a Object.\n    // If not (the default), only one object which contains all the merged primitives will be created.\n\n    this.separateObjects = false; // If this flag is set to true the vertex normals will be smoothed.\n\n    this.smoothNormals = true;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    if (!this.fileMap) {\n      this.fileMap = {};\n    }\n\n    const scope = this;\n    const fileLoader = new FileLoader(this.manager);\n    fileLoader.setPath(this.path);\n    fileLoader.setRequestHeader(this.requestHeader);\n    fileLoader.setWithCredentials(this.withCredentials);\n    fileLoader.load(url, function (text) {\n      scope.processObject(text, onLoad, null, url);\n    }, onProgress, onError);\n  }\n\n  parse(text, path, onLoad) {\n    // Async parse.  This function calls onParse with the parsed THREE.Object3D as parameter\n    this.processObject(text, onLoad, null, path);\n  }\n\n  setMaterials(materials) {\n    // Clears parse scopes stack, adds new scope with material library\n    this.parseScopesStack = [];\n    this.newParseScopeLevel(materials);\n    this.getCurrentParseScope().isFromParse = false;\n    this.materials = materials;\n    return this;\n  }\n\n  setFileMap(fileMap) {\n    this.fileMap = fileMap;\n    return this;\n  }\n\n  newParseScopeLevel(materials) {\n    // Adds a new scope level, assign materials to it and returns it\n    const matLib = {};\n\n    if (materials) {\n      for (let i = 0, n = materials.length; i < n; i++) {\n        const material = materials[i];\n        matLib[material.userData.code] = material;\n      }\n    }\n\n    const topParseScope = this.getCurrentParseScope();\n    const newParseScope = {\n      lib: matLib,\n      url: null,\n      // Subobjects\n      subobjects: null,\n      numSubobjects: 0,\n      subobjectIndex: 0,\n      inverted: false,\n      category: null,\n      keywords: null,\n      // Current subobject\n      currentFileName: null,\n      mainColourCode: topParseScope ? topParseScope.mainColourCode : '16',\n      mainEdgeColourCode: topParseScope ? topParseScope.mainEdgeColourCode : '24',\n      currentMatrix: new Matrix4(),\n      matrix: new Matrix4(),\n      // If false, it is a root material scope previous to parse\n      isFromParse: true,\n      triangles: null,\n      lineSegments: null,\n      conditionalSegments: null,\n      // If true, this object is the start of a construction step\n      startingConstructionStep: false\n    };\n    this.parseScopesStack.push(newParseScope);\n    return newParseScope;\n  }\n\n  removeScopeLevel() {\n    this.parseScopesStack.pop();\n    return this;\n  }\n\n  addMaterial(material) {\n    // Adds a material to the material library which is on top of the parse scopes stack. And also to the materials array\n    const matLib = this.getCurrentParseScope().lib;\n\n    if (!matLib[material.userData.code]) {\n      this.materials.push(material);\n    }\n\n    matLib[material.userData.code] = material;\n    return this;\n  }\n\n  getMaterial(colourCode) {\n    // Given a colour code search its material in the parse scopes stack\n    if (colourCode.startsWith('0x2')) {\n      // Special 'direct' material value (RGB colour)\n      const colour = colourCode.substring(3);\n      return this.parseColourMetaDirective(new LineParser('Direct_Color_' + colour + ' CODE -1 VALUE #' + colour + ' EDGE #' + colour + ''));\n    }\n\n    for (let i = this.parseScopesStack.length - 1; i >= 0; i--) {\n      const material = this.parseScopesStack[i].lib[colourCode];\n\n      if (material) {\n        return material;\n      }\n    } // Material was not found\n\n\n    return null;\n  }\n\n  getParentParseScope() {\n    if (this.parseScopesStack.length > 1) {\n      return this.parseScopesStack[this.parseScopesStack.length - 2];\n    }\n\n    return null;\n  }\n\n  getCurrentParseScope() {\n    if (this.parseScopesStack.length > 0) {\n      return this.parseScopesStack[this.parseScopesStack.length - 1];\n    }\n\n    return null;\n  }\n\n  parseColourMetaDirective(lineParser) {\n    // Parses a colour definition and returns a THREE.Material or null if error\n    let code = null; // Triangle and line colours\n\n    let colour = 0xff00ff;\n    let edgeColour = 0xff00ff; // Transparency\n\n    let alpha = 1;\n    let isTransparent = false; // Self-illumination:\n\n    let luminance = 0;\n    let finishType = FINISH_TYPE_DEFAULT;\n    let canHaveEnvMap = true;\n    let edgeMaterial = null;\n    const name = lineParser.getToken();\n\n    if (!name) {\n      throw 'LDrawLoader: Material name was expected after \"!COLOUR tag' + lineParser.getLineNumberString() + '.';\n    } // Parse tag tokens and their parameters\n\n\n    let token = null;\n\n    while (true) {\n      token = lineParser.getToken();\n\n      if (!token) {\n        break;\n      }\n\n      switch (token.toUpperCase()) {\n        case 'CODE':\n          code = lineParser.getToken();\n          break;\n\n        case 'VALUE':\n          colour = lineParser.getToken();\n\n          if (colour.startsWith('0x')) {\n            colour = '#' + colour.substring(2);\n          } else if (!colour.startsWith('#')) {\n            throw 'LDrawLoader: Invalid colour while parsing material' + lineParser.getLineNumberString() + '.';\n          }\n\n          break;\n\n        case 'EDGE':\n          edgeColour = lineParser.getToken();\n\n          if (edgeColour.startsWith('0x')) {\n            edgeColour = '#' + edgeColour.substring(2);\n          } else if (!edgeColour.startsWith('#')) {\n            // Try to see if edge colour is a colour code\n            edgeMaterial = this.getMaterial(edgeColour);\n\n            if (!edgeMaterial) {\n              throw 'LDrawLoader: Invalid edge colour while parsing material' + lineParser.getLineNumberString() + '.';\n            } // Get the edge material for this triangle material\n\n\n            edgeMaterial = edgeMaterial.userData.edgeMaterial;\n          }\n\n          break;\n\n        case 'ALPHA':\n          alpha = parseInt(lineParser.getToken());\n\n          if (isNaN(alpha)) {\n            throw 'LDrawLoader: Invalid alpha value in material definition' + lineParser.getLineNumberString() + '.';\n          }\n\n          alpha = Math.max(0, Math.min(1, alpha / 255));\n\n          if (alpha < 1) {\n            isTransparent = true;\n          }\n\n          break;\n\n        case 'LUMINANCE':\n          luminance = parseInt(lineParser.getToken());\n\n          if (isNaN(luminance)) {\n            throw 'LDrawLoader: Invalid luminance value in material definition' + LineParser.getLineNumberString() + '.';\n          }\n\n          luminance = Math.max(0, Math.min(1, luminance / 255));\n          break;\n\n        case 'CHROME':\n          finishType = FINISH_TYPE_CHROME;\n          break;\n\n        case 'PEARLESCENT':\n          finishType = FINISH_TYPE_PEARLESCENT;\n          break;\n\n        case 'RUBBER':\n          finishType = FINISH_TYPE_RUBBER;\n          break;\n\n        case 'MATTE_METALLIC':\n          finishType = FINISH_TYPE_MATTE_METALLIC;\n          break;\n\n        case 'METAL':\n          finishType = FINISH_TYPE_METAL;\n          break;\n\n        case 'MATERIAL':\n          // Not implemented\n          lineParser.setToEnd();\n          break;\n\n        default:\n          throw 'LDrawLoader: Unknown token \"' + token + '\" while parsing material' + lineParser.getLineNumberString() + '.';\n      }\n    }\n\n    let material = null;\n\n    switch (finishType) {\n      case FINISH_TYPE_DEFAULT:\n        material = new MeshStandardMaterial({\n          color: colour,\n          roughness: 0.3,\n          envMapIntensity: 0.3,\n          metalness: 0\n        });\n        break;\n\n      case FINISH_TYPE_PEARLESCENT:\n        // Try to imitate pearlescency by setting the specular to the complementary of the color, and low shininess\n        const specular = new Color(colour);\n        const hsl = specular.getHSL({\n          h: 0,\n          s: 0,\n          l: 0\n        });\n        hsl.h = (hsl.h + 0.5) % 1;\n        hsl.l = Math.min(1, hsl.l + (1 - hsl.l) * 0.7);\n        specular.setHSL(hsl.h, hsl.s, hsl.l);\n        material = new MeshPhongMaterial({\n          color: colour,\n          specular: specular,\n          shininess: 10,\n          reflectivity: 0.3\n        });\n        break;\n\n      case FINISH_TYPE_CHROME:\n        // Mirror finish surface\n        material = new MeshStandardMaterial({\n          color: colour,\n          roughness: 0,\n          metalness: 1\n        });\n        break;\n\n      case FINISH_TYPE_RUBBER:\n        // Rubber finish\n        material = new MeshStandardMaterial({\n          color: colour,\n          roughness: 0.9,\n          metalness: 0\n        });\n        canHaveEnvMap = false;\n        break;\n\n      case FINISH_TYPE_MATTE_METALLIC:\n        // Brushed metal finish\n        material = new MeshStandardMaterial({\n          color: colour,\n          roughness: 0.8,\n          metalness: 0.4\n        });\n        break;\n\n      case FINISH_TYPE_METAL:\n        // Average metal finish\n        material = new MeshStandardMaterial({\n          color: colour,\n          roughness: 0.2,\n          metalness: 0.85\n        });\n        break;\n    }\n\n    material.transparent = isTransparent;\n    material.premultipliedAlpha = true;\n    material.opacity = alpha;\n    material.depthWrite = !isTransparent;\n    material.polygonOffset = true;\n    material.polygonOffsetFactor = 1;\n    material.userData.canHaveEnvMap = canHaveEnvMap;\n\n    if (luminance !== 0) {\n      material.emissive.set(material.color).multiplyScalar(luminance);\n    }\n\n    if (!edgeMaterial) {\n      // This is the material used for edges\n      edgeMaterial = new LineBasicMaterial({\n        color: edgeColour,\n        transparent: isTransparent,\n        opacity: alpha,\n        depthWrite: !isTransparent\n      });\n      edgeMaterial.userData.code = code;\n      edgeMaterial.name = name + ' - Edge';\n      edgeMaterial.userData.canHaveEnvMap = false; // This is the material used for conditional edges\n\n      edgeMaterial.userData.conditionalEdgeMaterial = new ShaderMaterial({\n        vertexShader: conditionalLineVertShader,\n        fragmentShader: conditionalLineFragShader,\n        uniforms: UniformsUtils.merge([UniformsLib.fog, {\n          diffuse: {\n            value: new Color(edgeColour)\n          },\n          opacity: {\n            value: alpha\n          }\n        }]),\n        fog: true,\n        transparent: isTransparent,\n        depthWrite: !isTransparent\n      });\n      edgeMaterial.userData.conditionalEdgeMaterial.userData.canHaveEnvMap = false;\n    }\n\n    material.userData.code = code;\n    material.name = name;\n    material.userData.edgeMaterial = edgeMaterial;\n    return material;\n  } //\n\n\n  objectParse(text) {\n    // Retrieve data from the parent parse scope\n    const parentParseScope = this.getParentParseScope(); // Main colour codes passed to this subobject (or default codes 16 and 24 if it is the root object)\n\n    const mainColourCode = parentParseScope.mainColourCode;\n    const mainEdgeColourCode = parentParseScope.mainEdgeColourCode;\n    const currentParseScope = this.getCurrentParseScope(); // Parse result variables\n\n    let triangles;\n    let lineSegments;\n    let conditionalSegments;\n    const subobjects = [];\n    let category = null;\n    let keywords = null;\n\n    if (text.indexOf('\\r\\n') !== -1) {\n      // This is faster than String.split with regex that splits on both\n      text = text.replace(/\\r\\n/g, '\\n');\n    }\n\n    const lines = text.split('\\n');\n    const numLines = lines.length;\n    let parsingEmbeddedFiles = false;\n    let currentEmbeddedFileName = null;\n    let currentEmbeddedText = null;\n    let bfcCertified = false;\n    let bfcCCW = true;\n    let bfcInverted = false;\n    let bfcCull = true;\n    let type = '';\n    let startingConstructionStep = false;\n    const scope = this;\n\n    function parseColourCode(lineParser, forEdge) {\n      // Parses next colour code and returns a THREE.Material\n      let colourCode = lineParser.getToken();\n\n      if (!forEdge && colourCode === '16') {\n        colourCode = mainColourCode;\n      }\n\n      if (forEdge && colourCode === '24') {\n        colourCode = mainEdgeColourCode;\n      }\n\n      const material = scope.getMaterial(colourCode);\n\n      if (!material) {\n        throw 'LDrawLoader: Unknown colour code \"' + colourCode + '\" is used' + lineParser.getLineNumberString() + ' but it was not defined previously.';\n      }\n\n      return material;\n    }\n\n    function parseVector(lp) {\n      const v = new Vector3(parseFloat(lp.getToken()), parseFloat(lp.getToken()), parseFloat(lp.getToken()));\n\n      if (!scope.separateObjects) {\n        v.applyMatrix4(currentParseScope.currentMatrix);\n      }\n\n      return v;\n    } // Parse all line commands\n\n\n    for (let lineIndex = 0; lineIndex < numLines; lineIndex++) {\n      const line = lines[lineIndex];\n      if (line.length === 0) continue;\n\n      if (parsingEmbeddedFiles) {\n        if (line.startsWith('0 FILE ')) {\n          // Save previous embedded file in the cache\n          this.subobjectCache[currentEmbeddedFileName.toLowerCase()] = currentEmbeddedText; // New embedded text file\n\n          currentEmbeddedFileName = line.substring(7);\n          currentEmbeddedText = '';\n        } else {\n          currentEmbeddedText += line + '\\n';\n        }\n\n        continue;\n      }\n\n      const lp = new LineParser(line, lineIndex + 1);\n      lp.seekNonSpace();\n\n      if (lp.isAtTheEnd()) {\n        // Empty line\n        continue;\n      } // Parse the line type\n\n\n      const lineType = lp.getToken();\n      let material;\n      let segment;\n      let inverted;\n      let ccw;\n      let doubleSided;\n      let v0, v1, v2, v3, faceNormal;\n\n      switch (lineType) {\n        // Line type 0: Comment or META\n        case '0':\n          // Parse meta directive\n          const meta = lp.getToken();\n\n          if (meta) {\n            switch (meta) {\n              case '!LDRAW_ORG':\n                type = lp.getToken();\n                currentParseScope.triangles = [];\n                currentParseScope.lineSegments = [];\n                currentParseScope.conditionalSegments = [];\n                currentParseScope.type = type;\n                const isRoot = !parentParseScope.isFromParse;\n\n                if (isRoot || scope.separateObjects && !isPrimitiveType(type)) {\n                  currentParseScope.groupObject = new Group();\n                  currentParseScope.groupObject.userData.startingConstructionStep = currentParseScope.startingConstructionStep;\n                } // If the scale of the object is negated then the triangle winding order\n                // needs to be flipped.\n\n\n                if (currentParseScope.matrix.determinant() < 0 && (scope.separateObjects && isPrimitiveType(type) || !scope.separateObjects)) {\n                  currentParseScope.inverted = !currentParseScope.inverted;\n                }\n\n                triangles = currentParseScope.triangles;\n                lineSegments = currentParseScope.lineSegments;\n                conditionalSegments = currentParseScope.conditionalSegments;\n                break;\n\n              case '!COLOUR':\n                material = this.parseColourMetaDirective(lp);\n\n                if (material) {\n                  this.addMaterial(material);\n                } else {\n                  console.warn('LDrawLoader: Error parsing material' + lp.getLineNumberString());\n                }\n\n                break;\n\n              case '!CATEGORY':\n                category = lp.getToken();\n                break;\n\n              case '!KEYWORDS':\n                const newKeywords = lp.getRemainingString().split(',');\n\n                if (newKeywords.length > 0) {\n                  if (!keywords) {\n                    keywords = [];\n                  }\n\n                  newKeywords.forEach(function (keyword) {\n                    keywords.push(keyword.trim());\n                  });\n                }\n\n                break;\n\n              case 'FILE':\n                if (lineIndex > 0) {\n                  // Start embedded text files parsing\n                  parsingEmbeddedFiles = true;\n                  currentEmbeddedFileName = lp.getRemainingString();\n                  currentEmbeddedText = '';\n                  bfcCertified = false;\n                  bfcCCW = true;\n                }\n\n                break;\n\n              case 'BFC':\n                // Changes to the backface culling state\n                while (!lp.isAtTheEnd()) {\n                  const token = lp.getToken();\n\n                  switch (token) {\n                    case 'CERTIFY':\n                    case 'NOCERTIFY':\n                      bfcCertified = token === 'CERTIFY';\n                      bfcCCW = true;\n                      break;\n\n                    case 'CW':\n                    case 'CCW':\n                      bfcCCW = token === 'CCW';\n                      break;\n\n                    case 'INVERTNEXT':\n                      bfcInverted = true;\n                      break;\n\n                    case 'CLIP':\n                    case 'NOCLIP':\n                      bfcCull = token === 'CLIP';\n                      break;\n\n                    default:\n                      console.warn('THREE.LDrawLoader: BFC directive \"' + token + '\" is unknown.');\n                      break;\n                  }\n                }\n\n                break;\n\n              case 'STEP':\n                startingConstructionStep = true;\n                break;\n            }\n          }\n\n          break;\n        // Line type 1: Sub-object file\n\n        case '1':\n          material = parseColourCode(lp);\n          const posX = parseFloat(lp.getToken());\n          const posY = parseFloat(lp.getToken());\n          const posZ = parseFloat(lp.getToken());\n          const m0 = parseFloat(lp.getToken());\n          const m1 = parseFloat(lp.getToken());\n          const m2 = parseFloat(lp.getToken());\n          const m3 = parseFloat(lp.getToken());\n          const m4 = parseFloat(lp.getToken());\n          const m5 = parseFloat(lp.getToken());\n          const m6 = parseFloat(lp.getToken());\n          const m7 = parseFloat(lp.getToken());\n          const m8 = parseFloat(lp.getToken());\n          const matrix = new Matrix4().set(m0, m1, m2, posX, m3, m4, m5, posY, m6, m7, m8, posZ, 0, 0, 0, 1);\n          let fileName = lp.getRemainingString().trim().replace(/\\\\/g, '/');\n\n          if (scope.fileMap[fileName]) {\n            // Found the subobject path in the preloaded file path map\n            fileName = scope.fileMap[fileName];\n          } else {\n            // Standardized subfolders\n            if (fileName.startsWith('s/')) {\n              fileName = 'parts/' + fileName;\n            } else if (fileName.startsWith('48/')) {\n              fileName = 'p/' + fileName;\n            }\n          }\n\n          subobjects.push({\n            material: material,\n            matrix: matrix,\n            fileName: fileName,\n            originalFileName: fileName,\n            locationState: FILE_LOCATION_AS_IS,\n            url: null,\n            triedLowerCase: false,\n            inverted: bfcInverted !== currentParseScope.inverted,\n            startingConstructionStep: startingConstructionStep\n          });\n          bfcInverted = false;\n          break;\n        // Line type 2: Line segment\n\n        case '2':\n          material = parseColourCode(lp, true);\n          segment = {\n            material: material.userData.edgeMaterial,\n            colourCode: material.userData.code,\n            v0: parseVector(lp),\n            v1: parseVector(lp)\n          };\n          lineSegments.push(segment);\n          break;\n        // Line type 5: Conditional Line segment\n\n        case '5':\n          material = parseColourCode(lp, true);\n          segment = {\n            material: material.userData.edgeMaterial.userData.conditionalEdgeMaterial,\n            colourCode: material.userData.code,\n            v0: parseVector(lp),\n            v1: parseVector(lp),\n            c0: parseVector(lp),\n            c1: parseVector(lp)\n          };\n          conditionalSegments.push(segment);\n          break;\n        // Line type 3: Triangle\n\n        case '3':\n          material = parseColourCode(lp);\n          inverted = currentParseScope.inverted;\n          ccw = bfcCCW !== inverted;\n          doubleSided = !bfcCertified || !bfcCull;\n\n          if (ccw === true) {\n            v0 = parseVector(lp);\n            v1 = parseVector(lp);\n            v2 = parseVector(lp);\n          } else {\n            v2 = parseVector(lp);\n            v1 = parseVector(lp);\n            v0 = parseVector(lp);\n          }\n\n          _tempVec0.subVectors(v1, v0);\n\n          _tempVec1.subVectors(v2, v1);\n\n          faceNormal = new Vector3().crossVectors(_tempVec0, _tempVec1).normalize();\n          triangles.push({\n            material: material,\n            colourCode: material.userData.code,\n            v0: v0,\n            v1: v1,\n            v2: v2,\n            faceNormal: faceNormal,\n            n0: null,\n            n1: null,\n            n2: null\n          });\n\n          if (doubleSided === true) {\n            triangles.push({\n              material: material,\n              colourCode: material.userData.code,\n              v0: v0,\n              v1: v2,\n              v2: v1,\n              faceNormal: faceNormal,\n              n0: null,\n              n1: null,\n              n2: null\n            });\n          }\n\n          break;\n        // Line type 4: Quadrilateral\n\n        case '4':\n          material = parseColourCode(lp);\n          inverted = currentParseScope.inverted;\n          ccw = bfcCCW !== inverted;\n          doubleSided = !bfcCertified || !bfcCull;\n\n          if (ccw === true) {\n            v0 = parseVector(lp);\n            v1 = parseVector(lp);\n            v2 = parseVector(lp);\n            v3 = parseVector(lp);\n          } else {\n            v3 = parseVector(lp);\n            v2 = parseVector(lp);\n            v1 = parseVector(lp);\n            v0 = parseVector(lp);\n          }\n\n          _tempVec0.subVectors(v1, v0);\n\n          _tempVec1.subVectors(v2, v1);\n\n          faceNormal = new Vector3().crossVectors(_tempVec0, _tempVec1).normalize();\n          triangles.push({\n            material: material,\n            colourCode: material.userData.code,\n            v0: v0,\n            v1: v1,\n            v2: v2,\n            faceNormal: faceNormal,\n            n0: null,\n            n1: null,\n            n2: null\n          });\n          triangles.push({\n            material: material,\n            colourCode: material.userData.code,\n            v0: v0,\n            v1: v2,\n            v2: v3,\n            faceNormal: faceNormal,\n            n0: null,\n            n1: null,\n            n2: null\n          });\n\n          if (doubleSided === true) {\n            triangles.push({\n              material: material,\n              colourCode: material.userData.code,\n              v0: v0,\n              v1: v2,\n              v2: v1,\n              faceNormal: faceNormal,\n              n0: null,\n              n1: null,\n              n2: null\n            });\n            triangles.push({\n              material: material,\n              colourCode: material.userData.code,\n              v0: v0,\n              v1: v3,\n              v2: v2,\n              faceNormal: faceNormal,\n              n0: null,\n              n1: null,\n              n2: null\n            });\n          }\n\n          break;\n\n        default:\n          throw 'LDrawLoader: Unknown line type \"' + lineType + '\"' + lp.getLineNumberString() + '.';\n      }\n    }\n\n    if (parsingEmbeddedFiles) {\n      this.subobjectCache[currentEmbeddedFileName.toLowerCase()] = currentEmbeddedText;\n    }\n\n    currentParseScope.category = category;\n    currentParseScope.keywords = keywords;\n    currentParseScope.subobjects = subobjects;\n    currentParseScope.numSubobjects = subobjects.length;\n    currentParseScope.subobjectIndex = 0;\n  }\n\n  computeConstructionSteps(model) {\n    // Sets userdata.constructionStep number in Group objects and userData.numConstructionSteps number in the root Group object.\n    let stepNumber = 0;\n    model.traverse(c => {\n      if (c.isGroup) {\n        if (c.userData.startingConstructionStep) {\n          stepNumber++;\n        }\n\n        c.userData.constructionStep = stepNumber;\n      }\n    });\n    model.userData.numConstructionSteps = stepNumber + 1;\n  }\n\n  processObject(text, onProcessed, subobject, url) {\n    const scope = this;\n    const parseScope = scope.newParseScopeLevel();\n    parseScope.url = url;\n    const parentParseScope = scope.getParentParseScope(); // Set current matrix\n\n    if (subobject) {\n      parseScope.currentMatrix.multiplyMatrices(parentParseScope.currentMatrix, subobject.matrix);\n      parseScope.matrix.copy(subobject.matrix);\n      parseScope.inverted = subobject.inverted;\n      parseScope.startingConstructionStep = subobject.startingConstructionStep;\n    } // Add to cache\n\n\n    let currentFileName = parentParseScope.currentFileName;\n\n    if (currentFileName !== null) {\n      currentFileName = parentParseScope.currentFileName.toLowerCase();\n    }\n\n    if (scope.subobjectCache[currentFileName] === undefined) {\n      scope.subobjectCache[currentFileName] = text;\n    } // Parse the object (returns a Group)\n\n\n    scope.objectParse(text);\n    let finishedCount = 0;\n    onSubobjectFinish();\n\n    function onSubobjectFinish() {\n      finishedCount++;\n\n      if (finishedCount === parseScope.subobjects.length + 1) {\n        finalizeObject();\n      } else {\n        // Once the previous subobject has finished we can start processing the next one in the list.\n        // The subobject processing shares scope in processing so it's important that they be loaded serially\n        // to avoid race conditions.\n        // Promise.resolve is used as an approach to asynchronously schedule a task _before_ this frame ends to\n        // avoid stack overflow exceptions when loading many subobjects from the cache. RequestAnimationFrame\n        // will work but causes the load to happen after the next frame which causes the load to take significantly longer.\n        const subobject = parseScope.subobjects[parseScope.subobjectIndex];\n        Promise.resolve().then(function () {\n          loadSubobject(subobject);\n        });\n        parseScope.subobjectIndex++;\n      }\n    }\n\n    function finalizeObject() {\n      if (scope.smoothNormals && parseScope.type === 'Part') {\n        smoothNormals(parseScope.triangles, parseScope.lineSegments);\n      }\n\n      const isRoot = !parentParseScope.isFromParse;\n\n      if (scope.separateObjects && !isPrimitiveType(parseScope.type) || isRoot) {\n        const objGroup = parseScope.groupObject;\n\n        if (parseScope.triangles.length > 0) {\n          objGroup.add(createObject(parseScope.triangles, 3));\n        }\n\n        if (parseScope.lineSegments.length > 0) {\n          objGroup.add(createObject(parseScope.lineSegments, 2));\n        }\n\n        if (parseScope.conditionalSegments.length > 0) {\n          objGroup.add(createObject(parseScope.conditionalSegments, 2, true));\n        }\n\n        if (parentParseScope.groupObject) {\n          objGroup.name = parseScope.fileName;\n          objGroup.userData.category = parseScope.category;\n          objGroup.userData.keywords = parseScope.keywords;\n          parseScope.matrix.decompose(objGroup.position, objGroup.quaternion, objGroup.scale);\n          parentParseScope.groupObject.add(objGroup);\n        }\n      } else {\n        const separateObjects = scope.separateObjects;\n        const parentLineSegments = parentParseScope.lineSegments;\n        const parentConditionalSegments = parentParseScope.conditionalSegments;\n        const parentTriangles = parentParseScope.triangles;\n        const lineSegments = parseScope.lineSegments;\n        const conditionalSegments = parseScope.conditionalSegments;\n        const triangles = parseScope.triangles;\n\n        for (let i = 0, l = lineSegments.length; i < l; i++) {\n          const ls = lineSegments[i];\n\n          if (separateObjects) {\n            ls.v0.applyMatrix4(parseScope.matrix);\n            ls.v1.applyMatrix4(parseScope.matrix);\n          }\n\n          parentLineSegments.push(ls);\n        }\n\n        for (let i = 0, l = conditionalSegments.length; i < l; i++) {\n          const os = conditionalSegments[i];\n\n          if (separateObjects) {\n            os.v0.applyMatrix4(parseScope.matrix);\n            os.v1.applyMatrix4(parseScope.matrix);\n            os.c0.applyMatrix4(parseScope.matrix);\n            os.c1.applyMatrix4(parseScope.matrix);\n          }\n\n          parentConditionalSegments.push(os);\n        }\n\n        for (let i = 0, l = triangles.length; i < l; i++) {\n          const tri = triangles[i];\n\n          if (separateObjects) {\n            tri.v0 = tri.v0.clone().applyMatrix4(parseScope.matrix);\n            tri.v1 = tri.v1.clone().applyMatrix4(parseScope.matrix);\n            tri.v2 = tri.v2.clone().applyMatrix4(parseScope.matrix);\n\n            _tempVec0.subVectors(tri.v1, tri.v0);\n\n            _tempVec1.subVectors(tri.v2, tri.v1);\n\n            tri.faceNormal.crossVectors(_tempVec0, _tempVec1).normalize();\n          }\n\n          parentTriangles.push(tri);\n        }\n      }\n\n      scope.removeScopeLevel(); // If it is root object, compute construction steps\n\n      if (!parentParseScope.isFromParse) {\n        scope.computeConstructionSteps(parseScope.groupObject);\n      }\n\n      if (onProcessed) {\n        onProcessed(parseScope.groupObject);\n      }\n    }\n\n    function loadSubobject(subobject) {\n      parseScope.mainColourCode = subobject.material.userData.code;\n      parseScope.mainEdgeColourCode = subobject.material.userData.edgeMaterial.userData.code;\n      parseScope.currentFileName = subobject.originalFileName; // If subobject was cached previously, use the cached one\n\n      const cached = scope.subobjectCache[subobject.originalFileName.toLowerCase()];\n\n      if (cached) {\n        scope.processObject(cached, function (subobjectGroup) {\n          onSubobjectLoaded(subobjectGroup, subobject);\n          onSubobjectFinish();\n        }, subobject, url);\n        return;\n      } // Adjust file name to locate the subobject file path in standard locations (always under directory scope.path)\n      // Update also subobject.locationState for the next try if this load fails.\n\n\n      let subobjectURL = subobject.fileName;\n      let newLocationState = FILE_LOCATION_NOT_FOUND;\n\n      switch (subobject.locationState) {\n        case FILE_LOCATION_AS_IS:\n          newLocationState = subobject.locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_PARTS:\n          subobjectURL = 'parts/' + subobjectURL;\n          newLocationState = subobject.locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_P:\n          subobjectURL = 'p/' + subobjectURL;\n          newLocationState = subobject.locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_MODELS:\n          subobjectURL = 'models/' + subobjectURL;\n          newLocationState = subobject.locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_RELATIVE:\n          subobjectURL = url.substring(0, url.lastIndexOf('/') + 1) + subobjectURL;\n          newLocationState = subobject.locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_ABSOLUTE:\n          if (subobject.triedLowerCase) {\n            // Try absolute path\n            newLocationState = FILE_LOCATION_NOT_FOUND;\n          } else {\n            // Next attempt is lower case\n            subobject.fileName = subobject.fileName.toLowerCase();\n            subobjectURL = subobject.fileName;\n            subobject.triedLowerCase = true;\n            newLocationState = FILE_LOCATION_AS_IS;\n          }\n\n          break;\n\n        case FILE_LOCATION_NOT_FOUND:\n          // All location possibilities have been tried, give up loading this object\n          console.warn('LDrawLoader: Subobject \"' + subobject.originalFileName + '\" could not be found.');\n          return;\n      }\n\n      subobject.locationState = newLocationState;\n      subobject.url = subobjectURL; // Load the subobject\n      // Use another file loader here so we can keep track of the subobject information\n      // and use it when processing the next model.\n\n      const fileLoader = new FileLoader(scope.manager);\n      fileLoader.setPath(scope.path);\n      fileLoader.setRequestHeader(scope.requestHeader);\n      fileLoader.setWithCredentials(scope.withCredentials);\n      fileLoader.load(subobjectURL, function (text) {\n        scope.processObject(text, function (subobjectGroup) {\n          onSubobjectLoaded(subobjectGroup, subobject);\n          onSubobjectFinish();\n        }, subobject, url);\n      }, undefined, function (err) {\n        onSubobjectError(err, subobject);\n      }, subobject);\n    }\n\n    function onSubobjectLoaded(subobjectGroup, subobject) {\n      if (subobjectGroup === null) {\n        // Try to reload\n        loadSubobject(subobject);\n        return;\n      }\n\n      scope.fileMap[subobject.originalFileName] = subobject.url;\n    }\n\n    function onSubobjectError(err, subobject) {\n      // Retry download from a different default possible location\n      loadSubobject(subobject);\n    }\n  }\n\n}\n\nexport { LDrawLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}