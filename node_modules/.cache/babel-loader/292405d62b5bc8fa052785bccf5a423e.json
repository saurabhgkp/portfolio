{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { UVNode } from '../accessors/UVNode.js';\nfunction NoiseNode(uv) {\n  TempNode.call(this, 'f');\n  this.uv = uv || new UVNode();\n}\nNoiseNode.prototype = Object.create(TempNode.prototype);\nNoiseNode.prototype.constructor = NoiseNode;\nNoiseNode.prototype.nodeType = 'Noise';\nNoiseNode.Nodes = function () {\n  var snoise = new FunctionNode(['float snoise(vec2 co) {', '\treturn fract( sin( dot( co.xy, vec2( 12.9898, 78.233 ) ) ) * 43758.5453 );', '}'].join('\\n'));\n  return {\n    snoise: snoise\n  };\n}();\nNoiseNode.prototype.generate = function (builder, output) {\n  var snoise = builder.include(NoiseNode.Nodes.snoise);\n  return builder.format(snoise + '( ' + this.uv.build(builder, 'v2') + ' )', this.getType(builder), output);\n};\nNoiseNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.uv = source.uv;\n  return this;\n};\nNoiseNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.uv = this.uv.toJSON(meta).uuid;\n  }\n  return data;\n};\nexport { NoiseNode };","map":null,"metadata":{},"sourceType":"module"}