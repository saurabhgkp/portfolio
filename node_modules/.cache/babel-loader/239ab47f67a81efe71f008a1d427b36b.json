{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { LuminanceNode } from './LuminanceNode.js';\nfunction ColorAdjustmentNode(rgb, adjustment, method) {\n  TempNode.call(this, 'v3');\n  this.rgb = rgb;\n  this.adjustment = adjustment;\n  this.method = method || ColorAdjustmentNode.SATURATION;\n}\nColorAdjustmentNode.Nodes = function () {\n  var hue = new FunctionNode(['vec3 hue(vec3 rgb, float adjustment) {', '\tconst mat3 RGBtoYIQ = mat3(0.299, 0.587, 0.114, 0.595716, -0.274453, -0.321263, 0.211456, -0.522591, 0.311135);', '\tconst mat3 YIQtoRGB = mat3(1.0, 0.9563, 0.6210, 1.0, -0.2721, -0.6474, 1.0, -1.107, 1.7046);', '\tvec3 yiq = RGBtoYIQ * rgb;', '\tfloat hue = atan(yiq.z, yiq.y) + adjustment;', '\tfloat chroma = sqrt(yiq.z * yiq.z + yiq.y * yiq.y);', '\treturn YIQtoRGB * vec3(yiq.x, chroma * cos(hue), chroma * sin(hue));', '}'].join('\\n'));\n  var saturation = new FunctionNode([\n  // Algorithm from Chapter 16 of OpenGL Shading Language\n  'vec3 saturation(vec3 rgb, float adjustment) {', '\tvec3 intensity = vec3( luminance( rgb ) );', '\treturn mix( intensity, rgb, adjustment );', '}'].join('\\n'), [LuminanceNode.Nodes.luminance]); // include LuminanceNode function\n\n  var vibrance = new FunctionNode([\n  // Shader by Evan Wallace adapted by @lo-th\n  'vec3 vibrance(vec3 rgb, float adjustment) {', '\tfloat average = (rgb.r + rgb.g + rgb.b) / 3.0;', '\tfloat mx = max(rgb.r, max(rgb.g, rgb.b));', '\tfloat amt = (mx - average) * (-3.0 * adjustment);', '\treturn mix(rgb.rgb, vec3(mx), amt);', '}'].join('\\n'));\n  return {\n    hue: hue,\n    saturation: saturation,\n    vibrance: vibrance\n  };\n}();\nColorAdjustmentNode.SATURATION = 'saturation';\nColorAdjustmentNode.HUE = 'hue';\nColorAdjustmentNode.VIBRANCE = 'vibrance';\nColorAdjustmentNode.BRIGHTNESS = 'brightness';\nColorAdjustmentNode.CONTRAST = 'contrast';\nColorAdjustmentNode.prototype = Object.create(TempNode.prototype);\nColorAdjustmentNode.prototype.constructor = ColorAdjustmentNode;\nColorAdjustmentNode.prototype.nodeType = 'ColorAdjustment';\nColorAdjustmentNode.prototype.hashProperties = ['method'];\nColorAdjustmentNode.prototype.generate = function (builder, output) {\n  var rgb = this.rgb.build(builder, 'v3'),\n    adjustment = this.adjustment.build(builder, 'f');\n  switch (this.method) {\n    case ColorAdjustmentNode.BRIGHTNESS:\n      return builder.format('( ' + rgb + ' + ' + adjustment + ' )', this.getType(builder), output);\n    case ColorAdjustmentNode.CONTRAST:\n      return builder.format('( ' + rgb + ' * ' + adjustment + ' )', this.getType(builder), output);\n  }\n  var method = builder.include(ColorAdjustmentNode.Nodes[this.method]);\n  return builder.format(method + '( ' + rgb + ', ' + adjustment + ' )', this.getType(builder), output);\n};\nColorAdjustmentNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.rgb = source.rgb;\n  this.adjustment = source.adjustment;\n  this.method = source.method;\n  return this;\n};\nColorAdjustmentNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.rgb = this.rgb.toJSON(meta).uuid;\n    data.adjustment = this.adjustment.toJSON(meta).uuid;\n    data.method = this.method;\n  }\n  return data;\n};\nexport { ColorAdjustmentNode };","map":null,"metadata":{},"sourceType":"module"}