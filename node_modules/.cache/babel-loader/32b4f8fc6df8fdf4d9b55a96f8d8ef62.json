{"ast":null,"code":"import _classCallCheck from \"/home/cliffexpc63/my example/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cliffexpc63/my example/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { FBXLoader } from '../loaders/FBXLoader.js';\nvar XRHandOculusMeshModel = /*#__PURE__*/function () {\n  function XRHandOculusMeshModel(handModel, controller, path, handedness, options) {\n    var _this = this;\n    _classCallCheck(this, XRHandOculusMeshModel);\n    this.controller = controller;\n    this.handModel = handModel;\n    this.bones = [];\n    var loader = new FBXLoader();\n    var low = options && options.model === 'lowpoly' ? '_low' : '';\n    loader.setPath(path);\n    loader.load(\"OculusHand_\".concat(handedness === 'right' ? 'R' : 'L').concat(low, \".fbx\"), function (object) {\n      _this.handModel.add(object); // Hack because of the scale of the skinnedmesh\n\n      object.scale.setScalar(0.01);\n      var mesh = object.getObjectByProperty('type', 'SkinnedMesh');\n      mesh.frustumCulled = false;\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      var bonesMapping = ['b_%_wrist',\n      // XRHand.WRIST,\n      'b_%_thumb1',\n      // XRHand.THUMB_METACARPAL,\n      'b_%_thumb2',\n      // XRHand.THUMB_PHALANX_PROXIMAL,\n      'b_%_thumb3',\n      // XRHand.THUMB_PHALANX_DISTAL,\n      'b_%_thumb_null',\n      // XRHand.THUMB_PHALANX_TIP,\n      null,\n      //'b_%_index1', // XRHand.INDEX_METACARPAL,\n      'b_%_index1',\n      // XRHand.INDEX_PHALANX_PROXIMAL,\n      'b_%_index2',\n      // XRHand.INDEX_PHALANX_INTERMEDIATE,\n      'b_%_index3',\n      // XRHand.INDEX_PHALANX_DISTAL,\n      'b_%_index_null',\n      // XRHand.INDEX_PHALANX_TIP,\n      null,\n      //'b_%_middle1', // XRHand.MIDDLE_METACARPAL,\n      'b_%_middle1',\n      // XRHand.MIDDLE_PHALANX_PROXIMAL,\n      'b_%_middle2',\n      // XRHand.MIDDLE_PHALANX_INTERMEDIATE,\n      'b_%_middle3',\n      // XRHand.MIDDLE_PHALANX_DISTAL,\n      'b_%_middlenull',\n      // XRHand.MIDDLE_PHALANX_TIP,\n      null,\n      //'b_%_ring1', // XRHand.RING_METACARPAL,\n      'b_%_ring1',\n      // XRHand.RING_PHALANX_PROXIMAL,\n      'b_%_ring2',\n      // XRHand.RING_PHALANX_INTERMEDIATE,\n      'b_%_ring3',\n      // XRHand.RING_PHALANX_DISTAL,\n      'b_%_ring_inull',\n      // XRHand.RING_PHALANX_TIP,\n      'b_%_pinky0',\n      // XRHand.LITTLE_METACARPAL,\n      'b_%_pinky1',\n      // XRHand.LITTLE_PHALANX_PROXIMAL,\n      'b_%_pinky2',\n      // XRHand.LITTLE_PHALANX_INTERMEDIATE,\n      'b_%_pinky3',\n      // XRHand.LITTLE_PHALANX_DISTAL,\n      'b_%_pinkynull' // XRHand.LITTLE_PHALANX_TIP\n      ];\n\n      var joints = ['wrist', 'thumb-metacarpal', 'thumb-phalanx-proximal', 'thumb-phalanx-distal', 'thumb-tip', 'index-finger-metacarpal', 'index-finger-phalanx-proximal', 'index-finger-phalanx-intermediate', 'index-finger-phalanx-distal', 'index-finger-tip', 'middle-finger-metacarpal', 'middle-finger-phalanx-proximal', 'middle-finger-phalanx-intermediate', 'middle-finger-phalanx-distal', 'middle-finger-tip', 'ring-finger-metacarpal', 'ring-finger-phalanx-proximal', 'ring-finger-phalanx-intermediate', 'ring-finger-phalanx-distal', 'ring-finger-tip', 'pinky-finger-metacarpal', 'pinky-finger-phalanx-proximal', 'pinky-finger-phalanx-intermediate', 'pinky-finger-phalanx-distal', 'pinky-finger-tip'];\n      var i = 0;\n      bonesMapping.forEach(function (boneName) {\n        if (boneName) {\n          var bone = object.getObjectByName(boneName.replace(/%/g, handedness === 'right' ? 'r' : 'l'));\n          if (bone !== undefined) {\n            bone.jointName = joints[i];\n          }\n          _this.bones.push(bone);\n        } else {\n          _this.bones.push(null);\n        }\n        i++;\n      });\n    });\n  }\n  _createClass(XRHandOculusMeshModel, [{\n    key: \"updateMesh\",\n    value: function updateMesh() {\n      // XR Joints\n      var XRJoints = this.controller.joints;\n      for (var i = 0; i < this.bones.length; i++) {\n        var bone = this.bones[i];\n        if (bone) {\n          var XRJoint = XRJoints[bone.jointName];\n          if (XRJoint.visible) {\n            var position = XRJoint.position;\n            if (bone) {\n              bone.position.copy(position.clone().multiplyScalar(100));\n              bone.quaternion.copy(XRJoint.quaternion); // bone.scale.setScalar( XRJoint.jointRadius || defaultRadius );\n            }\n          }\n        }\n      }\n    }\n  }]);\n  return XRHandOculusMeshModel;\n}();\nexport { XRHandOculusMeshModel };","map":null,"metadata":{},"sourceType":"module"}