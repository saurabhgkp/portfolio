{"ast":null,"code":"import { TempNode } from './TempNode.js';\nfunction FunctionCallNode(func, inputs) {\n  TempNode.call(this);\n  this.setFunction(func, inputs);\n}\nFunctionCallNode.prototype = Object.create(TempNode.prototype);\nFunctionCallNode.prototype.constructor = FunctionCallNode;\nFunctionCallNode.prototype.nodeType = 'FunctionCall';\nFunctionCallNode.prototype.setFunction = function (func, inputs) {\n  this.value = func;\n  this.inputs = inputs || [];\n};\nFunctionCallNode.prototype.getFunction = function () {\n  return this.value;\n};\nFunctionCallNode.prototype.getType = function (builder) {\n  return this.value.getType(builder);\n};\nFunctionCallNode.prototype.generate = function (builder, output) {\n  var type = this.getType(builder),\n    func = this.value;\n  var code = func.build(builder, output) + '( ',\n    params = [];\n  for (var i = 0; i < func.inputs.length; i++) {\n    var inpt = func.inputs[i],\n      param = this.inputs[i] || this.inputs[inpt.name];\n    params.push(param.build(builder, builder.getTypeByFormat(inpt.type)));\n  }\n  code += params.join(', ') + ' )';\n  return builder.format(code, type, output);\n};\nFunctionCallNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  for (var prop in source.inputs) {\n    this.inputs[prop] = source.inputs[prop];\n  }\n  this.value = source.value;\n  return this;\n};\nFunctionCallNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    var func = this.value;\n    data = this.createJSONNode(meta);\n    data.value = this.value.toJSON(meta).uuid;\n    if (func.inputs.length) {\n      data.inputs = {};\n      for (var i = 0; i < func.inputs.length; i++) {\n        var inpt = func.inputs[i],\n          node = this.inputs[i] || this.inputs[inpt.name];\n        data.inputs[inpt.name] = node.toJSON(meta).uuid;\n      }\n    }\n  }\n  return data;\n};\nexport { FunctionCallNode };","map":null,"metadata":{},"sourceType":"module"}