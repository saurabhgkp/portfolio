{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defineNameProp = exports.functionName = exports.classNameFromInstance = void 0;\nvar utils_1 = require(\"@chevrotain/utils\");\nfunction classNameFromInstance(instance) {\n  return functionName(instance.constructor);\n}\nexports.classNameFromInstance = classNameFromInstance;\nvar NAME = \"name\";\n/**\n * Utility to obtain Function names.\n * Note that there should not be an assumptions on the result of this function.\n * E.g: When running from minified source code the result may be auto generated.\n */\nfunction functionName(func) {\n  // Engines that support Function.prototype.name OR the nth (n>1) time after\n  // the name has been computed in the following else block.\n  var existingNameProp = func.name;\n  /* istanbul ignore else - too many hacks for IE/old versions of node.js here*/\n  if (existingNameProp) {\n    return existingNameProp;\n  } else {\n    return \"anonymous\";\n  }\n}\nexports.functionName = functionName;\n/**\n * @returns {boolean} - has the property been successfully defined\n */\nfunction defineNameProp(obj, nameValue) {\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(obj, NAME);\n  /* istanbul ignore else -> will only run in old versions of node.js */\n  if (utils_1.isUndefined(namePropDescriptor) || namePropDescriptor.configurable) {\n    Object.defineProperty(obj, NAME, {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: nameValue\n    });\n    return true;\n  }\n  /* istanbul ignore next -> will only run in old versions of node.js */\n  return false;\n}\nexports.defineNameProp = defineNameProp;","map":null,"metadata":{},"sourceType":"script"}