{"ast":null,"code":"import { UniformsUtils, ShaderMaterial } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { HalftoneShader } from '../shaders/HalftoneShader.js';\n\n/**\n * RGB Halftone pass for three.js effects composer. Requires HalftoneShader.\n */\n\nvar HalftonePass = function HalftonePass(width, height, params) {\n  if (HalftoneShader === undefined) {\n    console.error('THREE.HalftonePass requires HalftoneShader');\n  }\n  this.uniforms = UniformsUtils.clone(HalftoneShader.uniforms);\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    fragmentShader: HalftoneShader.fragmentShader,\n    vertexShader: HalftoneShader.vertexShader\n  }); // set params\n\n  this.uniforms.width.value = width;\n  this.uniforms.height.value = height;\n  for (var key in params) {\n    if (params.hasOwnProperty(key) && this.uniforms.hasOwnProperty(key)) {\n      this.uniforms[key].value = params[key];\n    }\n  }\n  this.fsQuad = new FullScreenQuad(this.material);\n};\nHalftonePass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: HalftonePass,\n  render: function render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive*/) {\n    this.material.uniforms['tDiffuse'].value = readBuffer.texture;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  },\n  setSize: function setSize(width, height) {\n    this.uniforms.width.value = width;\n    this.uniforms.height.value = height;\n  }\n});\nexport { HalftonePass };","map":null,"metadata":{},"sourceType":"module"}