{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\nimport { InputNode } from '../core/InputNode.js';\nimport { PositionNode } from '../accessors/PositionNode.js';\nimport { OperatorNode } from '../math/OperatorNode.js';\nimport { TextureNode } from './TextureNode.js';\nimport { Matrix4Node } from './Matrix4Node.js';\nfunction ReflectorNode(mirror) {\n  TempNode.call(this, 'v4');\n  if (mirror) this.setMirror(mirror);\n}\nReflectorNode.prototype = Object.create(TempNode.prototype);\nReflectorNode.prototype.constructor = ReflectorNode;\nReflectorNode.prototype.nodeType = 'Reflector';\nReflectorNode.prototype.setMirror = function (mirror) {\n  this.mirror = mirror;\n  this.textureMatrix = new Matrix4Node(this.mirror.material.uniforms.textureMatrix.value);\n  this.localPosition = new PositionNode(PositionNode.LOCAL);\n  this.uv = new OperatorNode(this.textureMatrix, this.localPosition, OperatorNode.MUL);\n  this.uvResult = new OperatorNode(null, this.uv, OperatorNode.ADD);\n  this.texture = new TextureNode(this.mirror.material.uniforms.tDiffuse.value, this.uv, null, true);\n};\nReflectorNode.prototype.generate = function (builder, output) {\n  if (builder.isShader('fragment')) {\n    this.uvResult.a = this.offset;\n    this.texture.uv = this.offset ? this.uvResult : this.uv;\n    if (output === 'sampler2D') {\n      return this.texture.build(builder, output);\n    }\n    return builder.format(this.texture.build(builder, this.type), this.type, output);\n  } else {\n    console.warn('THREE.ReflectorNode is not compatible with ' + builder.shader + ' shader.');\n    return builder.format('vec4( 0.0 )', this.type, output);\n  }\n};\nReflectorNode.prototype.copy = function (source) {\n  InputNode.prototype.copy.call(this, source);\n  this.scope.mirror = source.mirror;\n  return this;\n};\nReflectorNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.mirror = this.mirror.uuid;\n    if (this.offset) data.offset = this.offset.toJSON(meta).uuid;\n  }\n  return data;\n};\nexport { ReflectorNode };","map":null,"metadata":{},"sourceType":"module"}