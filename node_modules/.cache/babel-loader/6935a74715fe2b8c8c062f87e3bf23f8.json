{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\nimport { FloatNode } from '../inputs/FloatNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { NormalNode } from '../accessors/NormalNode.js';\nimport { PositionNode } from '../accessors/PositionNode.js';\nfunction BumpMapNode(value, scale) {\n  TempNode.call(this, 'v3');\n  this.value = value;\n  this.scale = scale || new FloatNode(1);\n  this.toNormalMap = false;\n}\nBumpMapNode.Nodes = function () {\n  var dHdxy_fwd = new FunctionNode([\n  // Bump Mapping Unparametrized Surfaces on the GPU by Morten S. Mikkelsen\n  // http://api.unrealengine.com/attachments/Engine/Rendering/LightingAndShadows/BumpMappingWithoutTangentSpace/mm_sfgrad_bump.pdf\n  // Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n  'vec2 dHdxy_fwd( sampler2D bumpMap, vec2 vUv, float bumpScale ) {',\n  // Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\n  '\tvec2 dSTdx = dFdx( vUv );', '\tvec2 dSTdy = dFdy( vUv );', '\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;', '\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;', '\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;', '\treturn vec2( dBx, dBy );', '}'].join('\\n'), null, {\n    derivatives: true\n  });\n  var perturbNormalArb = new FunctionNode(['vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {',\n  // Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\n  '\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );', '\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );', '\tvec3 vN = surf_norm;',\n  // normalized\n  '\tvec3 R1 = cross( vSigmaY, vN );', '\tvec3 R2 = cross( vN, vSigmaX );', '\tfloat fDet = dot( vSigmaX, R1 );', '\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );', '\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );', '\treturn normalize( abs( fDet ) * surf_norm - vGrad );', '}'].join('\\n'), [dHdxy_fwd], {\n    derivatives: true\n  });\n  var bumpToNormal = new FunctionNode(['vec3 bumpToNormal( sampler2D bumpMap, vec2 uv, float scale ) {', '\tvec2 dSTdx = dFdx( uv );', '\tvec2 dSTdy = dFdy( uv );', '\tfloat Hll = texture2D( bumpMap, uv ).x;', '\tfloat dBx = texture2D( bumpMap, uv + dSTdx ).x - Hll;', '\tfloat dBy = texture2D( bumpMap, uv + dSTdy ).x - Hll;', '\treturn vec3( .5 - ( dBx * scale ), .5 - ( dBy * scale ), 1.0 );', '}'].join('\\n'), null, {\n    derivatives: true\n  });\n  return {\n    dHdxy_fwd: dHdxy_fwd,\n    perturbNormalArb: perturbNormalArb,\n    bumpToNormal: bumpToNormal\n  };\n}();\nBumpMapNode.prototype = Object.create(TempNode.prototype);\nBumpMapNode.prototype.constructor = BumpMapNode;\nBumpMapNode.prototype.nodeType = 'BumpMap';\nBumpMapNode.prototype.hashProperties = ['toNormalMap'];\nBumpMapNode.prototype.generate = function (builder, output) {\n  if (builder.isShader('fragment')) {\n    if (this.toNormalMap) {\n      var bumpToNormal = builder.include(BumpMapNode.Nodes.bumpToNormal);\n      return builder.format(bumpToNormal + '( ' + this.value.build(builder, 'sampler2D') + ', ' + this.value.uv.build(builder, 'v2') + ', ' + this.scale.build(builder, 'f') + ' )', this.getType(builder), output);\n    } else {\n      var derivativeHeight = builder.include(BumpMapNode.Nodes.dHdxy_fwd),\n        perturbNormalArb = builder.include(BumpMapNode.Nodes.perturbNormalArb);\n      this.normal = this.normal || new NormalNode();\n      this.position = this.position || new PositionNode(PositionNode.VIEW);\n      var derivativeHeightCode = derivativeHeight + '( ' + this.value.build(builder, 'sampler2D') + ', ' + this.value.uv.build(builder, 'v2') + ', ' + this.scale.build(builder, 'f') + ' )';\n      return builder.format(perturbNormalArb + '( -' + this.position.build(builder, 'v3') + ', ' + this.normal.build(builder, 'v3') + ', ' + derivativeHeightCode + ' )', this.getType(builder), output);\n    }\n  } else {\n    console.warn('THREE.BumpMapNode is not compatible with ' + builder.shader + ' shader.');\n    return builder.format('vec3( 0.0 )', this.getType(builder), output);\n  }\n};\nBumpMapNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.value = source.value;\n  this.scale = source.scale;\n  return this;\n};\nBumpMapNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.value = this.value.toJSON(meta).uuid;\n    data.scale = this.scale.toJSON(meta).uuid;\n  }\n  return data;\n};\nexport { BumpMapNode };","map":null,"metadata":{},"sourceType":"module"}