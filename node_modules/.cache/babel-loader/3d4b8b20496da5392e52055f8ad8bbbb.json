{"ast":null,"code":"import _classCallCheck from \"/home/cliffexpc63/my example/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/cliffexpc63/my example/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/cliffexpc63/my example/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/cliffexpc63/my example/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, LoaderUtils, FileLoader, Vector3, Quaternion, Matrix4, MeshBasicMaterial, Scene, TextureLoader, Euler, MathUtils, AnimationClip, VectorKeyframeTrack, QuaternionKeyframeTrack, MeshLambertMaterial, MeshPhongMaterial, DoubleSide, PerspectiveCamera, OrthographicCamera, Color, AmbientLight, SpotLight, PointLight, DirectionalLight, BufferGeometry, Float32BufferAttribute, Skeleton, Bone, Group, LineBasicMaterial, SkinnedMesh, Mesh, Line, LineSegments, RepeatWrapping, ClampToEdgeWrapping } from 'three';\nimport { TGALoader } from './TGALoader.js';\n\nvar ColladaLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(ColladaLoader, _Loader);\n\n  var _super = _createSuper(ColladaLoader);\n\n  function ColladaLoader(manager) {\n    _classCallCheck(this, ColladaLoader);\n\n    return _super.call(this, manager);\n  }\n\n  _createClass(ColladaLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(text, path) {\n      function getElementsByTagName(xml, name) {\n        // Non recursive xml.getElementsByTagName() ...\n        var array = [];\n        var childNodes = xml.childNodes;\n\n        for (var i = 0, l = childNodes.length; i < l; i++) {\n          var child = childNodes[i];\n\n          if (child.nodeName === name) {\n            array.push(child);\n          }\n        }\n\n        return array;\n      }\n\n      function parseStrings(text) {\n        if (text.length === 0) return [];\n        var parts = text.trim().split(/\\s+/);\n        var array = new Array(parts.length);\n\n        for (var i = 0, l = parts.length; i < l; i++) {\n          array[i] = parts[i];\n        }\n\n        return array;\n      }\n\n      function parseFloats(text) {\n        if (text.length === 0) return [];\n        var parts = text.trim().split(/\\s+/);\n        var array = new Array(parts.length);\n\n        for (var i = 0, l = parts.length; i < l; i++) {\n          array[i] = parseFloat(parts[i]);\n        }\n\n        return array;\n      }\n\n      function parseInts(text) {\n        if (text.length === 0) return [];\n        var parts = text.trim().split(/\\s+/);\n        var array = new Array(parts.length);\n\n        for (var i = 0, l = parts.length; i < l; i++) {\n          array[i] = parseInt(parts[i]);\n        }\n\n        return array;\n      }\n\n      function parseId(text) {\n        return text.substring(1);\n      }\n\n      function generateId() {\n        return 'three_default_' + count++;\n      }\n\n      function isEmpty(object) {\n        return Object.keys(object).length === 0;\n      } // asset\n\n\n      function parseAsset(xml) {\n        return {\n          unit: parseAssetUnit(getElementsByTagName(xml, 'unit')[0]),\n          upAxis: parseAssetUpAxis(getElementsByTagName(xml, 'up_axis')[0])\n        };\n      }\n\n      function parseAssetUnit(xml) {\n        if (xml !== undefined && xml.hasAttribute('meter') === true) {\n          return parseFloat(xml.getAttribute('meter'));\n        } else {\n          return 1; // default 1 meter\n        }\n      }\n\n      function parseAssetUpAxis(xml) {\n        return xml !== undefined ? xml.textContent : 'Y_UP';\n      } // library\n\n\n      function parseLibrary(xml, libraryName, nodeName, parser) {\n        var library = getElementsByTagName(xml, libraryName)[0];\n\n        if (library !== undefined) {\n          var elements = getElementsByTagName(library, nodeName);\n\n          for (var i = 0; i < elements.length; i++) {\n            parser(elements[i]);\n          }\n        }\n      }\n\n      function buildLibrary(data, builder) {\n        for (var name in data) {\n          var object = data[name];\n          object.build = builder(data[name]);\n        }\n      } // get\n\n\n      function getBuild(data, builder) {\n        if (data.build !== undefined) return data.build;\n        data.build = builder(data);\n        return data.build;\n      } // animation\n\n\n      function parseAnimation(xml) {\n        var data = {\n          sources: {},\n          samplers: {},\n          channels: {}\n        };\n        var hasChildren = false;\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n          var id = void 0;\n\n          switch (child.nodeName) {\n            case 'source':\n              id = child.getAttribute('id');\n              data.sources[id] = parseSource(child);\n              break;\n\n            case 'sampler':\n              id = child.getAttribute('id');\n              data.samplers[id] = parseAnimationSampler(child);\n              break;\n\n            case 'channel':\n              id = child.getAttribute('target');\n              data.channels[id] = parseAnimationChannel(child);\n              break;\n\n            case 'animation':\n              // hierarchy of related animations\n              parseAnimation(child);\n              hasChildren = true;\n              break;\n\n            default:\n              console.log(child);\n          }\n        }\n\n        if (hasChildren === false) {\n          // since 'id' attributes can be optional, it's necessary to generate a UUID for unqiue assignment\n          library.animations[xml.getAttribute('id') || MathUtils.generateUUID()] = data;\n        }\n      }\n\n      function parseAnimationSampler(xml) {\n        var data = {\n          inputs: {}\n        };\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'input':\n              var id = parseId(child.getAttribute('source'));\n              var semantic = child.getAttribute('semantic');\n              data.inputs[semantic] = id;\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseAnimationChannel(xml) {\n        var data = {};\n        var target = xml.getAttribute('target'); // parsing SID Addressing Syntax\n\n        var parts = target.split('/');\n        var id = parts.shift();\n        var sid = parts.shift(); // check selection syntax\n\n        var arraySyntax = sid.indexOf('(') !== -1;\n        var memberSyntax = sid.indexOf('.') !== -1;\n\n        if (memberSyntax) {\n          //  member selection access\n          parts = sid.split('.');\n          sid = parts.shift();\n          data.member = parts.shift();\n        } else if (arraySyntax) {\n          // array-access syntax. can be used to express fields in one-dimensional vectors or two-dimensional matrices.\n          var indices = sid.split('(');\n          sid = indices.shift();\n\n          for (var i = 0; i < indices.length; i++) {\n            indices[i] = parseInt(indices[i].replace(/\\)/, ''));\n          }\n\n          data.indices = indices;\n        }\n\n        data.id = id;\n        data.sid = sid;\n        data.arraySyntax = arraySyntax;\n        data.memberSyntax = memberSyntax;\n        data.sampler = parseId(xml.getAttribute('source'));\n        return data;\n      }\n\n      function buildAnimation(data) {\n        var tracks = [];\n        var channels = data.channels;\n        var samplers = data.samplers;\n        var sources = data.sources;\n\n        for (var target in channels) {\n          if (channels.hasOwnProperty(target)) {\n            var channel = channels[target];\n            var sampler = samplers[channel.sampler];\n            var inputId = sampler.inputs.INPUT;\n            var outputId = sampler.inputs.OUTPUT;\n            var inputSource = sources[inputId];\n            var outputSource = sources[outputId];\n            var animation = buildAnimationChannel(channel, inputSource, outputSource);\n            createKeyframeTracks(animation, tracks);\n          }\n        }\n\n        return tracks;\n      }\n\n      function getAnimation(id) {\n        return getBuild(library.animations[id], buildAnimation);\n      }\n\n      function buildAnimationChannel(channel, inputSource, outputSource) {\n        var node = library.nodes[channel.id];\n        var object3D = getNode(node.id);\n        var transform = node.transforms[channel.sid];\n        var defaultMatrix = node.matrix.clone().transpose();\n        var time, stride;\n        var i, il, j, jl;\n        var data = {}; // the collada spec allows the animation of data in various ways.\n        // depending on the transform type (matrix, translate, rotate, scale), we execute different logic\n\n        switch (transform) {\n          case 'matrix':\n            for (i = 0, il = inputSource.array.length; i < il; i++) {\n              time = inputSource.array[i];\n              stride = i * outputSource.stride;\n              if (data[time] === undefined) data[time] = {};\n\n              if (channel.arraySyntax === true) {\n                var value = outputSource.array[stride];\n                var index = channel.indices[0] + 4 * channel.indices[1];\n                data[time][index] = value;\n              } else {\n                for (j = 0, jl = outputSource.stride; j < jl; j++) {\n                  data[time][j] = outputSource.array[stride + j];\n                }\n              }\n            }\n\n            break;\n\n          case 'translate':\n            console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n            break;\n\n          case 'rotate':\n            console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n            break;\n\n          case 'scale':\n            console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n            break;\n        }\n\n        var keyframes = prepareAnimationData(data, defaultMatrix);\n        var animation = {\n          name: object3D.uuid,\n          keyframes: keyframes\n        };\n        return animation;\n      }\n\n      function prepareAnimationData(data, defaultMatrix) {\n        var keyframes = []; // transfer data into a sortable array\n\n        for (var time in data) {\n          keyframes.push({\n            time: parseFloat(time),\n            value: data[time]\n          });\n        } // ensure keyframes are sorted by time\n\n\n        keyframes.sort(ascending); // now we clean up all animation data, so we can use them for keyframe tracks\n\n        for (var i = 0; i < 16; i++) {\n          transformAnimationData(keyframes, i, defaultMatrix.elements[i]);\n        }\n\n        return keyframes; // array sort function\n\n        function ascending(a, b) {\n          return a.time - b.time;\n        }\n      }\n\n      var position = new Vector3();\n      var scale = new Vector3();\n      var quaternion = new Quaternion();\n\n      function createKeyframeTracks(animation, tracks) {\n        var keyframes = animation.keyframes;\n        var name = animation.name;\n        var times = [];\n        var positionData = [];\n        var quaternionData = [];\n        var scaleData = [];\n\n        for (var i = 0, l = keyframes.length; i < l; i++) {\n          var keyframe = keyframes[i];\n          var time = keyframe.time;\n          var value = keyframe.value;\n          matrix.fromArray(value).transpose();\n          matrix.decompose(position, quaternion, scale);\n          times.push(time);\n          positionData.push(position.x, position.y, position.z);\n          quaternionData.push(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n          scaleData.push(scale.x, scale.y, scale.z);\n        }\n\n        if (positionData.length > 0) tracks.push(new VectorKeyframeTrack(name + '.position', times, positionData));\n\n        if (quaternionData.length > 0) {\n          tracks.push(new QuaternionKeyframeTrack(name + '.quaternion', times, quaternionData));\n        }\n\n        if (scaleData.length > 0) tracks.push(new VectorKeyframeTrack(name + '.scale', times, scaleData));\n        return tracks;\n      }\n\n      function transformAnimationData(keyframes, property, defaultValue) {\n        var keyframe;\n        var empty = true;\n        var i, l; // check, if values of a property are missing in our keyframes\n\n        for (i = 0, l = keyframes.length; i < l; i++) {\n          keyframe = keyframes[i];\n\n          if (keyframe.value[property] === undefined) {\n            keyframe.value[property] = null; // mark as missing\n          } else {\n            empty = false;\n          }\n        }\n\n        if (empty === true) {\n          // no values at all, so we set a default value\n          for (i = 0, l = keyframes.length; i < l; i++) {\n            keyframe = keyframes[i];\n            keyframe.value[property] = defaultValue;\n          }\n        } else {\n          // filling gaps\n          createMissingKeyframes(keyframes, property);\n        }\n      }\n\n      function createMissingKeyframes(keyframes, property) {\n        var prev, next;\n\n        for (var i = 0, l = keyframes.length; i < l; i++) {\n          var keyframe = keyframes[i];\n\n          if (keyframe.value[property] === null) {\n            prev = getPrev(keyframes, i, property);\n            next = getNext(keyframes, i, property);\n\n            if (prev === null) {\n              keyframe.value[property] = next.value[property];\n              continue;\n            }\n\n            if (next === null) {\n              keyframe.value[property] = prev.value[property];\n              continue;\n            }\n\n            interpolate(keyframe, prev, next, property);\n          }\n        }\n      }\n\n      function getPrev(keyframes, i, property) {\n        while (i >= 0) {\n          var keyframe = keyframes[i];\n          if (keyframe.value[property] !== null) return keyframe;\n          i--;\n        }\n\n        return null;\n      }\n\n      function getNext(keyframes, i, property) {\n        while (i < keyframes.length) {\n          var keyframe = keyframes[i];\n          if (keyframe.value[property] !== null) return keyframe;\n          i++;\n        }\n\n        return null;\n      }\n\n      function interpolate(key, prev, next, property) {\n        if (next.time - prev.time === 0) {\n          key.value[property] = prev.value[property];\n          return;\n        }\n\n        key.value[property] = (key.time - prev.time) * (next.value[property] - prev.value[property]) / (next.time - prev.time) + prev.value[property];\n      } // animation clips\n\n\n      function parseAnimationClip(xml) {\n        var data = {\n          name: xml.getAttribute('id') || 'default',\n          start: parseFloat(xml.getAttribute('start') || 0),\n          end: parseFloat(xml.getAttribute('end') || 0),\n          animations: []\n        };\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'instance_animation':\n              data.animations.push(parseId(child.getAttribute('url')));\n              break;\n          }\n        }\n\n        library.clips[xml.getAttribute('id')] = data;\n      }\n\n      function buildAnimationClip(data) {\n        var tracks = [];\n        var name = data.name;\n        var duration = data.end - data.start || -1;\n        var animations = data.animations;\n\n        for (var i = 0, il = animations.length; i < il; i++) {\n          var animationTracks = getAnimation(animations[i]);\n\n          for (var j = 0, jl = animationTracks.length; j < jl; j++) {\n            tracks.push(animationTracks[j]);\n          }\n        }\n\n        return new AnimationClip(name, duration, tracks);\n      }\n\n      function getAnimationClip(id) {\n        return getBuild(library.clips[id], buildAnimationClip);\n      } // controller\n\n\n      function parseController(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'skin':\n              // there is exactly one skin per controller\n              data.id = parseId(child.getAttribute('source'));\n              data.skin = parseSkin(child);\n              break;\n\n            case 'morph':\n              data.id = parseId(child.getAttribute('source'));\n              console.warn('THREE.ColladaLoader: Morph target animation not supported yet.');\n              break;\n          }\n        }\n\n        library.controllers[xml.getAttribute('id')] = data;\n      }\n\n      function parseSkin(xml) {\n        var data = {\n          sources: {}\n        };\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'bind_shape_matrix':\n              data.bindShapeMatrix = parseFloats(child.textContent);\n              break;\n\n            case 'source':\n              var id = child.getAttribute('id');\n              data.sources[id] = parseSource(child);\n              break;\n\n            case 'joints':\n              data.joints = parseJoints(child);\n              break;\n\n            case 'vertex_weights':\n              data.vertexWeights = parseVertexWeights(child);\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseJoints(xml) {\n        var data = {\n          inputs: {}\n        };\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'input':\n              var semantic = child.getAttribute('semantic');\n              var id = parseId(child.getAttribute('source'));\n              data.inputs[semantic] = id;\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseVertexWeights(xml) {\n        var data = {\n          inputs: {}\n        };\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'input':\n              var semantic = child.getAttribute('semantic');\n              var id = parseId(child.getAttribute('source'));\n              var offset = parseInt(child.getAttribute('offset'));\n              data.inputs[semantic] = {\n                id: id,\n                offset: offset\n              };\n              break;\n\n            case 'vcount':\n              data.vcount = parseInts(child.textContent);\n              break;\n\n            case 'v':\n              data.v = parseInts(child.textContent);\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function buildController(data) {\n        var build = {\n          id: data.id\n        };\n        var geometry = library.geometries[build.id];\n\n        if (data.skin !== undefined) {\n          build.skin = buildSkin(data.skin); // we enhance the 'sources' property of the corresponding geometry with our skin data\n\n          geometry.sources.skinIndices = build.skin.indices;\n          geometry.sources.skinWeights = build.skin.weights;\n        }\n\n        return build;\n      }\n\n      function buildSkin(data) {\n        var BONE_LIMIT = 4;\n        var build = {\n          joints: [],\n          // this must be an array to preserve the joint order\n          indices: {\n            array: [],\n            stride: BONE_LIMIT\n          },\n          weights: {\n            array: [],\n            stride: BONE_LIMIT\n          }\n        };\n        var sources = data.sources;\n        var vertexWeights = data.vertexWeights;\n        var vcount = vertexWeights.vcount;\n        var v = vertexWeights.v;\n        var jointOffset = vertexWeights.inputs.JOINT.offset;\n        var weightOffset = vertexWeights.inputs.WEIGHT.offset;\n        var jointSource = data.sources[data.joints.inputs.JOINT];\n        var inverseSource = data.sources[data.joints.inputs.INV_BIND_MATRIX];\n        var weights = sources[vertexWeights.inputs.WEIGHT.id].array;\n        var stride = 0;\n        var i, j, l; // procces skin data for each vertex\n\n        for (i = 0, l = vcount.length; i < l; i++) {\n          var jointCount = vcount[i]; // this is the amount of joints that affect a single vertex\n\n          var vertexSkinData = [];\n\n          for (j = 0; j < jointCount; j++) {\n            var skinIndex = v[stride + jointOffset];\n            var weightId = v[stride + weightOffset];\n            var skinWeight = weights[weightId];\n            vertexSkinData.push({\n              index: skinIndex,\n              weight: skinWeight\n            });\n            stride += 2;\n          } // we sort the joints in descending order based on the weights.\n          // this ensures, we only procced the most important joints of the vertex\n\n\n          vertexSkinData.sort(descending); // now we provide for each vertex a set of four index and weight values.\n          // the order of the skin data matches the order of vertices\n\n          for (j = 0; j < BONE_LIMIT; j++) {\n            var d = vertexSkinData[j];\n\n            if (d !== undefined) {\n              build.indices.array.push(d.index);\n              build.weights.array.push(d.weight);\n            } else {\n              build.indices.array.push(0);\n              build.weights.array.push(0);\n            }\n          }\n        } // setup bind matrix\n\n\n        if (data.bindShapeMatrix) {\n          build.bindMatrix = new Matrix4().fromArray(data.bindShapeMatrix).transpose();\n        } else {\n          build.bindMatrix = new Matrix4().identity();\n        } // process bones and inverse bind matrix data\n\n\n        for (i = 0, l = jointSource.array.length; i < l; i++) {\n          var name = jointSource.array[i];\n          var boneInverse = new Matrix4().fromArray(inverseSource.array, i * inverseSource.stride).transpose();\n          build.joints.push({\n            name: name,\n            boneInverse: boneInverse\n          });\n        }\n\n        return build; // array sort function\n\n        function descending(a, b) {\n          return b.weight - a.weight;\n        }\n      }\n\n      function getController(id) {\n        return getBuild(library.controllers[id], buildController);\n      } // image\n\n\n      function parseImage(xml) {\n        var data = {\n          init_from: getElementsByTagName(xml, 'init_from')[0].textContent\n        };\n        library.images[xml.getAttribute('id')] = data;\n      }\n\n      function buildImage(data) {\n        if (data.build !== undefined) return data.build;\n        return data.init_from;\n      }\n\n      function getImage(id) {\n        var data = library.images[id];\n\n        if (data !== undefined) {\n          return getBuild(data, buildImage);\n        }\n\n        console.warn(\"THREE.ColladaLoader: Couldn't find image with ID:\", id);\n        return null;\n      } // effect\n\n\n      function parseEffect(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'profile_COMMON':\n              data.profile = parseEffectProfileCOMMON(child);\n              break;\n          }\n        }\n\n        library.effects[xml.getAttribute('id')] = data;\n      }\n\n      function parseEffectProfileCOMMON(xml) {\n        var data = {\n          surfaces: {},\n          samplers: {}\n        };\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'newparam':\n              parseEffectNewparam(child, data);\n              break;\n\n            case 'technique':\n              data.technique = parseEffectTechnique(child);\n              break;\n\n            case 'extra':\n              data.extra = parseEffectExtra(child);\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseEffectNewparam(xml, data) {\n        var sid = xml.getAttribute('sid');\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'surface':\n              data.surfaces[sid] = parseEffectSurface(child);\n              break;\n\n            case 'sampler2D':\n              data.samplers[sid] = parseEffectSampler(child);\n              break;\n          }\n        }\n      }\n\n      function parseEffectSurface(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'init_from':\n              data.init_from = child.textContent;\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseEffectSampler(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'source':\n              data.source = child.textContent;\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseEffectTechnique(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'constant':\n            case 'lambert':\n            case 'blinn':\n            case 'phong':\n              data.type = child.nodeName;\n              data.parameters = parseEffectParameters(child);\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseEffectParameters(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'emission':\n            case 'diffuse':\n            case 'specular':\n            case 'bump':\n            case 'ambient':\n            case 'shininess':\n            case 'transparency':\n              data[child.nodeName] = parseEffectParameter(child);\n              break;\n\n            case 'transparent':\n              data[child.nodeName] = {\n                opaque: child.getAttribute('opaque'),\n                data: parseEffectParameter(child)\n              };\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseEffectParameter(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'color':\n              data[child.nodeName] = parseFloats(child.textContent);\n              break;\n\n            case 'float':\n              data[child.nodeName] = parseFloat(child.textContent);\n              break;\n\n            case 'texture':\n              data[child.nodeName] = {\n                id: child.getAttribute('texture'),\n                extra: parseEffectParameterTexture(child)\n              };\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseEffectParameterTexture(xml) {\n        var data = {\n          technique: {}\n        };\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'extra':\n              parseEffectParameterTextureExtra(child, data);\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseEffectParameterTextureExtra(xml, data) {\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'technique':\n              parseEffectParameterTextureExtraTechnique(child, data);\n              break;\n          }\n        }\n      }\n\n      function parseEffectParameterTextureExtraTechnique(xml, data) {\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'repeatU':\n            case 'repeatV':\n            case 'offsetU':\n            case 'offsetV':\n              data.technique[child.nodeName] = parseFloat(child.textContent);\n              break;\n\n            case 'wrapU':\n            case 'wrapV':\n              // some files have values for wrapU/wrapV which become NaN via parseInt\n              if (child.textContent.toUpperCase() === 'TRUE') {\n                data.technique[child.nodeName] = 1;\n              } else if (child.textContent.toUpperCase() === 'FALSE') {\n                data.technique[child.nodeName] = 0;\n              } else {\n                data.technique[child.nodeName] = parseInt(child.textContent);\n              }\n\n              break;\n          }\n        }\n      }\n\n      function parseEffectExtra(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'technique':\n              data.technique = parseEffectExtraTechnique(child);\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseEffectExtraTechnique(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'double_sided':\n              data[child.nodeName] = parseInt(child.textContent);\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function buildEffect(data) {\n        return data;\n      }\n\n      function getEffect(id) {\n        return getBuild(library.effects[id], buildEffect);\n      } // material\n\n\n      function parseMaterial(xml) {\n        var data = {\n          name: xml.getAttribute('name')\n        };\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'instance_effect':\n              data.url = parseId(child.getAttribute('url'));\n              break;\n          }\n        }\n\n        library.materials[xml.getAttribute('id')] = data;\n      }\n\n      function getTextureLoader(image) {\n        var loader;\n        var extension = image.slice((image.lastIndexOf('.') - 1 >>> 0) + 2); // http://www.jstips.co/en/javascript/get-file-extension/\n\n        extension = extension.toLowerCase();\n\n        switch (extension) {\n          case 'tga':\n            loader = tgaLoader;\n            break;\n\n          default:\n            loader = textureLoader;\n        }\n\n        return loader;\n      }\n\n      function buildMaterial(data) {\n        var effect = getEffect(data.url);\n        var technique = effect.profile.technique;\n        var extra = effect.profile.extra;\n        var material;\n\n        switch (technique.type) {\n          case 'phong':\n          case 'blinn':\n            material = new MeshPhongMaterial();\n            break;\n\n          case 'lambert':\n            material = new MeshLambertMaterial();\n            break;\n\n          default:\n            material = new MeshBasicMaterial();\n            break;\n        }\n\n        material.name = data.name || '';\n\n        function getTexture(textureObject) {\n          var sampler = effect.profile.samplers[textureObject.id];\n          var image = null; // get image\n\n          if (sampler !== undefined) {\n            var surface = effect.profile.surfaces[sampler.source];\n            image = getImage(surface.init_from);\n          } else {\n            console.warn('THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).');\n            image = getImage(textureObject.id);\n          } // create texture if image is avaiable\n\n\n          if (image !== null) {\n            var loader = getTextureLoader(image);\n\n            if (loader !== undefined) {\n              var texture = loader.load(image);\n              var _extra = textureObject.extra;\n\n              if (_extra !== undefined && _extra.technique !== undefined && isEmpty(_extra.technique) === false) {\n                var _technique = _extra.technique;\n                texture.wrapS = _technique.wrapU ? RepeatWrapping : ClampToEdgeWrapping;\n                texture.wrapT = _technique.wrapV ? RepeatWrapping : ClampToEdgeWrapping;\n                texture.offset.set(_technique.offsetU || 0, _technique.offsetV || 0);\n                texture.repeat.set(_technique.repeatU || 1, _technique.repeatV || 1);\n              } else {\n                texture.wrapS = RepeatWrapping;\n                texture.wrapT = RepeatWrapping;\n              }\n\n              return texture;\n            } else {\n              console.warn('THREE.ColladaLoader: Loader for texture %s not found.', image);\n              return null;\n            }\n          } else {\n            console.warn(\"THREE.ColladaLoader: Couldn't create texture with ID:\", textureObject.id);\n            return null;\n          }\n        }\n\n        var parameters = technique.parameters;\n\n        for (var key in parameters) {\n          var parameter = parameters[key];\n\n          switch (key) {\n            case 'diffuse':\n              if (parameter.color) material.color.fromArray(parameter.color);\n              if (parameter.texture) material.map = getTexture(parameter.texture);\n              break;\n\n            case 'specular':\n              if (parameter.color && material.specular) material.specular.fromArray(parameter.color);\n              if (parameter.texture) material.specularMap = getTexture(parameter.texture);\n              break;\n\n            case 'bump':\n              if (parameter.texture) material.normalMap = getTexture(parameter.texture);\n              break;\n\n            case 'ambient':\n              if (parameter.texture) material.lightMap = getTexture(parameter.texture);\n              break;\n\n            case 'shininess':\n              if (parameter.float && material.shininess) material.shininess = parameter.float;\n              break;\n\n            case 'emission':\n              if (parameter.color && material.emissive) material.emissive.fromArray(parameter.color);\n              if (parameter.texture) material.emissiveMap = getTexture(parameter.texture);\n              break;\n          }\n        } //\n\n\n        var transparent = parameters['transparent'];\n        var transparency = parameters['transparency']; // <transparency> does not exist but <transparent>\n\n        if (transparency === undefined && transparent) {\n          transparency = {\n            float: 1\n          };\n        } // <transparent> does not exist but <transparency>\n\n\n        if (transparent === undefined && transparency) {\n          transparent = {\n            opaque: 'A_ONE',\n            data: {\n              color: [1, 1, 1, 1]\n            }\n          };\n        }\n\n        if (transparent && transparency) {\n          // handle case if a texture exists but no color\n          if (transparent.data.texture) {\n            // we do not set an alpha map (see #13792)\n            material.transparent = true;\n          } else {\n            var color = transparent.data.color;\n\n            switch (transparent.opaque) {\n              case 'A_ONE':\n                material.opacity = color[3] * transparency.float;\n                break;\n\n              case 'RGB_ZERO':\n                material.opacity = 1 - color[0] * transparency.float;\n                break;\n\n              case 'A_ZERO':\n                material.opacity = 1 - color[3] * transparency.float;\n                break;\n\n              case 'RGB_ONE':\n                material.opacity = color[0] * transparency.float;\n                break;\n\n              default:\n                console.warn('THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.', transparent.opaque);\n            }\n\n            if (material.opacity < 1) material.transparent = true;\n          }\n        } //\n\n\n        if (extra !== undefined && extra.technique !== undefined && extra.technique.double_sided === 1) {\n          material.side = DoubleSide;\n        }\n\n        return material;\n      }\n\n      function getMaterial(id) {\n        return getBuild(library.materials[id], buildMaterial);\n      } // camera\n\n\n      function parseCamera(xml) {\n        var data = {\n          name: xml.getAttribute('name')\n        };\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'optics':\n              data.optics = parseCameraOptics(child);\n              break;\n          }\n        }\n\n        library.cameras[xml.getAttribute('id')] = data;\n      }\n\n      function parseCameraOptics(xml) {\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n\n          switch (child.nodeName) {\n            case 'technique_common':\n              return parseCameraTechnique(child);\n          }\n        }\n\n        return {};\n      }\n\n      function parseCameraTechnique(xml) {\n        var data = {};\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n\n          switch (child.nodeName) {\n            case 'perspective':\n            case 'orthographic':\n              data.technique = child.nodeName;\n              data.parameters = parseCameraParameters(child);\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseCameraParameters(xml) {\n        var data = {};\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n\n          switch (child.nodeName) {\n            case 'xfov':\n            case 'yfov':\n            case 'xmag':\n            case 'ymag':\n            case 'znear':\n            case 'zfar':\n            case 'aspect_ratio':\n              data[child.nodeName] = parseFloat(child.textContent);\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function buildCamera(data) {\n        var camera;\n\n        switch (data.optics.technique) {\n          case 'perspective':\n            camera = new PerspectiveCamera(data.optics.parameters.yfov, data.optics.parameters.aspect_ratio, data.optics.parameters.znear, data.optics.parameters.zfar);\n            break;\n\n          case 'orthographic':\n            var ymag = data.optics.parameters.ymag;\n            var xmag = data.optics.parameters.xmag;\n            var aspectRatio = data.optics.parameters.aspect_ratio;\n            xmag = xmag === undefined ? ymag * aspectRatio : xmag;\n            ymag = ymag === undefined ? xmag / aspectRatio : ymag;\n            xmag *= 0.5;\n            ymag *= 0.5;\n            camera = new OrthographicCamera(-xmag, xmag, ymag, -ymag, // left, right, top, bottom\n            data.optics.parameters.znear, data.optics.parameters.zfar);\n            break;\n\n          default:\n            camera = new PerspectiveCamera();\n            break;\n        }\n\n        camera.name = data.name || '';\n        return camera;\n      }\n\n      function getCamera(id) {\n        var data = library.cameras[id];\n\n        if (data !== undefined) {\n          return getBuild(data, buildCamera);\n        }\n\n        console.warn(\"THREE.ColladaLoader: Couldn't find camera with ID:\", id);\n        return null;\n      } // light\n\n\n      function parseLight(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'technique_common':\n              data = parseLightTechnique(child);\n              break;\n          }\n        }\n\n        library.lights[xml.getAttribute('id')] = data;\n      }\n\n      function parseLightTechnique(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'directional':\n            case 'point':\n            case 'spot':\n            case 'ambient':\n              data.technique = child.nodeName;\n              data.parameters = parseLightParameters(child);\n          }\n        }\n\n        return data;\n      }\n\n      function parseLightParameters(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'color':\n              var array = parseFloats(child.textContent);\n              data.color = new Color().fromArray(array);\n              break;\n\n            case 'falloff_angle':\n              data.falloffAngle = parseFloat(child.textContent);\n              break;\n\n            case 'quadratic_attenuation':\n              var f = parseFloat(child.textContent);\n              data.distance = f ? Math.sqrt(1 / f) : 0;\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function buildLight(data) {\n        var light;\n\n        switch (data.technique) {\n          case 'directional':\n            light = new DirectionalLight();\n            break;\n\n          case 'point':\n            light = new PointLight();\n            break;\n\n          case 'spot':\n            light = new SpotLight();\n            break;\n\n          case 'ambient':\n            light = new AmbientLight();\n            break;\n        }\n\n        if (data.parameters.color) light.color.copy(data.parameters.color);\n        if (data.parameters.distance) light.distance = data.parameters.distance;\n        return light;\n      }\n\n      function getLight(id) {\n        var data = library.lights[id];\n\n        if (data !== undefined) {\n          return getBuild(data, buildLight);\n        }\n\n        console.warn(\"THREE.ColladaLoader: Couldn't find light with ID:\", id);\n        return null;\n      } // geometry\n\n\n      function parseGeometry(xml) {\n        var data = {\n          name: xml.getAttribute('name'),\n          sources: {},\n          vertices: {},\n          primitives: []\n        };\n        var mesh = getElementsByTagName(xml, 'mesh')[0]; // the following tags inside geometry are not supported yet (see https://github.com/mrdoob/three.js/pull/12606): convex_mesh, spline, brep\n\n        if (mesh === undefined) return;\n\n        for (var i = 0; i < mesh.childNodes.length; i++) {\n          var child = mesh.childNodes[i];\n          if (child.nodeType !== 1) continue;\n          var id = child.getAttribute('id');\n\n          switch (child.nodeName) {\n            case 'source':\n              data.sources[id] = parseSource(child);\n              break;\n\n            case 'vertices':\n              // data.sources[ id ] = data.sources[ parseId( getElementsByTagName( child, 'input' )[ 0 ].getAttribute( 'source' ) ) ];\n              data.vertices = parseGeometryVertices(child);\n              break;\n\n            case 'polygons':\n              console.warn('THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName);\n              break;\n\n            case 'lines':\n            case 'linestrips':\n            case 'polylist':\n            case 'triangles':\n              data.primitives.push(parseGeometryPrimitive(child));\n              break;\n\n            default:\n              console.log(child);\n          }\n        }\n\n        library.geometries[xml.getAttribute('id')] = data;\n      }\n\n      function parseSource(xml) {\n        var data = {\n          array: [],\n          stride: 3\n        };\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'float_array':\n              data.array = parseFloats(child.textContent);\n              break;\n\n            case 'Name_array':\n              data.array = parseStrings(child.textContent);\n              break;\n\n            case 'technique_common':\n              var accessor = getElementsByTagName(child, 'accessor')[0];\n\n              if (accessor !== undefined) {\n                data.stride = parseInt(accessor.getAttribute('stride'));\n              }\n\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseGeometryVertices(xml) {\n        var data = {};\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n          data[child.getAttribute('semantic')] = parseId(child.getAttribute('source'));\n        }\n\n        return data;\n      }\n\n      function parseGeometryPrimitive(xml) {\n        var primitive = {\n          type: xml.nodeName,\n          material: xml.getAttribute('material'),\n          count: parseInt(xml.getAttribute('count')),\n          inputs: {},\n          stride: 0,\n          hasUV: false\n        };\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'input':\n              var id = parseId(child.getAttribute('source'));\n              var semantic = child.getAttribute('semantic');\n              var offset = parseInt(child.getAttribute('offset'));\n              var set = parseInt(child.getAttribute('set'));\n              var inputname = set > 0 ? semantic + set : semantic;\n              primitive.inputs[inputname] = {\n                id: id,\n                offset: offset\n              };\n              primitive.stride = Math.max(primitive.stride, offset + 1);\n              if (semantic === 'TEXCOORD') primitive.hasUV = true;\n              break;\n\n            case 'vcount':\n              primitive.vcount = parseInts(child.textContent);\n              break;\n\n            case 'p':\n              primitive.p = parseInts(child.textContent);\n              break;\n          }\n        }\n\n        return primitive;\n      }\n\n      function groupPrimitives(primitives) {\n        var build = {};\n\n        for (var i = 0; i < primitives.length; i++) {\n          var primitive = primitives[i];\n          if (build[primitive.type] === undefined) build[primitive.type] = [];\n          build[primitive.type].push(primitive);\n        }\n\n        return build;\n      }\n\n      function checkUVCoordinates(primitives) {\n        var count = 0;\n\n        for (var i = 0, l = primitives.length; i < l; i++) {\n          var primitive = primitives[i];\n\n          if (primitive.hasUV === true) {\n            count++;\n          }\n        }\n\n        if (count > 0 && count < primitives.length) {\n          primitives.uvsNeedsFix = true;\n        }\n      }\n\n      function buildGeometry(data) {\n        var build = {};\n        var sources = data.sources;\n        var vertices = data.vertices;\n        var primitives = data.primitives;\n        if (primitives.length === 0) return {}; // our goal is to create one buffer geometry for a single type of primitives\n        // first, we group all primitives by their type\n\n        var groupedPrimitives = groupPrimitives(primitives);\n\n        for (var type in groupedPrimitives) {\n          var primitiveType = groupedPrimitives[type]; // second, ensure consistent uv coordinates for each type of primitives (polylist,triangles or lines)\n\n          checkUVCoordinates(primitiveType); // third, create a buffer geometry for each type of primitives\n\n          build[type] = buildGeometryType(primitiveType, sources, vertices);\n        }\n\n        return build;\n      }\n\n      function buildGeometryType(primitives, sources, vertices) {\n        var build = {};\n        var position = {\n          array: [],\n          stride: 0\n        };\n        var normal = {\n          array: [],\n          stride: 0\n        };\n        var uv = {\n          array: [],\n          stride: 0\n        };\n        var uv2 = {\n          array: [],\n          stride: 0\n        };\n        var color = {\n          array: [],\n          stride: 0\n        };\n        var skinIndex = {\n          array: [],\n          stride: 4\n        };\n        var skinWeight = {\n          array: [],\n          stride: 4\n        };\n        var geometry = new BufferGeometry();\n        var materialKeys = [];\n        var start = 0;\n\n        for (var p = 0; p < primitives.length; p++) {\n          var primitive = primitives[p];\n          var inputs = primitive.inputs; // groups\n\n          var _count = 0;\n\n          switch (primitive.type) {\n            case 'lines':\n            case 'linestrips':\n              _count = primitive.count * 2;\n              break;\n\n            case 'triangles':\n              _count = primitive.count * 3;\n              break;\n\n            case 'polylist':\n              for (var g = 0; g < primitive.count; g++) {\n                var vc = primitive.vcount[g];\n\n                switch (vc) {\n                  case 3:\n                    _count += 3; // single triangle\n\n                    break;\n\n                  case 4:\n                    _count += 6; // quad, subdivided into two triangles\n\n                    break;\n\n                  default:\n                    _count += (vc - 2) * 3; // polylist with more than four vertices\n\n                    break;\n                }\n              }\n\n              break;\n\n            default:\n              console.warn('THREE.ColladaLoader: Unknow primitive type:', primitive.type);\n          }\n\n          geometry.addGroup(start, _count, p);\n          start += _count; // material\n\n          if (primitive.material) {\n            materialKeys.push(primitive.material);\n          } // geometry data\n\n\n          for (var name in inputs) {\n            var input = inputs[name];\n\n            switch (name) {\n              case 'VERTEX':\n                for (var key in vertices) {\n                  var id = vertices[key];\n\n                  switch (key) {\n                    case 'POSITION':\n                      var prevLength = position.array.length;\n                      buildGeometryData(primitive, sources[id], input.offset, position.array);\n                      position.stride = sources[id].stride;\n\n                      if (sources.skinWeights && sources.skinIndices) {\n                        buildGeometryData(primitive, sources.skinIndices, input.offset, skinIndex.array);\n                        buildGeometryData(primitive, sources.skinWeights, input.offset, skinWeight.array);\n                      } // see #3803\n\n\n                      if (primitive.hasUV === false && primitives.uvsNeedsFix === true) {\n                        var _count2 = (position.array.length - prevLength) / position.stride;\n\n                        for (var i = 0; i < _count2; i++) {\n                          // fill missing uv coordinates\n                          uv.array.push(0, 0);\n                        }\n                      }\n\n                      break;\n\n                    case 'NORMAL':\n                      buildGeometryData(primitive, sources[id], input.offset, normal.array);\n                      normal.stride = sources[id].stride;\n                      break;\n\n                    case 'COLOR':\n                      buildGeometryData(primitive, sources[id], input.offset, color.array);\n                      color.stride = sources[id].stride;\n                      break;\n\n                    case 'TEXCOORD':\n                      buildGeometryData(primitive, sources[id], input.offset, uv.array);\n                      uv.stride = sources[id].stride;\n                      break;\n\n                    case 'TEXCOORD1':\n                      buildGeometryData(primitive, sources[id], input.offset, uv2.array);\n                      uv.stride = sources[id].stride;\n                      break;\n\n                    default:\n                      console.warn('THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.', key);\n                  }\n                }\n\n                break;\n\n              case 'NORMAL':\n                buildGeometryData(primitive, sources[input.id], input.offset, normal.array);\n                normal.stride = sources[input.id].stride;\n                break;\n\n              case 'COLOR':\n                buildGeometryData(primitive, sources[input.id], input.offset, color.array);\n                color.stride = sources[input.id].stride;\n                break;\n\n              case 'TEXCOORD':\n                buildGeometryData(primitive, sources[input.id], input.offset, uv.array);\n                uv.stride = sources[input.id].stride;\n                break;\n\n              case 'TEXCOORD1':\n                buildGeometryData(primitive, sources[input.id], input.offset, uv2.array);\n                uv2.stride = sources[input.id].stride;\n                break;\n            }\n          }\n        } // build geometry\n\n\n        if (position.array.length > 0) {\n          geometry.setAttribute('position', new Float32BufferAttribute(position.array, position.stride));\n        }\n\n        if (normal.array.length > 0) {\n          geometry.setAttribute('normal', new Float32BufferAttribute(normal.array, normal.stride));\n        }\n\n        if (color.array.length > 0) geometry.setAttribute('color', new Float32BufferAttribute(color.array, color.stride));\n        if (uv.array.length > 0) geometry.setAttribute('uv', new Float32BufferAttribute(uv.array, uv.stride));\n        if (uv2.array.length > 0) geometry.setAttribute('uv2', new Float32BufferAttribute(uv2.array, uv2.stride));\n\n        if (skinIndex.array.length > 0) {\n          geometry.setAttribute('skinIndex', new Float32BufferAttribute(skinIndex.array, skinIndex.stride));\n        }\n\n        if (skinWeight.array.length > 0) {\n          geometry.setAttribute('skinWeight', new Float32BufferAttribute(skinWeight.array, skinWeight.stride));\n        }\n\n        build.data = geometry;\n        build.type = primitives[0].type;\n        build.materialKeys = materialKeys;\n        return build;\n      }\n\n      function buildGeometryData(primitive, source, offset, array) {\n        var indices = primitive.p;\n        var stride = primitive.stride;\n        var vcount = primitive.vcount;\n\n        function pushVector(i) {\n          var index = indices[i + offset] * sourceStride;\n          var length = index + sourceStride;\n\n          for (; index < length; index++) {\n            array.push(sourceArray[index]);\n          }\n        }\n\n        var sourceArray = source.array;\n        var sourceStride = source.stride;\n\n        if (primitive.vcount !== undefined) {\n          var index = 0;\n\n          for (var i = 0, l = vcount.length; i < l; i++) {\n            var _count3 = vcount[i];\n\n            if (_count3 === 4) {\n              var a = index + stride * 0;\n              var b = index + stride * 1;\n              var c = index + stride * 2;\n              var d = index + stride * 3;\n              pushVector(a);\n              pushVector(b);\n              pushVector(d);\n              pushVector(b);\n              pushVector(c);\n              pushVector(d);\n            } else if (_count3 === 3) {\n              var _a = index + stride * 0;\n\n              var _b = index + stride * 1;\n\n              var _c = index + stride * 2;\n\n              pushVector(_a);\n              pushVector(_b);\n              pushVector(_c);\n            } else if (_count3 > 4) {\n              for (var k = 1, kl = _count3 - 2; k <= kl; k++) {\n                var _a2 = index + stride * 0;\n\n                var _b2 = index + stride * k;\n\n                var _c2 = index + stride * (k + 1);\n\n                pushVector(_a2);\n                pushVector(_b2);\n                pushVector(_c2);\n              }\n            }\n\n            index += stride * _count3;\n          }\n        } else {\n          for (var _i = 0, _l = indices.length; _i < _l; _i += stride) {\n            pushVector(_i);\n          }\n        }\n      }\n\n      function getGeometry(id) {\n        return getBuild(library.geometries[id], buildGeometry);\n      } // kinematics\n\n\n      function parseKinematicsModel(xml) {\n        var data = {\n          name: xml.getAttribute('name') || '',\n          joints: {},\n          links: []\n        };\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'technique_common':\n              parseKinematicsTechniqueCommon(child, data);\n              break;\n          }\n        }\n\n        library.kinematicsModels[xml.getAttribute('id')] = data;\n      }\n\n      function buildKinematicsModel(data) {\n        if (data.build !== undefined) return data.build;\n        return data;\n      }\n\n      function getKinematicsModel(id) {\n        return getBuild(library.kinematicsModels[id], buildKinematicsModel);\n      }\n\n      function parseKinematicsTechniqueCommon(xml, data) {\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'joint':\n              data.joints[child.getAttribute('sid')] = parseKinematicsJoint(child);\n              break;\n\n            case 'link':\n              data.links.push(parseKinematicsLink(child));\n              break;\n          }\n        }\n      }\n\n      function parseKinematicsJoint(xml) {\n        var data;\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'prismatic':\n            case 'revolute':\n              data = parseKinematicsJointParameter(child);\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseKinematicsJointParameter(xml) {\n        var data = {\n          sid: xml.getAttribute('sid'),\n          name: xml.getAttribute('name') || '',\n          axis: new Vector3(),\n          limits: {\n            min: 0,\n            max: 0\n          },\n          type: xml.nodeName,\n          static: false,\n          zeroPosition: 0,\n          middlePosition: 0\n        };\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'axis':\n              var array = parseFloats(child.textContent);\n              data.axis.fromArray(array);\n              break;\n\n            case 'limits':\n              var max = child.getElementsByTagName('max')[0];\n              var min = child.getElementsByTagName('min')[0];\n              data.limits.max = parseFloat(max.textContent);\n              data.limits.min = parseFloat(min.textContent);\n              break;\n          }\n        } // if min is equal to or greater than max, consider the joint static\n\n\n        if (data.limits.min >= data.limits.max) {\n          data.static = true;\n        } // calculate middle position\n\n\n        data.middlePosition = (data.limits.min + data.limits.max) / 2.0;\n        return data;\n      }\n\n      function parseKinematicsLink(xml) {\n        var data = {\n          sid: xml.getAttribute('sid'),\n          name: xml.getAttribute('name') || '',\n          attachments: [],\n          transforms: []\n        };\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'attachment_full':\n              data.attachments.push(parseKinematicsAttachment(child));\n              break;\n\n            case 'matrix':\n            case 'translate':\n            case 'rotate':\n              data.transforms.push(parseKinematicsTransform(child));\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseKinematicsAttachment(xml) {\n        var data = {\n          joint: xml.getAttribute('joint').split('/').pop(),\n          transforms: [],\n          links: []\n        };\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'link':\n              data.links.push(parseKinematicsLink(child));\n              break;\n\n            case 'matrix':\n            case 'translate':\n            case 'rotate':\n              data.transforms.push(parseKinematicsTransform(child));\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseKinematicsTransform(xml) {\n        var data = {\n          type: xml.nodeName\n        };\n        var array = parseFloats(xml.textContent);\n\n        switch (data.type) {\n          case 'matrix':\n            data.obj = new Matrix4();\n            data.obj.fromArray(array).transpose();\n            break;\n\n          case 'translate':\n            data.obj = new Vector3();\n            data.obj.fromArray(array);\n            break;\n\n          case 'rotate':\n            data.obj = new Vector3();\n            data.obj.fromArray(array);\n            data.angle = MathUtils.degToRad(array[3]);\n            break;\n        }\n\n        return data;\n      } // physics\n\n\n      function parsePhysicsModel(xml) {\n        var data = {\n          name: xml.getAttribute('name') || '',\n          rigidBodies: {}\n        };\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'rigid_body':\n              data.rigidBodies[child.getAttribute('name')] = {};\n              parsePhysicsRigidBody(child, data.rigidBodies[child.getAttribute('name')]);\n              break;\n          }\n        }\n\n        library.physicsModels[xml.getAttribute('id')] = data;\n      }\n\n      function parsePhysicsRigidBody(xml, data) {\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'technique_common':\n              parsePhysicsTechniqueCommon(child, data);\n              break;\n          }\n        }\n      }\n\n      function parsePhysicsTechniqueCommon(xml, data) {\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'inertia':\n              data.inertia = parseFloats(child.textContent);\n              break;\n\n            case 'mass':\n              data.mass = parseFloats(child.textContent)[0];\n              break;\n          }\n        }\n      } // scene\n\n\n      function parseKinematicsScene(xml) {\n        var data = {\n          bindJointAxis: []\n        };\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'bind_joint_axis':\n              data.bindJointAxis.push(parseKinematicsBindJointAxis(child));\n              break;\n          }\n        }\n\n        library.kinematicsScenes[parseId(xml.getAttribute('url'))] = data;\n      }\n\n      function parseKinematicsBindJointAxis(xml) {\n        var data = {\n          target: xml.getAttribute('target').split('/').pop()\n        };\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'axis':\n              var param = child.getElementsByTagName('param')[0];\n              data.axis = param.textContent;\n              var tmpJointIndex = data.axis.split('inst_').pop().split('axis')[0];\n              data.jointIndex = tmpJointIndex.substr(0, tmpJointIndex.length - 1);\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function buildKinematicsScene(data) {\n        if (data.build !== undefined) return data.build;\n        return data;\n      }\n\n      function getKinematicsScene(id) {\n        return getBuild(library.kinematicsScenes[id], buildKinematicsScene);\n      }\n\n      function setupKinematics() {\n        var kinematicsModelId = Object.keys(library.kinematicsModels)[0];\n        var kinematicsSceneId = Object.keys(library.kinematicsScenes)[0];\n        var visualSceneId = Object.keys(library.visualScenes)[0];\n        if (kinematicsModelId === undefined || kinematicsSceneId === undefined) return;\n        var kinematicsModel = getKinematicsModel(kinematicsModelId);\n        var kinematicsScene = getKinematicsScene(kinematicsSceneId);\n        var visualScene = getVisualScene(visualSceneId);\n        var bindJointAxis = kinematicsScene.bindJointAxis;\n        var jointMap = {};\n\n        for (var i = 0, l = bindJointAxis.length; i < l; i++) {\n          var axis = bindJointAxis[i]; // the result of the following query is an element of type 'translate', 'rotate','scale' or 'matrix'\n\n          var targetElement = collada.querySelector('[sid=\"' + axis.target + '\"]');\n\n          if (targetElement) {\n            // get the parent of the transform element\n            var parentVisualElement = targetElement.parentElement; // connect the joint of the kinematics model with the element in the visual scene\n\n            connect(axis.jointIndex, parentVisualElement);\n          }\n        }\n\n        function connect(jointIndex, visualElement) {\n          var visualElementName = visualElement.getAttribute('name');\n          var joint = kinematicsModel.joints[jointIndex];\n          visualScene.traverse(function (object) {\n            if (object.name === visualElementName) {\n              jointMap[jointIndex] = {\n                object: object,\n                transforms: buildTransformList(visualElement),\n                joint: joint,\n                position: joint.zeroPosition\n              };\n            }\n          });\n        }\n\n        var m0 = new Matrix4();\n        kinematics = {\n          joints: kinematicsModel && kinematicsModel.joints,\n          getJointValue: function getJointValue(jointIndex) {\n            var jointData = jointMap[jointIndex];\n\n            if (jointData) {\n              return jointData.position;\n            } else {\n              console.warn('THREE.ColladaLoader: Joint ' + jointIndex + \" doesn't exist.\");\n            }\n          },\n          setJointValue: function setJointValue(jointIndex, value) {\n            var jointData = jointMap[jointIndex];\n\n            if (jointData) {\n              var joint = jointData.joint;\n\n              if (value > joint.limits.max || value < joint.limits.min) {\n                console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').');\n              } else if (joint.static) {\n                console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' is static.');\n              } else {\n                var object = jointData.object;\n                var _axis = joint.axis;\n                var transforms = jointData.transforms;\n                matrix.identity(); // each update, we have to apply all transforms in the correct order\n\n                for (var _i2 = 0; _i2 < transforms.length; _i2++) {\n                  var transform = transforms[_i2]; // if there is a connection of the transform node with a joint, apply the joint value\n\n                  if (transform.sid && transform.sid.indexOf(jointIndex) !== -1) {\n                    switch (joint.type) {\n                      case 'revolute':\n                        matrix.multiply(m0.makeRotationAxis(_axis, MathUtils.degToRad(value)));\n                        break;\n\n                      case 'prismatic':\n                        matrix.multiply(m0.makeTranslation(_axis.x * value, _axis.y * value, _axis.z * value));\n                        break;\n\n                      default:\n                        console.warn('THREE.ColladaLoader: Unknown joint type: ' + joint.type);\n                        break;\n                    }\n                  } else {\n                    switch (transform.type) {\n                      case 'matrix':\n                        matrix.multiply(transform.obj);\n                        break;\n\n                      case 'translate':\n                        matrix.multiply(m0.makeTranslation(transform.obj.x, transform.obj.y, transform.obj.z));\n                        break;\n\n                      case 'scale':\n                        matrix.scale(transform.obj);\n                        break;\n\n                      case 'rotate':\n                        matrix.multiply(m0.makeRotationAxis(transform.obj, transform.angle));\n                        break;\n                    }\n                  }\n                }\n\n                object.matrix.copy(matrix);\n                object.matrix.decompose(object.position, object.quaternion, object.scale);\n                jointMap[jointIndex].position = value;\n              }\n            } else {\n              console.log('THREE.ColladaLoader: ' + jointIndex + ' does not exist.');\n            }\n          }\n        };\n      }\n\n      function buildTransformList(node) {\n        var transforms = [];\n        var xml = collada.querySelector('[id=\"' + node.id + '\"]');\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          var array = void 0,\n              _vector = void 0;\n\n          switch (child.nodeName) {\n            case 'matrix':\n              array = parseFloats(child.textContent);\n\n              var _matrix = new Matrix4().fromArray(array).transpose();\n\n              transforms.push({\n                sid: child.getAttribute('sid'),\n                type: child.nodeName,\n                obj: _matrix\n              });\n              break;\n\n            case 'translate':\n            case 'scale':\n              array = parseFloats(child.textContent);\n              _vector = new Vector3().fromArray(array);\n              transforms.push({\n                sid: child.getAttribute('sid'),\n                type: child.nodeName,\n                obj: _vector\n              });\n              break;\n\n            case 'rotate':\n              array = parseFloats(child.textContent);\n              _vector = new Vector3().fromArray(array);\n              var angle = MathUtils.degToRad(array[3]);\n              transforms.push({\n                sid: child.getAttribute('sid'),\n                type: child.nodeName,\n                obj: _vector,\n                angle: angle\n              });\n              break;\n          }\n        }\n\n        return transforms;\n      } // nodes\n\n\n      function prepareNodes(xml) {\n        var elements = xml.getElementsByTagName('node'); // ensure all node elements have id attributes\n\n        for (var i = 0; i < elements.length; i++) {\n          var element = elements[i];\n\n          if (element.hasAttribute('id') === false) {\n            element.setAttribute('id', generateId());\n          }\n        }\n      }\n\n      var matrix = new Matrix4();\n      var vector = new Vector3();\n\n      function parseNode(xml) {\n        var data = {\n          name: xml.getAttribute('name') || '',\n          type: xml.getAttribute('type'),\n          id: xml.getAttribute('id'),\n          sid: xml.getAttribute('sid'),\n          matrix: new Matrix4(),\n          nodes: [],\n          instanceCameras: [],\n          instanceControllers: [],\n          instanceLights: [],\n          instanceGeometries: [],\n          instanceNodes: [],\n          transforms: {}\n        };\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n          var array = void 0;\n\n          switch (child.nodeName) {\n            case 'node':\n              data.nodes.push(child.getAttribute('id'));\n              parseNode(child);\n              break;\n\n            case 'instance_camera':\n              data.instanceCameras.push(parseId(child.getAttribute('url')));\n              break;\n\n            case 'instance_controller':\n              data.instanceControllers.push(parseNodeInstance(child));\n              break;\n\n            case 'instance_light':\n              data.instanceLights.push(parseId(child.getAttribute('url')));\n              break;\n\n            case 'instance_geometry':\n              data.instanceGeometries.push(parseNodeInstance(child));\n              break;\n\n            case 'instance_node':\n              data.instanceNodes.push(parseId(child.getAttribute('url')));\n              break;\n\n            case 'matrix':\n              array = parseFloats(child.textContent);\n              data.matrix.multiply(matrix.fromArray(array).transpose());\n              data.transforms[child.getAttribute('sid')] = child.nodeName;\n              break;\n\n            case 'translate':\n              array = parseFloats(child.textContent);\n              vector.fromArray(array);\n              data.matrix.multiply(matrix.makeTranslation(vector.x, vector.y, vector.z));\n              data.transforms[child.getAttribute('sid')] = child.nodeName;\n              break;\n\n            case 'rotate':\n              array = parseFloats(child.textContent);\n              var angle = MathUtils.degToRad(array[3]);\n              data.matrix.multiply(matrix.makeRotationAxis(vector.fromArray(array), angle));\n              data.transforms[child.getAttribute('sid')] = child.nodeName;\n              break;\n\n            case 'scale':\n              array = parseFloats(child.textContent);\n              data.matrix.scale(vector.fromArray(array));\n              data.transforms[child.getAttribute('sid')] = child.nodeName;\n              break;\n\n            case 'extra':\n              break;\n\n            default:\n              console.log(child);\n          }\n        }\n\n        if (hasNode(data.id)) {\n          console.warn('THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id);\n        } else {\n          library.nodes[data.id] = data;\n        }\n\n        return data;\n      }\n\n      function parseNodeInstance(xml) {\n        var data = {\n          id: parseId(xml.getAttribute('url')),\n          materials: {},\n          skeletons: []\n        };\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n\n          switch (child.nodeName) {\n            case 'bind_material':\n              var instances = child.getElementsByTagName('instance_material');\n\n              for (var j = 0; j < instances.length; j++) {\n                var instance = instances[j];\n                var symbol = instance.getAttribute('symbol');\n                var target = instance.getAttribute('target');\n                data.materials[symbol] = parseId(target);\n              }\n\n              break;\n\n            case 'skeleton':\n              data.skeletons.push(parseId(child.textContent));\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function buildSkeleton(skeletons, joints) {\n        var boneData = [];\n        var sortedBoneData = [];\n        var i, j, data; // a skeleton can have multiple root bones. collada expresses this\n        // situtation with multiple \"skeleton\" tags per controller instance\n\n        for (i = 0; i < skeletons.length; i++) {\n          var skeleton = skeletons[i];\n          var root = void 0;\n\n          if (hasNode(skeleton)) {\n            root = getNode(skeleton);\n            buildBoneHierarchy(root, joints, boneData);\n          } else if (hasVisualScene(skeleton)) {\n            // handle case where the skeleton refers to the visual scene (#13335)\n            var visualScene = library.visualScenes[skeleton];\n            var children = visualScene.children;\n\n            for (var _j = 0; _j < children.length; _j++) {\n              var child = children[_j];\n\n              if (child.type === 'JOINT') {\n                var _root = getNode(child.id);\n\n                buildBoneHierarchy(_root, joints, boneData);\n              }\n            }\n          } else {\n            console.error('THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton);\n          }\n        } // sort bone data (the order is defined in the corresponding controller)\n\n\n        for (i = 0; i < joints.length; i++) {\n          for (j = 0; j < boneData.length; j++) {\n            data = boneData[j];\n\n            if (data.bone.name === joints[i].name) {\n              sortedBoneData[i] = data;\n              data.processed = true;\n              break;\n            }\n          }\n        } // add unprocessed bone data at the end of the list\n\n\n        for (i = 0; i < boneData.length; i++) {\n          data = boneData[i];\n\n          if (data.processed === false) {\n            sortedBoneData.push(data);\n            data.processed = true;\n          }\n        } // setup arrays for skeleton creation\n\n\n        var bones = [];\n        var boneInverses = [];\n\n        for (i = 0; i < sortedBoneData.length; i++) {\n          data = sortedBoneData[i];\n          bones.push(data.bone);\n          boneInverses.push(data.boneInverse);\n        }\n\n        return new Skeleton(bones, boneInverses);\n      }\n\n      function buildBoneHierarchy(root, joints, boneData) {\n        // setup bone data from visual scene\n        root.traverse(function (object) {\n          if (object.isBone === true) {\n            var boneInverse; // retrieve the boneInverse from the controller data\n\n            for (var i = 0; i < joints.length; i++) {\n              var joint = joints[i];\n\n              if (joint.name === object.name) {\n                boneInverse = joint.boneInverse;\n                break;\n              }\n            }\n\n            if (boneInverse === undefined) {\n              // Unfortunately, there can be joints in the visual scene that are not part of the\n              // corresponding controller. In this case, we have to create a dummy boneInverse matrix\n              // for the respective bone. This bone won't affect any vertices, because there are no skin indices\n              // and weights defined for it. But we still have to add the bone to the sorted bone list in order to\n              // ensure a correct animation of the model.\n              boneInverse = new Matrix4();\n            }\n\n            boneData.push({\n              bone: object,\n              boneInverse: boneInverse,\n              processed: false\n            });\n          }\n        });\n      }\n\n      function buildNode(data) {\n        var objects = [];\n        var matrix = data.matrix;\n        var nodes = data.nodes;\n        var type = data.type;\n        var instanceCameras = data.instanceCameras;\n        var instanceControllers = data.instanceControllers;\n        var instanceLights = data.instanceLights;\n        var instanceGeometries = data.instanceGeometries;\n        var instanceNodes = data.instanceNodes; // nodes\n\n        for (var i = 0, l = nodes.length; i < l; i++) {\n          objects.push(getNode(nodes[i]));\n        } // instance cameras\n\n\n        for (var _i3 = 0, _l2 = instanceCameras.length; _i3 < _l2; _i3++) {\n          var instanceCamera = getCamera(instanceCameras[_i3]);\n\n          if (instanceCamera !== null) {\n            objects.push(instanceCamera.clone());\n          }\n        } // instance controllers\n\n\n        for (var _i4 = 0, _l3 = instanceControllers.length; _i4 < _l3; _i4++) {\n          var instance = instanceControllers[_i4];\n          var controller = getController(instance.id);\n          var geometries = getGeometry(controller.id);\n          var newObjects = buildObjects(geometries, instance.materials);\n          var skeletons = instance.skeletons;\n          var joints = controller.skin.joints;\n          var skeleton = buildSkeleton(skeletons, joints);\n\n          for (var j = 0, jl = newObjects.length; j < jl; j++) {\n            var _object = newObjects[j];\n\n            if (_object.isSkinnedMesh) {\n              _object.bind(skeleton, controller.skin.bindMatrix);\n\n              _object.normalizeSkinWeights();\n            }\n\n            objects.push(_object);\n          }\n        } // instance lights\n\n\n        for (var _i5 = 0, _l4 = instanceLights.length; _i5 < _l4; _i5++) {\n          var instanceLight = getLight(instanceLights[_i5]);\n\n          if (instanceLight !== null) {\n            objects.push(instanceLight.clone());\n          }\n        } // instance geometries\n\n\n        for (var _i6 = 0, _l5 = instanceGeometries.length; _i6 < _l5; _i6++) {\n          var _instance = instanceGeometries[_i6]; // a single geometry instance in collada can lead to multiple object3Ds.\n          // this is the case when primitives are combined like triangles and lines\n\n          var _geometries = getGeometry(_instance.id);\n\n          var _newObjects = buildObjects(_geometries, _instance.materials);\n\n          for (var _j2 = 0, _jl = _newObjects.length; _j2 < _jl; _j2++) {\n            objects.push(_newObjects[_j2]);\n          }\n        } // instance nodes\n\n\n        for (var _i7 = 0, _l6 = instanceNodes.length; _i7 < _l6; _i7++) {\n          objects.push(getNode(instanceNodes[_i7]).clone());\n        }\n\n        var object;\n\n        if (nodes.length === 0 && objects.length === 1) {\n          object = objects[0];\n        } else {\n          object = type === 'JOINT' ? new Bone() : new Group();\n\n          for (var _i8 = 0; _i8 < objects.length; _i8++) {\n            object.add(objects[_i8]);\n          }\n        }\n\n        object.name = type === 'JOINT' ? data.sid : data.name;\n        object.matrix.copy(matrix);\n        object.matrix.decompose(object.position, object.quaternion, object.scale);\n        return object;\n      }\n\n      var fallbackMaterial = new MeshBasicMaterial({\n        color: 0xff00ff\n      });\n\n      function resolveMaterialBinding(keys, instanceMaterials) {\n        var materials = [];\n\n        for (var i = 0, l = keys.length; i < l; i++) {\n          var id = instanceMaterials[keys[i]];\n\n          if (id === undefined) {\n            console.warn('THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[i]);\n            materials.push(fallbackMaterial);\n          } else {\n            materials.push(getMaterial(id));\n          }\n        }\n\n        return materials;\n      }\n\n      function buildObjects(geometries, instanceMaterials) {\n        var objects = [];\n\n        for (var type in geometries) {\n          var geometry = geometries[type];\n          var materials = resolveMaterialBinding(geometry.materialKeys, instanceMaterials); // handle case if no materials are defined\n\n          if (materials.length === 0) {\n            if (type === 'lines' || type === 'linestrips') {\n              materials.push(new LineBasicMaterial());\n            } else {\n              materials.push(new MeshPhongMaterial());\n            }\n          } // regard skinning\n\n\n          var skinning = geometry.data.attributes.skinIndex !== undefined;\n\n          if (skinning) {\n            for (var i = 0, l = materials.length; i < l; i++) {\n              materials[i].skinning = true;\n            }\n          } // choose between a single or multi materials (material array)\n\n\n          var material = materials.length === 1 ? materials[0] : materials; // now create a specific 3D object\n\n          var object = void 0;\n\n          switch (type) {\n            case 'lines':\n              object = new LineSegments(geometry.data, material);\n              break;\n\n            case 'linestrips':\n              object = new Line(geometry.data, material);\n              break;\n\n            case 'triangles':\n            case 'polylist':\n              if (skinning) {\n                object = new SkinnedMesh(geometry.data, material);\n              } else {\n                object = new Mesh(geometry.data, material);\n              }\n\n              break;\n          }\n\n          objects.push(object);\n        }\n\n        return objects;\n      }\n\n      function hasNode(id) {\n        return library.nodes[id] !== undefined;\n      }\n\n      function getNode(id) {\n        return getBuild(library.nodes[id], buildNode);\n      } // visual scenes\n\n\n      function parseVisualScene(xml) {\n        var data = {\n          name: xml.getAttribute('name'),\n          children: []\n        };\n        prepareNodes(xml);\n        var elements = getElementsByTagName(xml, 'node');\n\n        for (var i = 0; i < elements.length; i++) {\n          data.children.push(parseNode(elements[i]));\n        }\n\n        library.visualScenes[xml.getAttribute('id')] = data;\n      }\n\n      function buildVisualScene(data) {\n        var group = new Group();\n        group.name = data.name;\n        var children = data.children;\n\n        for (var i = 0; i < children.length; i++) {\n          var child = children[i];\n          group.add(getNode(child.id));\n        }\n\n        return group;\n      }\n\n      function hasVisualScene(id) {\n        return library.visualScenes[id] !== undefined;\n      }\n\n      function getVisualScene(id) {\n        return getBuild(library.visualScenes[id], buildVisualScene);\n      } // scenes\n\n\n      function parseScene(xml) {\n        var instance = getElementsByTagName(xml, 'instance_visual_scene')[0];\n        return getVisualScene(parseId(instance.getAttribute('url')));\n      }\n\n      function setupAnimations() {\n        var clips = library.clips;\n\n        if (isEmpty(clips) === true) {\n          if (isEmpty(library.animations) === false) {\n            // if there are animations but no clips, we create a default clip for playback\n            var tracks = [];\n\n            for (var id in library.animations) {\n              var animationTracks = getAnimation(id);\n\n              for (var i = 0, l = animationTracks.length; i < l; i++) {\n                tracks.push(animationTracks[i]);\n              }\n            }\n\n            animations.push(new AnimationClip('default', -1, tracks));\n          }\n        } else {\n          for (var _id in clips) {\n            animations.push(getAnimationClip(_id));\n          }\n        }\n      } // convert the parser error element into text with each child elements text\n      // separated by new lines.\n\n\n      function parserErrorToText(parserError) {\n        var result = '';\n        var stack = [parserError];\n\n        while (stack.length) {\n          var node = stack.shift();\n\n          if (node.nodeType === Node.TEXT_NODE) {\n            result += node.textContent;\n          } else {\n            result += '\\n';\n            stack.push.apply(stack, node.childNodes);\n          }\n        }\n\n        return result.trim();\n      }\n\n      if (text.length === 0) {\n        return {\n          scene: new Scene()\n        };\n      }\n\n      var xml = new DOMParser().parseFromString(text, 'application/xml');\n      var collada = getElementsByTagName(xml, 'COLLADA')[0];\n      var parserError = xml.getElementsByTagName('parsererror')[0];\n\n      if (parserError !== undefined) {\n        // Chrome will return parser error with a div in it\n        var errorElement = getElementsByTagName(parserError, 'div')[0];\n        var errorText;\n\n        if (errorElement) {\n          errorText = errorElement.textContent;\n        } else {\n          errorText = parserErrorToText(parserError);\n        }\n\n        console.error('THREE.ColladaLoader: Failed to parse collada file.\\n', errorText);\n        return null;\n      } // metadata\n\n\n      var version = collada.getAttribute('version');\n      console.log('THREE.ColladaLoader: File version', version);\n      var asset = parseAsset(getElementsByTagName(collada, 'asset')[0]);\n      var textureLoader = new TextureLoader(this.manager);\n      textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n      var tgaLoader;\n\n      if (TGALoader) {\n        tgaLoader = new TGALoader(this.manager);\n        tgaLoader.setPath(this.resourcePath || path);\n      } //\n\n\n      var animations = [];\n      var kinematics = {};\n      var count = 0; //\n\n      var library = {\n        animations: {},\n        clips: {},\n        controllers: {},\n        images: {},\n        effects: {},\n        materials: {},\n        cameras: {},\n        lights: {},\n        geometries: {},\n        nodes: {},\n        visualScenes: {},\n        kinematicsModels: {},\n        physicsModels: {},\n        kinematicsScenes: {}\n      };\n      parseLibrary(collada, 'library_animations', 'animation', parseAnimation);\n      parseLibrary(collada, 'library_animation_clips', 'animation_clip', parseAnimationClip);\n      parseLibrary(collada, 'library_controllers', 'controller', parseController);\n      parseLibrary(collada, 'library_images', 'image', parseImage);\n      parseLibrary(collada, 'library_effects', 'effect', parseEffect);\n      parseLibrary(collada, 'library_materials', 'material', parseMaterial);\n      parseLibrary(collada, 'library_cameras', 'camera', parseCamera);\n      parseLibrary(collada, 'library_lights', 'light', parseLight);\n      parseLibrary(collada, 'library_geometries', 'geometry', parseGeometry);\n      parseLibrary(collada, 'library_nodes', 'node', parseNode);\n      parseLibrary(collada, 'library_visual_scenes', 'visual_scene', parseVisualScene);\n      parseLibrary(collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel);\n      parseLibrary(collada, 'library_physics_models', 'physics_model', parsePhysicsModel);\n      parseLibrary(collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene);\n      buildLibrary(library.animations, buildAnimation);\n      buildLibrary(library.clips, buildAnimationClip);\n      buildLibrary(library.controllers, buildController);\n      buildLibrary(library.images, buildImage);\n      buildLibrary(library.effects, buildEffect);\n      buildLibrary(library.materials, buildMaterial);\n      buildLibrary(library.cameras, buildCamera);\n      buildLibrary(library.lights, buildLight);\n      buildLibrary(library.geometries, buildGeometry);\n      buildLibrary(library.visualScenes, buildVisualScene);\n      setupAnimations();\n      setupKinematics();\n      var scene = parseScene(getElementsByTagName(collada, 'scene')[0]);\n      scene.animations = animations;\n\n      if (asset.upAxis === 'Z_UP') {\n        scene.quaternion.setFromEuler(new Euler(-Math.PI / 2, 0, 0));\n      }\n\n      scene.scale.multiplyScalar(asset.unit);\n      return {\n        get animations() {\n          console.warn('THREE.ColladaLoader: Please access animations over scene.animations now.');\n          return animations;\n        },\n\n        kinematics: kinematics,\n        library: library,\n        scene: scene\n      };\n    }\n  }]);\n\n  return ColladaLoader;\n}(Loader);\n\nexport { ColladaLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","Vector3","Quaternion","Matrix4","MeshBasicMaterial","Scene","TextureLoader","Euler","MathUtils","AnimationClip","VectorKeyframeTrack","QuaternionKeyframeTrack","MeshLambertMaterial","MeshPhongMaterial","DoubleSide","PerspectiveCamera","OrthographicCamera","Color","AmbientLight","SpotLight","PointLight","DirectionalLight","BufferGeometry","Float32BufferAttribute","Skeleton","Bone","Group","LineBasicMaterial","SkinnedMesh","Mesh","Line","LineSegments","RepeatWrapping","ClampToEdgeWrapping","TGALoader","ColladaLoader","manager","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","getElementsByTagName","xml","name","array","childNodes","i","l","length","child","nodeName","push","parseStrings","parts","trim","split","Array","parseFloats","parseFloat","parseInts","parseInt","parseId","substring","generateId","count","isEmpty","object","Object","keys","parseAsset","unit","parseAssetUnit","upAxis","parseAssetUpAxis","undefined","hasAttribute","getAttribute","textContent","parseLibrary","libraryName","parser","library","elements","buildLibrary","data","builder","build","getBuild","parseAnimation","sources","samplers","channels","hasChildren","nodeType","id","parseSource","parseAnimationSampler","parseAnimationChannel","log","animations","generateUUID","inputs","semantic","target","shift","sid","arraySyntax","indexOf","memberSyntax","member","indices","replace","sampler","buildAnimation","tracks","hasOwnProperty","channel","inputId","INPUT","outputId","OUTPUT","inputSource","outputSource","animation","buildAnimationChannel","createKeyframeTracks","getAnimation","node","nodes","object3D","getNode","transform","transforms","defaultMatrix","matrix","clone","transpose","time","stride","il","j","jl","value","index","warn","keyframes","prepareAnimationData","uuid","sort","ascending","transformAnimationData","a","b","position","scale","quaternion","times","positionData","quaternionData","scaleData","keyframe","fromArray","decompose","x","y","z","w","property","defaultValue","empty","createMissingKeyframes","prev","next","getPrev","getNext","interpolate","key","parseAnimationClip","start","end","clips","buildAnimationClip","duration","animationTracks","getAnimationClip","parseController","skin","parseSkin","controllers","bindShapeMatrix","joints","parseJoints","vertexWeights","parseVertexWeights","offset","vcount","v","buildController","geometry","geometries","buildSkin","skinIndices","skinWeights","weights","BONE_LIMIT","jointOffset","JOINT","weightOffset","WEIGHT","jointSource","inverseSource","INV_BIND_MATRIX","jointCount","vertexSkinData","skinIndex","weightId","skinWeight","weight","descending","d","bindMatrix","identity","boneInverse","getController","parseImage","init_from","images","buildImage","getImage","parseEffect","profile","parseEffectProfileCOMMON","effects","surfaces","parseEffectNewparam","technique","parseEffectTechnique","extra","parseEffectExtra","parseEffectSurface","parseEffectSampler","source","type","parameters","parseEffectParameters","parseEffectParameter","opaque","parseEffectParameterTexture","parseEffectParameterTextureExtra","parseEffectParameterTextureExtraTechnique","toUpperCase","parseEffectExtraTechnique","buildEffect","getEffect","parseMaterial","materials","getTextureLoader","image","extension","slice","lastIndexOf","toLowerCase","tgaLoader","textureLoader","buildMaterial","effect","material","getTexture","textureObject","surface","texture","wrapS","wrapU","wrapT","wrapV","set","offsetU","offsetV","repeat","repeatU","repeatV","parameter","color","map","specular","specularMap","normalMap","lightMap","float","shininess","emissive","emissiveMap","transparent","transparency","opacity","double_sided","side","getMaterial","parseCamera","optics","parseCameraOptics","cameras","parseCameraTechnique","parseCameraParameters","buildCamera","camera","yfov","aspect_ratio","znear","zfar","ymag","xmag","aspectRatio","getCamera","parseLight","parseLightTechnique","lights","parseLightParameters","falloffAngle","f","distance","Math","sqrt","buildLight","light","copy","getLight","parseGeometry","vertices","primitives","mesh","parseGeometryVertices","parseGeometryPrimitive","accessor","primitive","hasUV","inputname","max","p","groupPrimitives","checkUVCoordinates","uvsNeedsFix","buildGeometry","groupedPrimitives","primitiveType","buildGeometryType","normal","uv","uv2","materialKeys","g","vc","addGroup","input","prevLength","buildGeometryData","setAttribute","pushVector","sourceStride","sourceArray","c","k","kl","getGeometry","parseKinematicsModel","links","parseKinematicsTechniqueCommon","kinematicsModels","buildKinematicsModel","getKinematicsModel","parseKinematicsJoint","parseKinematicsLink","parseKinematicsJointParameter","axis","limits","min","static","zeroPosition","middlePosition","attachments","parseKinematicsAttachment","parseKinematicsTransform","joint","pop","obj","angle","degToRad","parsePhysicsModel","rigidBodies","parsePhysicsRigidBody","physicsModels","parsePhysicsTechniqueCommon","inertia","mass","parseKinematicsScene","bindJointAxis","parseKinematicsBindJointAxis","kinematicsScenes","param","tmpJointIndex","jointIndex","substr","buildKinematicsScene","getKinematicsScene","setupKinematics","kinematicsModelId","kinematicsSceneId","visualSceneId","visualScenes","kinematicsModel","kinematicsScene","visualScene","getVisualScene","jointMap","targetElement","collada","querySelector","parentVisualElement","parentElement","connect","visualElement","visualElementName","traverse","buildTransformList","m0","kinematics","getJointValue","jointData","setJointValue","multiply","makeRotationAxis","makeTranslation","vector","prepareNodes","element","parseNode","instanceCameras","instanceControllers","instanceLights","instanceGeometries","instanceNodes","parseNodeInstance","hasNode","skeletons","instances","instance","symbol","buildSkeleton","boneData","sortedBoneData","skeleton","root","buildBoneHierarchy","hasVisualScene","children","bone","processed","bones","boneInverses","isBone","buildNode","objects","instanceCamera","controller","newObjects","buildObjects","isSkinnedMesh","bind","normalizeSkinWeights","instanceLight","add","fallbackMaterial","resolveMaterialBinding","instanceMaterials","skinning","attributes","parseVisualScene","buildVisualScene","group","parseScene","setupAnimations","parserErrorToText","parserError","result","stack","Node","TEXT_NODE","apply","scene","DOMParser","parseFromString","errorElement","errorText","version","asset","resourcePath","setCrossOrigin","crossOrigin","setFromEuler","PI","multiplyScalar"],"sources":["/home/cliffexpc63/my example/portfolio/node_modules/three-stdlib/loaders/ColladaLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, Vector3, Quaternion, Matrix4, MeshBasicMaterial, Scene, TextureLoader, Euler, MathUtils, AnimationClip, VectorKeyframeTrack, QuaternionKeyframeTrack, MeshLambertMaterial, MeshPhongMaterial, DoubleSide, PerspectiveCamera, OrthographicCamera, Color, AmbientLight, SpotLight, PointLight, DirectionalLight, BufferGeometry, Float32BufferAttribute, Skeleton, Bone, Group, LineBasicMaterial, SkinnedMesh, Mesh, Line, LineSegments, RepeatWrapping, ClampToEdgeWrapping } from 'three';\nimport { TGALoader } from './TGALoader.js';\n\nclass ColladaLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(text, path) {\n    function getElementsByTagName(xml, name) {\n      // Non recursive xml.getElementsByTagName() ...\n      const array = [];\n      const childNodes = xml.childNodes;\n\n      for (let i = 0, l = childNodes.length; i < l; i++) {\n        const child = childNodes[i];\n\n        if (child.nodeName === name) {\n          array.push(child);\n        }\n      }\n\n      return array;\n    }\n\n    function parseStrings(text) {\n      if (text.length === 0) return [];\n      const parts = text.trim().split(/\\s+/);\n      const array = new Array(parts.length);\n\n      for (let i = 0, l = parts.length; i < l; i++) {\n        array[i] = parts[i];\n      }\n\n      return array;\n    }\n\n    function parseFloats(text) {\n      if (text.length === 0) return [];\n      const parts = text.trim().split(/\\s+/);\n      const array = new Array(parts.length);\n\n      for (let i = 0, l = parts.length; i < l; i++) {\n        array[i] = parseFloat(parts[i]);\n      }\n\n      return array;\n    }\n\n    function parseInts(text) {\n      if (text.length === 0) return [];\n      const parts = text.trim().split(/\\s+/);\n      const array = new Array(parts.length);\n\n      for (let i = 0, l = parts.length; i < l; i++) {\n        array[i] = parseInt(parts[i]);\n      }\n\n      return array;\n    }\n\n    function parseId(text) {\n      return text.substring(1);\n    }\n\n    function generateId() {\n      return 'three_default_' + count++;\n    }\n\n    function isEmpty(object) {\n      return Object.keys(object).length === 0;\n    } // asset\n\n\n    function parseAsset(xml) {\n      return {\n        unit: parseAssetUnit(getElementsByTagName(xml, 'unit')[0]),\n        upAxis: parseAssetUpAxis(getElementsByTagName(xml, 'up_axis')[0])\n      };\n    }\n\n    function parseAssetUnit(xml) {\n      if (xml !== undefined && xml.hasAttribute('meter') === true) {\n        return parseFloat(xml.getAttribute('meter'));\n      } else {\n        return 1; // default 1 meter\n      }\n    }\n\n    function parseAssetUpAxis(xml) {\n      return xml !== undefined ? xml.textContent : 'Y_UP';\n    } // library\n\n\n    function parseLibrary(xml, libraryName, nodeName, parser) {\n      const library = getElementsByTagName(xml, libraryName)[0];\n\n      if (library !== undefined) {\n        const elements = getElementsByTagName(library, nodeName);\n\n        for (let i = 0; i < elements.length; i++) {\n          parser(elements[i]);\n        }\n      }\n    }\n\n    function buildLibrary(data, builder) {\n      for (const name in data) {\n        const object = data[name];\n        object.build = builder(data[name]);\n      }\n    } // get\n\n\n    function getBuild(data, builder) {\n      if (data.build !== undefined) return data.build;\n      data.build = builder(data);\n      return data.build;\n    } // animation\n\n\n    function parseAnimation(xml) {\n      const data = {\n        sources: {},\n        samplers: {},\n        channels: {}\n      };\n      let hasChildren = false;\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        let id;\n\n        switch (child.nodeName) {\n          case 'source':\n            id = child.getAttribute('id');\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'sampler':\n            id = child.getAttribute('id');\n            data.samplers[id] = parseAnimationSampler(child);\n            break;\n\n          case 'channel':\n            id = child.getAttribute('target');\n            data.channels[id] = parseAnimationChannel(child);\n            break;\n\n          case 'animation':\n            // hierarchy of related animations\n            parseAnimation(child);\n            hasChildren = true;\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      if (hasChildren === false) {\n        // since 'id' attributes can be optional, it's necessary to generate a UUID for unqiue assignment\n        library.animations[xml.getAttribute('id') || MathUtils.generateUUID()] = data;\n      }\n    }\n\n    function parseAnimationSampler(xml) {\n      const data = {\n        inputs: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            const id = parseId(child.getAttribute('source'));\n            const semantic = child.getAttribute('semantic');\n            data.inputs[semantic] = id;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseAnimationChannel(xml) {\n      const data = {};\n      const target = xml.getAttribute('target'); // parsing SID Addressing Syntax\n\n      let parts = target.split('/');\n      const id = parts.shift();\n      let sid = parts.shift(); // check selection syntax\n\n      const arraySyntax = sid.indexOf('(') !== -1;\n      const memberSyntax = sid.indexOf('.') !== -1;\n\n      if (memberSyntax) {\n        //  member selection access\n        parts = sid.split('.');\n        sid = parts.shift();\n        data.member = parts.shift();\n      } else if (arraySyntax) {\n        // array-access syntax. can be used to express fields in one-dimensional vectors or two-dimensional matrices.\n        const indices = sid.split('(');\n        sid = indices.shift();\n\n        for (let i = 0; i < indices.length; i++) {\n          indices[i] = parseInt(indices[i].replace(/\\)/, ''));\n        }\n\n        data.indices = indices;\n      }\n\n      data.id = id;\n      data.sid = sid;\n      data.arraySyntax = arraySyntax;\n      data.memberSyntax = memberSyntax;\n      data.sampler = parseId(xml.getAttribute('source'));\n      return data;\n    }\n\n    function buildAnimation(data) {\n      const tracks = [];\n      const channels = data.channels;\n      const samplers = data.samplers;\n      const sources = data.sources;\n\n      for (const target in channels) {\n        if (channels.hasOwnProperty(target)) {\n          const channel = channels[target];\n          const sampler = samplers[channel.sampler];\n          const inputId = sampler.inputs.INPUT;\n          const outputId = sampler.inputs.OUTPUT;\n          const inputSource = sources[inputId];\n          const outputSource = sources[outputId];\n          const animation = buildAnimationChannel(channel, inputSource, outputSource);\n          createKeyframeTracks(animation, tracks);\n        }\n      }\n\n      return tracks;\n    }\n\n    function getAnimation(id) {\n      return getBuild(library.animations[id], buildAnimation);\n    }\n\n    function buildAnimationChannel(channel, inputSource, outputSource) {\n      const node = library.nodes[channel.id];\n      const object3D = getNode(node.id);\n      const transform = node.transforms[channel.sid];\n      const defaultMatrix = node.matrix.clone().transpose();\n      let time, stride;\n      let i, il, j, jl;\n      const data = {}; // the collada spec allows the animation of data in various ways.\n      // depending on the transform type (matrix, translate, rotate, scale), we execute different logic\n\n      switch (transform) {\n        case 'matrix':\n          for (i = 0, il = inputSource.array.length; i < il; i++) {\n            time = inputSource.array[i];\n            stride = i * outputSource.stride;\n            if (data[time] === undefined) data[time] = {};\n\n            if (channel.arraySyntax === true) {\n              const value = outputSource.array[stride];\n              const index = channel.indices[0] + 4 * channel.indices[1];\n              data[time][index] = value;\n            } else {\n              for (j = 0, jl = outputSource.stride; j < jl; j++) {\n                data[time][j] = outputSource.array[stride + j];\n              }\n            }\n          }\n\n          break;\n\n        case 'translate':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n\n        case 'rotate':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n\n        case 'scale':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n      }\n\n      const keyframes = prepareAnimationData(data, defaultMatrix);\n      const animation = {\n        name: object3D.uuid,\n        keyframes: keyframes\n      };\n      return animation;\n    }\n\n    function prepareAnimationData(data, defaultMatrix) {\n      const keyframes = []; // transfer data into a sortable array\n\n      for (const time in data) {\n        keyframes.push({\n          time: parseFloat(time),\n          value: data[time]\n        });\n      } // ensure keyframes are sorted by time\n\n\n      keyframes.sort(ascending); // now we clean up all animation data, so we can use them for keyframe tracks\n\n      for (let i = 0; i < 16; i++) {\n        transformAnimationData(keyframes, i, defaultMatrix.elements[i]);\n      }\n\n      return keyframes; // array sort function\n\n      function ascending(a, b) {\n        return a.time - b.time;\n      }\n    }\n\n    const position = new Vector3();\n    const scale = new Vector3();\n    const quaternion = new Quaternion();\n\n    function createKeyframeTracks(animation, tracks) {\n      const keyframes = animation.keyframes;\n      const name = animation.name;\n      const times = [];\n      const positionData = [];\n      const quaternionData = [];\n      const scaleData = [];\n\n      for (let i = 0, l = keyframes.length; i < l; i++) {\n        const keyframe = keyframes[i];\n        const time = keyframe.time;\n        const value = keyframe.value;\n        matrix.fromArray(value).transpose();\n        matrix.decompose(position, quaternion, scale);\n        times.push(time);\n        positionData.push(position.x, position.y, position.z);\n        quaternionData.push(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n        scaleData.push(scale.x, scale.y, scale.z);\n      }\n\n      if (positionData.length > 0) tracks.push(new VectorKeyframeTrack(name + '.position', times, positionData));\n\n      if (quaternionData.length > 0) {\n        tracks.push(new QuaternionKeyframeTrack(name + '.quaternion', times, quaternionData));\n      }\n\n      if (scaleData.length > 0) tracks.push(new VectorKeyframeTrack(name + '.scale', times, scaleData));\n      return tracks;\n    }\n\n    function transformAnimationData(keyframes, property, defaultValue) {\n      let keyframe;\n      let empty = true;\n      let i, l; // check, if values of a property are missing in our keyframes\n\n      for (i = 0, l = keyframes.length; i < l; i++) {\n        keyframe = keyframes[i];\n\n        if (keyframe.value[property] === undefined) {\n          keyframe.value[property] = null; // mark as missing\n        } else {\n          empty = false;\n        }\n      }\n\n      if (empty === true) {\n        // no values at all, so we set a default value\n        for (i = 0, l = keyframes.length; i < l; i++) {\n          keyframe = keyframes[i];\n          keyframe.value[property] = defaultValue;\n        }\n      } else {\n        // filling gaps\n        createMissingKeyframes(keyframes, property);\n      }\n    }\n\n    function createMissingKeyframes(keyframes, property) {\n      let prev, next;\n\n      for (let i = 0, l = keyframes.length; i < l; i++) {\n        const keyframe = keyframes[i];\n\n        if (keyframe.value[property] === null) {\n          prev = getPrev(keyframes, i, property);\n          next = getNext(keyframes, i, property);\n\n          if (prev === null) {\n            keyframe.value[property] = next.value[property];\n            continue;\n          }\n\n          if (next === null) {\n            keyframe.value[property] = prev.value[property];\n            continue;\n          }\n\n          interpolate(keyframe, prev, next, property);\n        }\n      }\n    }\n\n    function getPrev(keyframes, i, property) {\n      while (i >= 0) {\n        const keyframe = keyframes[i];\n        if (keyframe.value[property] !== null) return keyframe;\n        i--;\n      }\n\n      return null;\n    }\n\n    function getNext(keyframes, i, property) {\n      while (i < keyframes.length) {\n        const keyframe = keyframes[i];\n        if (keyframe.value[property] !== null) return keyframe;\n        i++;\n      }\n\n      return null;\n    }\n\n    function interpolate(key, prev, next, property) {\n      if (next.time - prev.time === 0) {\n        key.value[property] = prev.value[property];\n        return;\n      }\n\n      key.value[property] = (key.time - prev.time) * (next.value[property] - prev.value[property]) / (next.time - prev.time) + prev.value[property];\n    } // animation clips\n\n\n    function parseAnimationClip(xml) {\n      const data = {\n        name: xml.getAttribute('id') || 'default',\n        start: parseFloat(xml.getAttribute('start') || 0),\n        end: parseFloat(xml.getAttribute('end') || 0),\n        animations: []\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'instance_animation':\n            data.animations.push(parseId(child.getAttribute('url')));\n            break;\n        }\n      }\n\n      library.clips[xml.getAttribute('id')] = data;\n    }\n\n    function buildAnimationClip(data) {\n      const tracks = [];\n      const name = data.name;\n      const duration = data.end - data.start || -1;\n      const animations = data.animations;\n\n      for (let i = 0, il = animations.length; i < il; i++) {\n        const animationTracks = getAnimation(animations[i]);\n\n        for (let j = 0, jl = animationTracks.length; j < jl; j++) {\n          tracks.push(animationTracks[j]);\n        }\n      }\n\n      return new AnimationClip(name, duration, tracks);\n    }\n\n    function getAnimationClip(id) {\n      return getBuild(library.clips[id], buildAnimationClip);\n    } // controller\n\n\n    function parseController(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'skin':\n            // there is exactly one skin per controller\n            data.id = parseId(child.getAttribute('source'));\n            data.skin = parseSkin(child);\n            break;\n\n          case 'morph':\n            data.id = parseId(child.getAttribute('source'));\n            console.warn('THREE.ColladaLoader: Morph target animation not supported yet.');\n            break;\n        }\n      }\n\n      library.controllers[xml.getAttribute('id')] = data;\n    }\n\n    function parseSkin(xml) {\n      const data = {\n        sources: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'bind_shape_matrix':\n            data.bindShapeMatrix = parseFloats(child.textContent);\n            break;\n\n          case 'source':\n            const id = child.getAttribute('id');\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'joints':\n            data.joints = parseJoints(child);\n            break;\n\n          case 'vertex_weights':\n            data.vertexWeights = parseVertexWeights(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseJoints(xml) {\n      const data = {\n        inputs: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            const semantic = child.getAttribute('semantic');\n            const id = parseId(child.getAttribute('source'));\n            data.inputs[semantic] = id;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseVertexWeights(xml) {\n      const data = {\n        inputs: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            const semantic = child.getAttribute('semantic');\n            const id = parseId(child.getAttribute('source'));\n            const offset = parseInt(child.getAttribute('offset'));\n            data.inputs[semantic] = {\n              id: id,\n              offset: offset\n            };\n            break;\n\n          case 'vcount':\n            data.vcount = parseInts(child.textContent);\n            break;\n\n          case 'v':\n            data.v = parseInts(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildController(data) {\n      const build = {\n        id: data.id\n      };\n      const geometry = library.geometries[build.id];\n\n      if (data.skin !== undefined) {\n        build.skin = buildSkin(data.skin); // we enhance the 'sources' property of the corresponding geometry with our skin data\n\n        geometry.sources.skinIndices = build.skin.indices;\n        geometry.sources.skinWeights = build.skin.weights;\n      }\n\n      return build;\n    }\n\n    function buildSkin(data) {\n      const BONE_LIMIT = 4;\n      const build = {\n        joints: [],\n        // this must be an array to preserve the joint order\n        indices: {\n          array: [],\n          stride: BONE_LIMIT\n        },\n        weights: {\n          array: [],\n          stride: BONE_LIMIT\n        }\n      };\n      const sources = data.sources;\n      const vertexWeights = data.vertexWeights;\n      const vcount = vertexWeights.vcount;\n      const v = vertexWeights.v;\n      const jointOffset = vertexWeights.inputs.JOINT.offset;\n      const weightOffset = vertexWeights.inputs.WEIGHT.offset;\n      const jointSource = data.sources[data.joints.inputs.JOINT];\n      const inverseSource = data.sources[data.joints.inputs.INV_BIND_MATRIX];\n      const weights = sources[vertexWeights.inputs.WEIGHT.id].array;\n      let stride = 0;\n      let i, j, l; // procces skin data for each vertex\n\n      for (i = 0, l = vcount.length; i < l; i++) {\n        const jointCount = vcount[i]; // this is the amount of joints that affect a single vertex\n\n        const vertexSkinData = [];\n\n        for (j = 0; j < jointCount; j++) {\n          const skinIndex = v[stride + jointOffset];\n          const weightId = v[stride + weightOffset];\n          const skinWeight = weights[weightId];\n          vertexSkinData.push({\n            index: skinIndex,\n            weight: skinWeight\n          });\n          stride += 2;\n        } // we sort the joints in descending order based on the weights.\n        // this ensures, we only procced the most important joints of the vertex\n\n\n        vertexSkinData.sort(descending); // now we provide for each vertex a set of four index and weight values.\n        // the order of the skin data matches the order of vertices\n\n        for (j = 0; j < BONE_LIMIT; j++) {\n          const d = vertexSkinData[j];\n\n          if (d !== undefined) {\n            build.indices.array.push(d.index);\n            build.weights.array.push(d.weight);\n          } else {\n            build.indices.array.push(0);\n            build.weights.array.push(0);\n          }\n        }\n      } // setup bind matrix\n\n\n      if (data.bindShapeMatrix) {\n        build.bindMatrix = new Matrix4().fromArray(data.bindShapeMatrix).transpose();\n      } else {\n        build.bindMatrix = new Matrix4().identity();\n      } // process bones and inverse bind matrix data\n\n\n      for (i = 0, l = jointSource.array.length; i < l; i++) {\n        const name = jointSource.array[i];\n        const boneInverse = new Matrix4().fromArray(inverseSource.array, i * inverseSource.stride).transpose();\n        build.joints.push({\n          name: name,\n          boneInverse: boneInverse\n        });\n      }\n\n      return build; // array sort function\n\n      function descending(a, b) {\n        return b.weight - a.weight;\n      }\n    }\n\n    function getController(id) {\n      return getBuild(library.controllers[id], buildController);\n    } // image\n\n\n    function parseImage(xml) {\n      const data = {\n        init_from: getElementsByTagName(xml, 'init_from')[0].textContent\n      };\n      library.images[xml.getAttribute('id')] = data;\n    }\n\n    function buildImage(data) {\n      if (data.build !== undefined) return data.build;\n      return data.init_from;\n    }\n\n    function getImage(id) {\n      const data = library.images[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildImage);\n      }\n\n      console.warn(\"THREE.ColladaLoader: Couldn't find image with ID:\", id);\n      return null;\n    } // effect\n\n\n    function parseEffect(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'profile_COMMON':\n            data.profile = parseEffectProfileCOMMON(child);\n            break;\n        }\n      }\n\n      library.effects[xml.getAttribute('id')] = data;\n    }\n\n    function parseEffectProfileCOMMON(xml) {\n      const data = {\n        surfaces: {},\n        samplers: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'newparam':\n            parseEffectNewparam(child, data);\n            break;\n\n          case 'technique':\n            data.technique = parseEffectTechnique(child);\n            break;\n\n          case 'extra':\n            data.extra = parseEffectExtra(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectNewparam(xml, data) {\n      const sid = xml.getAttribute('sid');\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'surface':\n            data.surfaces[sid] = parseEffectSurface(child);\n            break;\n\n          case 'sampler2D':\n            data.samplers[sid] = parseEffectSampler(child);\n            break;\n        }\n      }\n    }\n\n    function parseEffectSurface(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'init_from':\n            data.init_from = child.textContent;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectSampler(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'source':\n            data.source = child.textContent;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectTechnique(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'constant':\n          case 'lambert':\n          case 'blinn':\n          case 'phong':\n            data.type = child.nodeName;\n            data.parameters = parseEffectParameters(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameters(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'emission':\n          case 'diffuse':\n          case 'specular':\n          case 'bump':\n          case 'ambient':\n          case 'shininess':\n          case 'transparency':\n            data[child.nodeName] = parseEffectParameter(child);\n            break;\n\n          case 'transparent':\n            data[child.nodeName] = {\n              opaque: child.getAttribute('opaque'),\n              data: parseEffectParameter(child)\n            };\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameter(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'color':\n            data[child.nodeName] = parseFloats(child.textContent);\n            break;\n\n          case 'float':\n            data[child.nodeName] = parseFloat(child.textContent);\n            break;\n\n          case 'texture':\n            data[child.nodeName] = {\n              id: child.getAttribute('texture'),\n              extra: parseEffectParameterTexture(child)\n            };\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameterTexture(xml) {\n      const data = {\n        technique: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'extra':\n            parseEffectParameterTextureExtra(child, data);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameterTextureExtra(xml, data) {\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique':\n            parseEffectParameterTextureExtraTechnique(child, data);\n            break;\n        }\n      }\n    }\n\n    function parseEffectParameterTextureExtraTechnique(xml, data) {\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'repeatU':\n          case 'repeatV':\n          case 'offsetU':\n          case 'offsetV':\n            data.technique[child.nodeName] = parseFloat(child.textContent);\n            break;\n\n          case 'wrapU':\n          case 'wrapV':\n            // some files have values for wrapU/wrapV which become NaN via parseInt\n            if (child.textContent.toUpperCase() === 'TRUE') {\n              data.technique[child.nodeName] = 1;\n            } else if (child.textContent.toUpperCase() === 'FALSE') {\n              data.technique[child.nodeName] = 0;\n            } else {\n              data.technique[child.nodeName] = parseInt(child.textContent);\n            }\n\n            break;\n        }\n      }\n    }\n\n    function parseEffectExtra(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique':\n            data.technique = parseEffectExtraTechnique(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectExtraTechnique(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'double_sided':\n            data[child.nodeName] = parseInt(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildEffect(data) {\n      return data;\n    }\n\n    function getEffect(id) {\n      return getBuild(library.effects[id], buildEffect);\n    } // material\n\n\n    function parseMaterial(xml) {\n      const data = {\n        name: xml.getAttribute('name')\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'instance_effect':\n            data.url = parseId(child.getAttribute('url'));\n            break;\n        }\n      }\n\n      library.materials[xml.getAttribute('id')] = data;\n    }\n\n    function getTextureLoader(image) {\n      let loader;\n      let extension = image.slice((image.lastIndexOf('.') - 1 >>> 0) + 2); // http://www.jstips.co/en/javascript/get-file-extension/\n\n      extension = extension.toLowerCase();\n\n      switch (extension) {\n        case 'tga':\n          loader = tgaLoader;\n          break;\n\n        default:\n          loader = textureLoader;\n      }\n\n      return loader;\n    }\n\n    function buildMaterial(data) {\n      const effect = getEffect(data.url);\n      const technique = effect.profile.technique;\n      const extra = effect.profile.extra;\n      let material;\n\n      switch (technique.type) {\n        case 'phong':\n        case 'blinn':\n          material = new MeshPhongMaterial();\n          break;\n\n        case 'lambert':\n          material = new MeshLambertMaterial();\n          break;\n\n        default:\n          material = new MeshBasicMaterial();\n          break;\n      }\n\n      material.name = data.name || '';\n\n      function getTexture(textureObject) {\n        const sampler = effect.profile.samplers[textureObject.id];\n        let image = null; // get image\n\n        if (sampler !== undefined) {\n          const surface = effect.profile.surfaces[sampler.source];\n          image = getImage(surface.init_from);\n        } else {\n          console.warn('THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).');\n          image = getImage(textureObject.id);\n        } // create texture if image is avaiable\n\n\n        if (image !== null) {\n          const loader = getTextureLoader(image);\n\n          if (loader !== undefined) {\n            const texture = loader.load(image);\n            const extra = textureObject.extra;\n\n            if (extra !== undefined && extra.technique !== undefined && isEmpty(extra.technique) === false) {\n              const technique = extra.technique;\n              texture.wrapS = technique.wrapU ? RepeatWrapping : ClampToEdgeWrapping;\n              texture.wrapT = technique.wrapV ? RepeatWrapping : ClampToEdgeWrapping;\n              texture.offset.set(technique.offsetU || 0, technique.offsetV || 0);\n              texture.repeat.set(technique.repeatU || 1, technique.repeatV || 1);\n            } else {\n              texture.wrapS = RepeatWrapping;\n              texture.wrapT = RepeatWrapping;\n            }\n\n            return texture;\n          } else {\n            console.warn('THREE.ColladaLoader: Loader for texture %s not found.', image);\n            return null;\n          }\n        } else {\n          console.warn(\"THREE.ColladaLoader: Couldn't create texture with ID:\", textureObject.id);\n          return null;\n        }\n      }\n\n      const parameters = technique.parameters;\n\n      for (const key in parameters) {\n        const parameter = parameters[key];\n\n        switch (key) {\n          case 'diffuse':\n            if (parameter.color) material.color.fromArray(parameter.color);\n            if (parameter.texture) material.map = getTexture(parameter.texture);\n            break;\n\n          case 'specular':\n            if (parameter.color && material.specular) material.specular.fromArray(parameter.color);\n            if (parameter.texture) material.specularMap = getTexture(parameter.texture);\n            break;\n\n          case 'bump':\n            if (parameter.texture) material.normalMap = getTexture(parameter.texture);\n            break;\n\n          case 'ambient':\n            if (parameter.texture) material.lightMap = getTexture(parameter.texture);\n            break;\n\n          case 'shininess':\n            if (parameter.float && material.shininess) material.shininess = parameter.float;\n            break;\n\n          case 'emission':\n            if (parameter.color && material.emissive) material.emissive.fromArray(parameter.color);\n            if (parameter.texture) material.emissiveMap = getTexture(parameter.texture);\n            break;\n        }\n      } //\n\n\n      let transparent = parameters['transparent'];\n      let transparency = parameters['transparency']; // <transparency> does not exist but <transparent>\n\n      if (transparency === undefined && transparent) {\n        transparency = {\n          float: 1\n        };\n      } // <transparent> does not exist but <transparency>\n\n\n      if (transparent === undefined && transparency) {\n        transparent = {\n          opaque: 'A_ONE',\n          data: {\n            color: [1, 1, 1, 1]\n          }\n        };\n      }\n\n      if (transparent && transparency) {\n        // handle case if a texture exists but no color\n        if (transparent.data.texture) {\n          // we do not set an alpha map (see #13792)\n          material.transparent = true;\n        } else {\n          const color = transparent.data.color;\n\n          switch (transparent.opaque) {\n            case 'A_ONE':\n              material.opacity = color[3] * transparency.float;\n              break;\n\n            case 'RGB_ZERO':\n              material.opacity = 1 - color[0] * transparency.float;\n              break;\n\n            case 'A_ZERO':\n              material.opacity = 1 - color[3] * transparency.float;\n              break;\n\n            case 'RGB_ONE':\n              material.opacity = color[0] * transparency.float;\n              break;\n\n            default:\n              console.warn('THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.', transparent.opaque);\n          }\n\n          if (material.opacity < 1) material.transparent = true;\n        }\n      } //\n\n\n      if (extra !== undefined && extra.technique !== undefined && extra.technique.double_sided === 1) {\n        material.side = DoubleSide;\n      }\n\n      return material;\n    }\n\n    function getMaterial(id) {\n      return getBuild(library.materials[id], buildMaterial);\n    } // camera\n\n\n    function parseCamera(xml) {\n      const data = {\n        name: xml.getAttribute('name')\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'optics':\n            data.optics = parseCameraOptics(child);\n            break;\n        }\n      }\n\n      library.cameras[xml.getAttribute('id')] = data;\n    }\n\n    function parseCameraOptics(xml) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            return parseCameraTechnique(child);\n        }\n      }\n\n      return {};\n    }\n\n    function parseCameraTechnique(xml) {\n      const data = {};\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'perspective':\n          case 'orthographic':\n            data.technique = child.nodeName;\n            data.parameters = parseCameraParameters(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseCameraParameters(xml) {\n      const data = {};\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'xfov':\n          case 'yfov':\n          case 'xmag':\n          case 'ymag':\n          case 'znear':\n          case 'zfar':\n          case 'aspect_ratio':\n            data[child.nodeName] = parseFloat(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildCamera(data) {\n      let camera;\n\n      switch (data.optics.technique) {\n        case 'perspective':\n          camera = new PerspectiveCamera(data.optics.parameters.yfov, data.optics.parameters.aspect_ratio, data.optics.parameters.znear, data.optics.parameters.zfar);\n          break;\n\n        case 'orthographic':\n          let ymag = data.optics.parameters.ymag;\n          let xmag = data.optics.parameters.xmag;\n          const aspectRatio = data.optics.parameters.aspect_ratio;\n          xmag = xmag === undefined ? ymag * aspectRatio : xmag;\n          ymag = ymag === undefined ? xmag / aspectRatio : ymag;\n          xmag *= 0.5;\n          ymag *= 0.5;\n          camera = new OrthographicCamera(-xmag, xmag, ymag, -ymag, // left, right, top, bottom\n          data.optics.parameters.znear, data.optics.parameters.zfar);\n          break;\n\n        default:\n          camera = new PerspectiveCamera();\n          break;\n      }\n\n      camera.name = data.name || '';\n      return camera;\n    }\n\n    function getCamera(id) {\n      const data = library.cameras[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildCamera);\n      }\n\n      console.warn(\"THREE.ColladaLoader: Couldn't find camera with ID:\", id);\n      return null;\n    } // light\n\n\n    function parseLight(xml) {\n      let data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            data = parseLightTechnique(child);\n            break;\n        }\n      }\n\n      library.lights[xml.getAttribute('id')] = data;\n    }\n\n    function parseLightTechnique(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'directional':\n          case 'point':\n          case 'spot':\n          case 'ambient':\n            data.technique = child.nodeName;\n            data.parameters = parseLightParameters(child);\n        }\n      }\n\n      return data;\n    }\n\n    function parseLightParameters(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'color':\n            const array = parseFloats(child.textContent);\n            data.color = new Color().fromArray(array);\n            break;\n\n          case 'falloff_angle':\n            data.falloffAngle = parseFloat(child.textContent);\n            break;\n\n          case 'quadratic_attenuation':\n            const f = parseFloat(child.textContent);\n            data.distance = f ? Math.sqrt(1 / f) : 0;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildLight(data) {\n      let light;\n\n      switch (data.technique) {\n        case 'directional':\n          light = new DirectionalLight();\n          break;\n\n        case 'point':\n          light = new PointLight();\n          break;\n\n        case 'spot':\n          light = new SpotLight();\n          break;\n\n        case 'ambient':\n          light = new AmbientLight();\n          break;\n      }\n\n      if (data.parameters.color) light.color.copy(data.parameters.color);\n      if (data.parameters.distance) light.distance = data.parameters.distance;\n      return light;\n    }\n\n    function getLight(id) {\n      const data = library.lights[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildLight);\n      }\n\n      console.warn(\"THREE.ColladaLoader: Couldn't find light with ID:\", id);\n      return null;\n    } // geometry\n\n\n    function parseGeometry(xml) {\n      const data = {\n        name: xml.getAttribute('name'),\n        sources: {},\n        vertices: {},\n        primitives: []\n      };\n      const mesh = getElementsByTagName(xml, 'mesh')[0]; // the following tags inside geometry are not supported yet (see https://github.com/mrdoob/three.js/pull/12606): convex_mesh, spline, brep\n\n      if (mesh === undefined) return;\n\n      for (let i = 0; i < mesh.childNodes.length; i++) {\n        const child = mesh.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        const id = child.getAttribute('id');\n\n        switch (child.nodeName) {\n          case 'source':\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'vertices':\n            // data.sources[ id ] = data.sources[ parseId( getElementsByTagName( child, 'input' )[ 0 ].getAttribute( 'source' ) ) ];\n            data.vertices = parseGeometryVertices(child);\n            break;\n\n          case 'polygons':\n            console.warn('THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName);\n            break;\n\n          case 'lines':\n          case 'linestrips':\n          case 'polylist':\n          case 'triangles':\n            data.primitives.push(parseGeometryPrimitive(child));\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      library.geometries[xml.getAttribute('id')] = data;\n    }\n\n    function parseSource(xml) {\n      const data = {\n        array: [],\n        stride: 3\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'float_array':\n            data.array = parseFloats(child.textContent);\n            break;\n\n          case 'Name_array':\n            data.array = parseStrings(child.textContent);\n            break;\n\n          case 'technique_common':\n            const accessor = getElementsByTagName(child, 'accessor')[0];\n\n            if (accessor !== undefined) {\n              data.stride = parseInt(accessor.getAttribute('stride'));\n            }\n\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseGeometryVertices(xml) {\n      const data = {};\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        data[child.getAttribute('semantic')] = parseId(child.getAttribute('source'));\n      }\n\n      return data;\n    }\n\n    function parseGeometryPrimitive(xml) {\n      const primitive = {\n        type: xml.nodeName,\n        material: xml.getAttribute('material'),\n        count: parseInt(xml.getAttribute('count')),\n        inputs: {},\n        stride: 0,\n        hasUV: false\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            const id = parseId(child.getAttribute('source'));\n            const semantic = child.getAttribute('semantic');\n            const offset = parseInt(child.getAttribute('offset'));\n            const set = parseInt(child.getAttribute('set'));\n            const inputname = set > 0 ? semantic + set : semantic;\n            primitive.inputs[inputname] = {\n              id: id,\n              offset: offset\n            };\n            primitive.stride = Math.max(primitive.stride, offset + 1);\n            if (semantic === 'TEXCOORD') primitive.hasUV = true;\n            break;\n\n          case 'vcount':\n            primitive.vcount = parseInts(child.textContent);\n            break;\n\n          case 'p':\n            primitive.p = parseInts(child.textContent);\n            break;\n        }\n      }\n\n      return primitive;\n    }\n\n    function groupPrimitives(primitives) {\n      const build = {};\n\n      for (let i = 0; i < primitives.length; i++) {\n        const primitive = primitives[i];\n        if (build[primitive.type] === undefined) build[primitive.type] = [];\n        build[primitive.type].push(primitive);\n      }\n\n      return build;\n    }\n\n    function checkUVCoordinates(primitives) {\n      let count = 0;\n\n      for (let i = 0, l = primitives.length; i < l; i++) {\n        const primitive = primitives[i];\n\n        if (primitive.hasUV === true) {\n          count++;\n        }\n      }\n\n      if (count > 0 && count < primitives.length) {\n        primitives.uvsNeedsFix = true;\n      }\n    }\n\n    function buildGeometry(data) {\n      const build = {};\n      const sources = data.sources;\n      const vertices = data.vertices;\n      const primitives = data.primitives;\n      if (primitives.length === 0) return {}; // our goal is to create one buffer geometry for a single type of primitives\n      // first, we group all primitives by their type\n\n      const groupedPrimitives = groupPrimitives(primitives);\n\n      for (const type in groupedPrimitives) {\n        const primitiveType = groupedPrimitives[type]; // second, ensure consistent uv coordinates for each type of primitives (polylist,triangles or lines)\n\n        checkUVCoordinates(primitiveType); // third, create a buffer geometry for each type of primitives\n\n        build[type] = buildGeometryType(primitiveType, sources, vertices);\n      }\n\n      return build;\n    }\n\n    function buildGeometryType(primitives, sources, vertices) {\n      const build = {};\n      const position = {\n        array: [],\n        stride: 0\n      };\n      const normal = {\n        array: [],\n        stride: 0\n      };\n      const uv = {\n        array: [],\n        stride: 0\n      };\n      const uv2 = {\n        array: [],\n        stride: 0\n      };\n      const color = {\n        array: [],\n        stride: 0\n      };\n      const skinIndex = {\n        array: [],\n        stride: 4\n      };\n      const skinWeight = {\n        array: [],\n        stride: 4\n      };\n      const geometry = new BufferGeometry();\n      const materialKeys = [];\n      let start = 0;\n\n      for (let p = 0; p < primitives.length; p++) {\n        const primitive = primitives[p];\n        const inputs = primitive.inputs; // groups\n\n        let count = 0;\n\n        switch (primitive.type) {\n          case 'lines':\n          case 'linestrips':\n            count = primitive.count * 2;\n            break;\n\n          case 'triangles':\n            count = primitive.count * 3;\n            break;\n\n          case 'polylist':\n            for (let g = 0; g < primitive.count; g++) {\n              const vc = primitive.vcount[g];\n\n              switch (vc) {\n                case 3:\n                  count += 3; // single triangle\n\n                  break;\n\n                case 4:\n                  count += 6; // quad, subdivided into two triangles\n\n                  break;\n\n                default:\n                  count += (vc - 2) * 3; // polylist with more than four vertices\n\n                  break;\n              }\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.ColladaLoader: Unknow primitive type:', primitive.type);\n        }\n\n        geometry.addGroup(start, count, p);\n        start += count; // material\n\n        if (primitive.material) {\n          materialKeys.push(primitive.material);\n        } // geometry data\n\n\n        for (const name in inputs) {\n          const input = inputs[name];\n\n          switch (name) {\n            case 'VERTEX':\n              for (const key in vertices) {\n                const id = vertices[key];\n\n                switch (key) {\n                  case 'POSITION':\n                    const prevLength = position.array.length;\n                    buildGeometryData(primitive, sources[id], input.offset, position.array);\n                    position.stride = sources[id].stride;\n\n                    if (sources.skinWeights && sources.skinIndices) {\n                      buildGeometryData(primitive, sources.skinIndices, input.offset, skinIndex.array);\n                      buildGeometryData(primitive, sources.skinWeights, input.offset, skinWeight.array);\n                    } // see #3803\n\n\n                    if (primitive.hasUV === false && primitives.uvsNeedsFix === true) {\n                      const count = (position.array.length - prevLength) / position.stride;\n\n                      for (let i = 0; i < count; i++) {\n                        // fill missing uv coordinates\n                        uv.array.push(0, 0);\n                      }\n                    }\n\n                    break;\n\n                  case 'NORMAL':\n                    buildGeometryData(primitive, sources[id], input.offset, normal.array);\n                    normal.stride = sources[id].stride;\n                    break;\n\n                  case 'COLOR':\n                    buildGeometryData(primitive, sources[id], input.offset, color.array);\n                    color.stride = sources[id].stride;\n                    break;\n\n                  case 'TEXCOORD':\n                    buildGeometryData(primitive, sources[id], input.offset, uv.array);\n                    uv.stride = sources[id].stride;\n                    break;\n\n                  case 'TEXCOORD1':\n                    buildGeometryData(primitive, sources[id], input.offset, uv2.array);\n                    uv.stride = sources[id].stride;\n                    break;\n\n                  default:\n                    console.warn('THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.', key);\n                }\n              }\n\n              break;\n\n            case 'NORMAL':\n              buildGeometryData(primitive, sources[input.id], input.offset, normal.array);\n              normal.stride = sources[input.id].stride;\n              break;\n\n            case 'COLOR':\n              buildGeometryData(primitive, sources[input.id], input.offset, color.array);\n              color.stride = sources[input.id].stride;\n              break;\n\n            case 'TEXCOORD':\n              buildGeometryData(primitive, sources[input.id], input.offset, uv.array);\n              uv.stride = sources[input.id].stride;\n              break;\n\n            case 'TEXCOORD1':\n              buildGeometryData(primitive, sources[input.id], input.offset, uv2.array);\n              uv2.stride = sources[input.id].stride;\n              break;\n          }\n        }\n      } // build geometry\n\n\n      if (position.array.length > 0) {\n        geometry.setAttribute('position', new Float32BufferAttribute(position.array, position.stride));\n      }\n\n      if (normal.array.length > 0) {\n        geometry.setAttribute('normal', new Float32BufferAttribute(normal.array, normal.stride));\n      }\n\n      if (color.array.length > 0) geometry.setAttribute('color', new Float32BufferAttribute(color.array, color.stride));\n      if (uv.array.length > 0) geometry.setAttribute('uv', new Float32BufferAttribute(uv.array, uv.stride));\n      if (uv2.array.length > 0) geometry.setAttribute('uv2', new Float32BufferAttribute(uv2.array, uv2.stride));\n\n      if (skinIndex.array.length > 0) {\n        geometry.setAttribute('skinIndex', new Float32BufferAttribute(skinIndex.array, skinIndex.stride));\n      }\n\n      if (skinWeight.array.length > 0) {\n        geometry.setAttribute('skinWeight', new Float32BufferAttribute(skinWeight.array, skinWeight.stride));\n      }\n\n      build.data = geometry;\n      build.type = primitives[0].type;\n      build.materialKeys = materialKeys;\n      return build;\n    }\n\n    function buildGeometryData(primitive, source, offset, array) {\n      const indices = primitive.p;\n      const stride = primitive.stride;\n      const vcount = primitive.vcount;\n\n      function pushVector(i) {\n        let index = indices[i + offset] * sourceStride;\n        const length = index + sourceStride;\n\n        for (; index < length; index++) {\n          array.push(sourceArray[index]);\n        }\n      }\n\n      const sourceArray = source.array;\n      const sourceStride = source.stride;\n\n      if (primitive.vcount !== undefined) {\n        let index = 0;\n\n        for (let i = 0, l = vcount.length; i < l; i++) {\n          const count = vcount[i];\n\n          if (count === 4) {\n            const a = index + stride * 0;\n            const b = index + stride * 1;\n            const c = index + stride * 2;\n            const d = index + stride * 3;\n            pushVector(a);\n            pushVector(b);\n            pushVector(d);\n            pushVector(b);\n            pushVector(c);\n            pushVector(d);\n          } else if (count === 3) {\n            const a = index + stride * 0;\n            const b = index + stride * 1;\n            const c = index + stride * 2;\n            pushVector(a);\n            pushVector(b);\n            pushVector(c);\n          } else if (count > 4) {\n            for (let k = 1, kl = count - 2; k <= kl; k++) {\n              const a = index + stride * 0;\n              const b = index + stride * k;\n              const c = index + stride * (k + 1);\n              pushVector(a);\n              pushVector(b);\n              pushVector(c);\n            }\n          }\n\n          index += stride * count;\n        }\n      } else {\n        for (let i = 0, l = indices.length; i < l; i += stride) {\n          pushVector(i);\n        }\n      }\n    }\n\n    function getGeometry(id) {\n      return getBuild(library.geometries[id], buildGeometry);\n    } // kinematics\n\n\n    function parseKinematicsModel(xml) {\n      const data = {\n        name: xml.getAttribute('name') || '',\n        joints: {},\n        links: []\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            parseKinematicsTechniqueCommon(child, data);\n            break;\n        }\n      }\n\n      library.kinematicsModels[xml.getAttribute('id')] = data;\n    }\n\n    function buildKinematicsModel(data) {\n      if (data.build !== undefined) return data.build;\n      return data;\n    }\n\n    function getKinematicsModel(id) {\n      return getBuild(library.kinematicsModels[id], buildKinematicsModel);\n    }\n\n    function parseKinematicsTechniqueCommon(xml, data) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'joint':\n            data.joints[child.getAttribute('sid')] = parseKinematicsJoint(child);\n            break;\n\n          case 'link':\n            data.links.push(parseKinematicsLink(child));\n            break;\n        }\n      }\n    }\n\n    function parseKinematicsJoint(xml) {\n      let data;\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'prismatic':\n          case 'revolute':\n            data = parseKinematicsJointParameter(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsJointParameter(xml) {\n      const data = {\n        sid: xml.getAttribute('sid'),\n        name: xml.getAttribute('name') || '',\n        axis: new Vector3(),\n        limits: {\n          min: 0,\n          max: 0\n        },\n        type: xml.nodeName,\n        static: false,\n        zeroPosition: 0,\n        middlePosition: 0\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'axis':\n            const array = parseFloats(child.textContent);\n            data.axis.fromArray(array);\n            break;\n\n          case 'limits':\n            const max = child.getElementsByTagName('max')[0];\n            const min = child.getElementsByTagName('min')[0];\n            data.limits.max = parseFloat(max.textContent);\n            data.limits.min = parseFloat(min.textContent);\n            break;\n        }\n      } // if min is equal to or greater than max, consider the joint static\n\n\n      if (data.limits.min >= data.limits.max) {\n        data.static = true;\n      } // calculate middle position\n\n\n      data.middlePosition = (data.limits.min + data.limits.max) / 2.0;\n      return data;\n    }\n\n    function parseKinematicsLink(xml) {\n      const data = {\n        sid: xml.getAttribute('sid'),\n        name: xml.getAttribute('name') || '',\n        attachments: [],\n        transforms: []\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'attachment_full':\n            data.attachments.push(parseKinematicsAttachment(child));\n            break;\n\n          case 'matrix':\n          case 'translate':\n          case 'rotate':\n            data.transforms.push(parseKinematicsTransform(child));\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsAttachment(xml) {\n      const data = {\n        joint: xml.getAttribute('joint').split('/').pop(),\n        transforms: [],\n        links: []\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'link':\n            data.links.push(parseKinematicsLink(child));\n            break;\n\n          case 'matrix':\n          case 'translate':\n          case 'rotate':\n            data.transforms.push(parseKinematicsTransform(child));\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsTransform(xml) {\n      const data = {\n        type: xml.nodeName\n      };\n      const array = parseFloats(xml.textContent);\n\n      switch (data.type) {\n        case 'matrix':\n          data.obj = new Matrix4();\n          data.obj.fromArray(array).transpose();\n          break;\n\n        case 'translate':\n          data.obj = new Vector3();\n          data.obj.fromArray(array);\n          break;\n\n        case 'rotate':\n          data.obj = new Vector3();\n          data.obj.fromArray(array);\n          data.angle = MathUtils.degToRad(array[3]);\n          break;\n      }\n\n      return data;\n    } // physics\n\n\n    function parsePhysicsModel(xml) {\n      const data = {\n        name: xml.getAttribute('name') || '',\n        rigidBodies: {}\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'rigid_body':\n            data.rigidBodies[child.getAttribute('name')] = {};\n            parsePhysicsRigidBody(child, data.rigidBodies[child.getAttribute('name')]);\n            break;\n        }\n      }\n\n      library.physicsModels[xml.getAttribute('id')] = data;\n    }\n\n    function parsePhysicsRigidBody(xml, data) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            parsePhysicsTechniqueCommon(child, data);\n            break;\n        }\n      }\n    }\n\n    function parsePhysicsTechniqueCommon(xml, data) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'inertia':\n            data.inertia = parseFloats(child.textContent);\n            break;\n\n          case 'mass':\n            data.mass = parseFloats(child.textContent)[0];\n            break;\n        }\n      }\n    } // scene\n\n\n    function parseKinematicsScene(xml) {\n      const data = {\n        bindJointAxis: []\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'bind_joint_axis':\n            data.bindJointAxis.push(parseKinematicsBindJointAxis(child));\n            break;\n        }\n      }\n\n      library.kinematicsScenes[parseId(xml.getAttribute('url'))] = data;\n    }\n\n    function parseKinematicsBindJointAxis(xml) {\n      const data = {\n        target: xml.getAttribute('target').split('/').pop()\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'axis':\n            const param = child.getElementsByTagName('param')[0];\n            data.axis = param.textContent;\n            const tmpJointIndex = data.axis.split('inst_').pop().split('axis')[0];\n            data.jointIndex = tmpJointIndex.substr(0, tmpJointIndex.length - 1);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildKinematicsScene(data) {\n      if (data.build !== undefined) return data.build;\n      return data;\n    }\n\n    function getKinematicsScene(id) {\n      return getBuild(library.kinematicsScenes[id], buildKinematicsScene);\n    }\n\n    function setupKinematics() {\n      const kinematicsModelId = Object.keys(library.kinematicsModels)[0];\n      const kinematicsSceneId = Object.keys(library.kinematicsScenes)[0];\n      const visualSceneId = Object.keys(library.visualScenes)[0];\n      if (kinematicsModelId === undefined || kinematicsSceneId === undefined) return;\n      const kinematicsModel = getKinematicsModel(kinematicsModelId);\n      const kinematicsScene = getKinematicsScene(kinematicsSceneId);\n      const visualScene = getVisualScene(visualSceneId);\n      const bindJointAxis = kinematicsScene.bindJointAxis;\n      const jointMap = {};\n\n      for (let i = 0, l = bindJointAxis.length; i < l; i++) {\n        const axis = bindJointAxis[i]; // the result of the following query is an element of type 'translate', 'rotate','scale' or 'matrix'\n\n        const targetElement = collada.querySelector('[sid=\"' + axis.target + '\"]');\n\n        if (targetElement) {\n          // get the parent of the transform element\n          const parentVisualElement = targetElement.parentElement; // connect the joint of the kinematics model with the element in the visual scene\n\n          connect(axis.jointIndex, parentVisualElement);\n        }\n      }\n\n      function connect(jointIndex, visualElement) {\n        const visualElementName = visualElement.getAttribute('name');\n        const joint = kinematicsModel.joints[jointIndex];\n        visualScene.traverse(function (object) {\n          if (object.name === visualElementName) {\n            jointMap[jointIndex] = {\n              object: object,\n              transforms: buildTransformList(visualElement),\n              joint: joint,\n              position: joint.zeroPosition\n            };\n          }\n        });\n      }\n\n      const m0 = new Matrix4();\n      kinematics = {\n        joints: kinematicsModel && kinematicsModel.joints,\n        getJointValue: function (jointIndex) {\n          const jointData = jointMap[jointIndex];\n\n          if (jointData) {\n            return jointData.position;\n          } else {\n            console.warn('THREE.ColladaLoader: Joint ' + jointIndex + \" doesn't exist.\");\n          }\n        },\n        setJointValue: function (jointIndex, value) {\n          const jointData = jointMap[jointIndex];\n\n          if (jointData) {\n            const joint = jointData.joint;\n\n            if (value > joint.limits.max || value < joint.limits.min) {\n              console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').');\n            } else if (joint.static) {\n              console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' is static.');\n            } else {\n              const object = jointData.object;\n              const axis = joint.axis;\n              const transforms = jointData.transforms;\n              matrix.identity(); // each update, we have to apply all transforms in the correct order\n\n              for (let i = 0; i < transforms.length; i++) {\n                const transform = transforms[i]; // if there is a connection of the transform node with a joint, apply the joint value\n\n                if (transform.sid && transform.sid.indexOf(jointIndex) !== -1) {\n                  switch (joint.type) {\n                    case 'revolute':\n                      matrix.multiply(m0.makeRotationAxis(axis, MathUtils.degToRad(value)));\n                      break;\n\n                    case 'prismatic':\n                      matrix.multiply(m0.makeTranslation(axis.x * value, axis.y * value, axis.z * value));\n                      break;\n\n                    default:\n                      console.warn('THREE.ColladaLoader: Unknown joint type: ' + joint.type);\n                      break;\n                  }\n                } else {\n                  switch (transform.type) {\n                    case 'matrix':\n                      matrix.multiply(transform.obj);\n                      break;\n\n                    case 'translate':\n                      matrix.multiply(m0.makeTranslation(transform.obj.x, transform.obj.y, transform.obj.z));\n                      break;\n\n                    case 'scale':\n                      matrix.scale(transform.obj);\n                      break;\n\n                    case 'rotate':\n                      matrix.multiply(m0.makeRotationAxis(transform.obj, transform.angle));\n                      break;\n                  }\n                }\n              }\n\n              object.matrix.copy(matrix);\n              object.matrix.decompose(object.position, object.quaternion, object.scale);\n              jointMap[jointIndex].position = value;\n            }\n          } else {\n            console.log('THREE.ColladaLoader: ' + jointIndex + ' does not exist.');\n          }\n        }\n      };\n    }\n\n    function buildTransformList(node) {\n      const transforms = [];\n      const xml = collada.querySelector('[id=\"' + node.id + '\"]');\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        let array, vector;\n\n        switch (child.nodeName) {\n          case 'matrix':\n            array = parseFloats(child.textContent);\n            const matrix = new Matrix4().fromArray(array).transpose();\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: matrix\n            });\n            break;\n\n          case 'translate':\n          case 'scale':\n            array = parseFloats(child.textContent);\n            vector = new Vector3().fromArray(array);\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: vector\n            });\n            break;\n\n          case 'rotate':\n            array = parseFloats(child.textContent);\n            vector = new Vector3().fromArray(array);\n            const angle = MathUtils.degToRad(array[3]);\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: vector,\n              angle: angle\n            });\n            break;\n        }\n      }\n\n      return transforms;\n    } // nodes\n\n\n    function prepareNodes(xml) {\n      const elements = xml.getElementsByTagName('node'); // ensure all node elements have id attributes\n\n      for (let i = 0; i < elements.length; i++) {\n        const element = elements[i];\n\n        if (element.hasAttribute('id') === false) {\n          element.setAttribute('id', generateId());\n        }\n      }\n    }\n\n    const matrix = new Matrix4();\n    const vector = new Vector3();\n\n    function parseNode(xml) {\n      const data = {\n        name: xml.getAttribute('name') || '',\n        type: xml.getAttribute('type'),\n        id: xml.getAttribute('id'),\n        sid: xml.getAttribute('sid'),\n        matrix: new Matrix4(),\n        nodes: [],\n        instanceCameras: [],\n        instanceControllers: [],\n        instanceLights: [],\n        instanceGeometries: [],\n        instanceNodes: [],\n        transforms: {}\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        let array;\n\n        switch (child.nodeName) {\n          case 'node':\n            data.nodes.push(child.getAttribute('id'));\n            parseNode(child);\n            break;\n\n          case 'instance_camera':\n            data.instanceCameras.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'instance_controller':\n            data.instanceControllers.push(parseNodeInstance(child));\n            break;\n\n          case 'instance_light':\n            data.instanceLights.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'instance_geometry':\n            data.instanceGeometries.push(parseNodeInstance(child));\n            break;\n\n          case 'instance_node':\n            data.instanceNodes.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'matrix':\n            array = parseFloats(child.textContent);\n            data.matrix.multiply(matrix.fromArray(array).transpose());\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'translate':\n            array = parseFloats(child.textContent);\n            vector.fromArray(array);\n            data.matrix.multiply(matrix.makeTranslation(vector.x, vector.y, vector.z));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'rotate':\n            array = parseFloats(child.textContent);\n            const angle = MathUtils.degToRad(array[3]);\n            data.matrix.multiply(matrix.makeRotationAxis(vector.fromArray(array), angle));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'scale':\n            array = parseFloats(child.textContent);\n            data.matrix.scale(vector.fromArray(array));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'extra':\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      if (hasNode(data.id)) {\n        console.warn('THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id);\n      } else {\n        library.nodes[data.id] = data;\n      }\n\n      return data;\n    }\n\n    function parseNodeInstance(xml) {\n      const data = {\n        id: parseId(xml.getAttribute('url')),\n        materials: {},\n        skeletons: []\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'bind_material':\n            const instances = child.getElementsByTagName('instance_material');\n\n            for (let j = 0; j < instances.length; j++) {\n              const instance = instances[j];\n              const symbol = instance.getAttribute('symbol');\n              const target = instance.getAttribute('target');\n              data.materials[symbol] = parseId(target);\n            }\n\n            break;\n\n          case 'skeleton':\n            data.skeletons.push(parseId(child.textContent));\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildSkeleton(skeletons, joints) {\n      const boneData = [];\n      const sortedBoneData = [];\n      let i, j, data; // a skeleton can have multiple root bones. collada expresses this\n      // situtation with multiple \"skeleton\" tags per controller instance\n\n      for (i = 0; i < skeletons.length; i++) {\n        const skeleton = skeletons[i];\n        let root;\n\n        if (hasNode(skeleton)) {\n          root = getNode(skeleton);\n          buildBoneHierarchy(root, joints, boneData);\n        } else if (hasVisualScene(skeleton)) {\n          // handle case where the skeleton refers to the visual scene (#13335)\n          const visualScene = library.visualScenes[skeleton];\n          const children = visualScene.children;\n\n          for (let j = 0; j < children.length; j++) {\n            const child = children[j];\n\n            if (child.type === 'JOINT') {\n              const root = getNode(child.id);\n              buildBoneHierarchy(root, joints, boneData);\n            }\n          }\n        } else {\n          console.error('THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton);\n        }\n      } // sort bone data (the order is defined in the corresponding controller)\n\n\n      for (i = 0; i < joints.length; i++) {\n        for (j = 0; j < boneData.length; j++) {\n          data = boneData[j];\n\n          if (data.bone.name === joints[i].name) {\n            sortedBoneData[i] = data;\n            data.processed = true;\n            break;\n          }\n        }\n      } // add unprocessed bone data at the end of the list\n\n\n      for (i = 0; i < boneData.length; i++) {\n        data = boneData[i];\n\n        if (data.processed === false) {\n          sortedBoneData.push(data);\n          data.processed = true;\n        }\n      } // setup arrays for skeleton creation\n\n\n      const bones = [];\n      const boneInverses = [];\n\n      for (i = 0; i < sortedBoneData.length; i++) {\n        data = sortedBoneData[i];\n        bones.push(data.bone);\n        boneInverses.push(data.boneInverse);\n      }\n\n      return new Skeleton(bones, boneInverses);\n    }\n\n    function buildBoneHierarchy(root, joints, boneData) {\n      // setup bone data from visual scene\n      root.traverse(function (object) {\n        if (object.isBone === true) {\n          let boneInverse; // retrieve the boneInverse from the controller data\n\n          for (let i = 0; i < joints.length; i++) {\n            const joint = joints[i];\n\n            if (joint.name === object.name) {\n              boneInverse = joint.boneInverse;\n              break;\n            }\n          }\n\n          if (boneInverse === undefined) {\n            // Unfortunately, there can be joints in the visual scene that are not part of the\n            // corresponding controller. In this case, we have to create a dummy boneInverse matrix\n            // for the respective bone. This bone won't affect any vertices, because there are no skin indices\n            // and weights defined for it. But we still have to add the bone to the sorted bone list in order to\n            // ensure a correct animation of the model.\n            boneInverse = new Matrix4();\n          }\n\n          boneData.push({\n            bone: object,\n            boneInverse: boneInverse,\n            processed: false\n          });\n        }\n      });\n    }\n\n    function buildNode(data) {\n      const objects = [];\n      const matrix = data.matrix;\n      const nodes = data.nodes;\n      const type = data.type;\n      const instanceCameras = data.instanceCameras;\n      const instanceControllers = data.instanceControllers;\n      const instanceLights = data.instanceLights;\n      const instanceGeometries = data.instanceGeometries;\n      const instanceNodes = data.instanceNodes; // nodes\n\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        objects.push(getNode(nodes[i]));\n      } // instance cameras\n\n\n      for (let i = 0, l = instanceCameras.length; i < l; i++) {\n        const instanceCamera = getCamera(instanceCameras[i]);\n\n        if (instanceCamera !== null) {\n          objects.push(instanceCamera.clone());\n        }\n      } // instance controllers\n\n\n      for (let i = 0, l = instanceControllers.length; i < l; i++) {\n        const instance = instanceControllers[i];\n        const controller = getController(instance.id);\n        const geometries = getGeometry(controller.id);\n        const newObjects = buildObjects(geometries, instance.materials);\n        const skeletons = instance.skeletons;\n        const joints = controller.skin.joints;\n        const skeleton = buildSkeleton(skeletons, joints);\n\n        for (let j = 0, jl = newObjects.length; j < jl; j++) {\n          const object = newObjects[j];\n\n          if (object.isSkinnedMesh) {\n            object.bind(skeleton, controller.skin.bindMatrix);\n            object.normalizeSkinWeights();\n          }\n\n          objects.push(object);\n        }\n      } // instance lights\n\n\n      for (let i = 0, l = instanceLights.length; i < l; i++) {\n        const instanceLight = getLight(instanceLights[i]);\n\n        if (instanceLight !== null) {\n          objects.push(instanceLight.clone());\n        }\n      } // instance geometries\n\n\n      for (let i = 0, l = instanceGeometries.length; i < l; i++) {\n        const instance = instanceGeometries[i]; // a single geometry instance in collada can lead to multiple object3Ds.\n        // this is the case when primitives are combined like triangles and lines\n\n        const geometries = getGeometry(instance.id);\n        const newObjects = buildObjects(geometries, instance.materials);\n\n        for (let j = 0, jl = newObjects.length; j < jl; j++) {\n          objects.push(newObjects[j]);\n        }\n      } // instance nodes\n\n\n      for (let i = 0, l = instanceNodes.length; i < l; i++) {\n        objects.push(getNode(instanceNodes[i]).clone());\n      }\n\n      let object;\n\n      if (nodes.length === 0 && objects.length === 1) {\n        object = objects[0];\n      } else {\n        object = type === 'JOINT' ? new Bone() : new Group();\n\n        for (let i = 0; i < objects.length; i++) {\n          object.add(objects[i]);\n        }\n      }\n\n      object.name = type === 'JOINT' ? data.sid : data.name;\n      object.matrix.copy(matrix);\n      object.matrix.decompose(object.position, object.quaternion, object.scale);\n      return object;\n    }\n\n    const fallbackMaterial = new MeshBasicMaterial({\n      color: 0xff00ff\n    });\n\n    function resolveMaterialBinding(keys, instanceMaterials) {\n      const materials = [];\n\n      for (let i = 0, l = keys.length; i < l; i++) {\n        const id = instanceMaterials[keys[i]];\n\n        if (id === undefined) {\n          console.warn('THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[i]);\n          materials.push(fallbackMaterial);\n        } else {\n          materials.push(getMaterial(id));\n        }\n      }\n\n      return materials;\n    }\n\n    function buildObjects(geometries, instanceMaterials) {\n      const objects = [];\n\n      for (const type in geometries) {\n        const geometry = geometries[type];\n        const materials = resolveMaterialBinding(geometry.materialKeys, instanceMaterials); // handle case if no materials are defined\n\n        if (materials.length === 0) {\n          if (type === 'lines' || type === 'linestrips') {\n            materials.push(new LineBasicMaterial());\n          } else {\n            materials.push(new MeshPhongMaterial());\n          }\n        } // regard skinning\n\n\n        const skinning = geometry.data.attributes.skinIndex !== undefined;\n\n        if (skinning) {\n          for (let i = 0, l = materials.length; i < l; i++) {\n            materials[i].skinning = true;\n          }\n        } // choose between a single or multi materials (material array)\n\n\n        const material = materials.length === 1 ? materials[0] : materials; // now create a specific 3D object\n\n        let object;\n\n        switch (type) {\n          case 'lines':\n            object = new LineSegments(geometry.data, material);\n            break;\n\n          case 'linestrips':\n            object = new Line(geometry.data, material);\n            break;\n\n          case 'triangles':\n          case 'polylist':\n            if (skinning) {\n              object = new SkinnedMesh(geometry.data, material);\n            } else {\n              object = new Mesh(geometry.data, material);\n            }\n\n            break;\n        }\n\n        objects.push(object);\n      }\n\n      return objects;\n    }\n\n    function hasNode(id) {\n      return library.nodes[id] !== undefined;\n    }\n\n    function getNode(id) {\n      return getBuild(library.nodes[id], buildNode);\n    } // visual scenes\n\n\n    function parseVisualScene(xml) {\n      const data = {\n        name: xml.getAttribute('name'),\n        children: []\n      };\n      prepareNodes(xml);\n      const elements = getElementsByTagName(xml, 'node');\n\n      for (let i = 0; i < elements.length; i++) {\n        data.children.push(parseNode(elements[i]));\n      }\n\n      library.visualScenes[xml.getAttribute('id')] = data;\n    }\n\n    function buildVisualScene(data) {\n      const group = new Group();\n      group.name = data.name;\n      const children = data.children;\n\n      for (let i = 0; i < children.length; i++) {\n        const child = children[i];\n        group.add(getNode(child.id));\n      }\n\n      return group;\n    }\n\n    function hasVisualScene(id) {\n      return library.visualScenes[id] !== undefined;\n    }\n\n    function getVisualScene(id) {\n      return getBuild(library.visualScenes[id], buildVisualScene);\n    } // scenes\n\n\n    function parseScene(xml) {\n      const instance = getElementsByTagName(xml, 'instance_visual_scene')[0];\n      return getVisualScene(parseId(instance.getAttribute('url')));\n    }\n\n    function setupAnimations() {\n      const clips = library.clips;\n\n      if (isEmpty(clips) === true) {\n        if (isEmpty(library.animations) === false) {\n          // if there are animations but no clips, we create a default clip for playback\n          const tracks = [];\n\n          for (const id in library.animations) {\n            const animationTracks = getAnimation(id);\n\n            for (let i = 0, l = animationTracks.length; i < l; i++) {\n              tracks.push(animationTracks[i]);\n            }\n          }\n\n          animations.push(new AnimationClip('default', -1, tracks));\n        }\n      } else {\n        for (const id in clips) {\n          animations.push(getAnimationClip(id));\n        }\n      }\n    } // convert the parser error element into text with each child elements text\n    // separated by new lines.\n\n\n    function parserErrorToText(parserError) {\n      let result = '';\n      const stack = [parserError];\n\n      while (stack.length) {\n        const node = stack.shift();\n\n        if (node.nodeType === Node.TEXT_NODE) {\n          result += node.textContent;\n        } else {\n          result += '\\n';\n          stack.push.apply(stack, node.childNodes);\n        }\n      }\n\n      return result.trim();\n    }\n\n    if (text.length === 0) {\n      return {\n        scene: new Scene()\n      };\n    }\n\n    const xml = new DOMParser().parseFromString(text, 'application/xml');\n    const collada = getElementsByTagName(xml, 'COLLADA')[0];\n    const parserError = xml.getElementsByTagName('parsererror')[0];\n\n    if (parserError !== undefined) {\n      // Chrome will return parser error with a div in it\n      const errorElement = getElementsByTagName(parserError, 'div')[0];\n      let errorText;\n\n      if (errorElement) {\n        errorText = errorElement.textContent;\n      } else {\n        errorText = parserErrorToText(parserError);\n      }\n\n      console.error('THREE.ColladaLoader: Failed to parse collada file.\\n', errorText);\n      return null;\n    } // metadata\n\n\n    const version = collada.getAttribute('version');\n    console.log('THREE.ColladaLoader: File version', version);\n    const asset = parseAsset(getElementsByTagName(collada, 'asset')[0]);\n    const textureLoader = new TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    let tgaLoader;\n\n    if (TGALoader) {\n      tgaLoader = new TGALoader(this.manager);\n      tgaLoader.setPath(this.resourcePath || path);\n    } //\n\n\n    const animations = [];\n    let kinematics = {};\n    let count = 0; //\n\n    const library = {\n      animations: {},\n      clips: {},\n      controllers: {},\n      images: {},\n      effects: {},\n      materials: {},\n      cameras: {},\n      lights: {},\n      geometries: {},\n      nodes: {},\n      visualScenes: {},\n      kinematicsModels: {},\n      physicsModels: {},\n      kinematicsScenes: {}\n    };\n    parseLibrary(collada, 'library_animations', 'animation', parseAnimation);\n    parseLibrary(collada, 'library_animation_clips', 'animation_clip', parseAnimationClip);\n    parseLibrary(collada, 'library_controllers', 'controller', parseController);\n    parseLibrary(collada, 'library_images', 'image', parseImage);\n    parseLibrary(collada, 'library_effects', 'effect', parseEffect);\n    parseLibrary(collada, 'library_materials', 'material', parseMaterial);\n    parseLibrary(collada, 'library_cameras', 'camera', parseCamera);\n    parseLibrary(collada, 'library_lights', 'light', parseLight);\n    parseLibrary(collada, 'library_geometries', 'geometry', parseGeometry);\n    parseLibrary(collada, 'library_nodes', 'node', parseNode);\n    parseLibrary(collada, 'library_visual_scenes', 'visual_scene', parseVisualScene);\n    parseLibrary(collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel);\n    parseLibrary(collada, 'library_physics_models', 'physics_model', parsePhysicsModel);\n    parseLibrary(collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene);\n    buildLibrary(library.animations, buildAnimation);\n    buildLibrary(library.clips, buildAnimationClip);\n    buildLibrary(library.controllers, buildController);\n    buildLibrary(library.images, buildImage);\n    buildLibrary(library.effects, buildEffect);\n    buildLibrary(library.materials, buildMaterial);\n    buildLibrary(library.cameras, buildCamera);\n    buildLibrary(library.lights, buildLight);\n    buildLibrary(library.geometries, buildGeometry);\n    buildLibrary(library.visualScenes, buildVisualScene);\n    setupAnimations();\n    setupKinematics();\n    const scene = parseScene(getElementsByTagName(collada, 'scene')[0]);\n    scene.animations = animations;\n\n    if (asset.upAxis === 'Z_UP') {\n      scene.quaternion.setFromEuler(new Euler(-Math.PI / 2, 0, 0));\n    }\n\n    scene.scale.multiplyScalar(asset.unit);\n    return {\n      get animations() {\n        console.warn('THREE.ColladaLoader: Please access animations over scene.animations now.');\n        return animations;\n      },\n\n      kinematics: kinematics,\n      library: library,\n      scene: scene\n    };\n  }\n\n}\n\nexport { ColladaLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}