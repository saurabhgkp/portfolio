{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\nimport { NodeUtils } from '../core/NodeUtils.js';\nvar inputs = NodeUtils.elements;\nfunction JoinNode(x, y, z, w) {\n  TempNode.call(this, 'f');\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  this.w = w;\n}\nJoinNode.prototype = Object.create(TempNode.prototype);\nJoinNode.prototype.constructor = JoinNode;\nJoinNode.prototype.nodeType = 'Join';\nJoinNode.prototype.getNumElements = function () {\n  var i = inputs.length;\n  while (i--) {\n    if (this[inputs[i]] !== undefined) {\n      ++i;\n      break;\n    }\n  }\n  return Math.max(i, 2);\n};\nJoinNode.prototype.getType = function (builder) {\n  return builder.getTypeFromLength(this.getNumElements());\n};\nJoinNode.prototype.generate = function (builder, output) {\n  var type = this.getType(builder),\n    length = this.getNumElements(),\n    outputs = [];\n  for (var i = 0; i < length; i++) {\n    var elm = this[inputs[i]];\n    outputs.push(elm ? elm.build(builder, 'f') : '0.0');\n  }\n  var code = (length > 1 ? builder.getConstructorFromLength(length) : '') + '( ' + outputs.join(', ') + ' )';\n  return builder.format(code, type, output);\n};\nJoinNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  for (var prop in source.inputs) {\n    this[prop] = source.inputs[prop];\n  }\n  return this;\n};\nJoinNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.inputs = {};\n    var length = this.getNumElements();\n    for (var i = 0; i < length; i++) {\n      var elm = this[inputs[i]];\n      if (elm) {\n        data.inputs[inputs[i]] = elm.toJSON(meta).uuid;\n      }\n    }\n  }\n  return data;\n};\nexport { JoinNode };","map":null,"metadata":{},"sourceType":"module"}