{"ast":null,"code":"import { Loader, UnsignedByteType, CubeTexture, HalfFloatType, LinearEncoding, RGBFormat, LinearFilter, FloatType, RGBEEncoding, RGBAFormat, NearestFilter, FileLoader, DataTexture } from 'three';\nimport { RGBELoader } from './RGBELoader.js';\n\nclass HDRCubeTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.hdrLoader = new RGBELoader();\n    this.type = UnsignedByteType;\n  }\n\n  load(urls, onLoad, onProgress, onError) {\n    if (!Array.isArray(urls)) {\n      console.warn('THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.');\n      this.setDataType(urls);\n      urls = onLoad;\n      onLoad = onProgress;\n      onProgress = onError;\n      onError = arguments[4];\n    }\n\n    const texture = new CubeTexture();\n    texture.type = this.type;\n\n    switch (texture.type) {\n      case UnsignedByteType:\n        texture.encoding = RGBEEncoding;\n        texture.format = RGBAFormat;\n        texture.minFilter = NearestFilter;\n        texture.magFilter = NearestFilter;\n        texture.generateMipmaps = false;\n        break;\n\n      case FloatType:\n        texture.encoding = LinearEncoding;\n        texture.format = RGBFormat;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n\n      case HalfFloatType:\n        texture.encoding = LinearEncoding;\n        texture.format = RGBFormat;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n\n    const scope = this;\n    let loaded = 0;\n\n    function loadHDRData(i, onLoad, onProgress, onError) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n        loaded++;\n        const texData = scope.hdrLoader.parse(buffer);\n        if (!texData) return;\n\n        if (texData.data !== undefined) {\n          const dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n          dataTexture.type = texture.type;\n          dataTexture.encoding = texture.encoding;\n          dataTexture.format = texture.format;\n          dataTexture.minFilter = texture.minFilter;\n          dataTexture.magFilter = texture.magFilter;\n          dataTexture.generateMipmaps = texture.generateMipmaps;\n          texture.images[i] = dataTexture;\n        }\n\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, onProgress, onError);\n    }\n\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n\n    return texture;\n  }\n\n  setDataType(value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n\n}\n\nexport { HDRCubeTextureLoader };","map":{"version":3,"names":["Loader","UnsignedByteType","CubeTexture","HalfFloatType","LinearEncoding","RGBFormat","LinearFilter","FloatType","RGBEEncoding","RGBAFormat","NearestFilter","FileLoader","DataTexture","RGBELoader","HDRCubeTextureLoader","constructor","manager","hdrLoader","type","load","urls","onLoad","onProgress","onError","Array","isArray","console","warn","setDataType","arguments","texture","encoding","format","minFilter","magFilter","generateMipmaps","scope","loaded","loadHDRData","i","setPath","path","setResponseType","setWithCredentials","withCredentials","buffer","texData","parse","data","undefined","dataTexture","width","height","images","needsUpdate","length","value"],"sources":["/home/cliffexpc63/my example/portfolio/node_modules/three-stdlib/loaders/HDRCubeTextureLoader.js"],"sourcesContent":["import { Loader, UnsignedByteType, CubeTexture, HalfFloatType, LinearEncoding, RGBFormat, LinearFilter, FloatType, RGBEEncoding, RGBAFormat, NearestFilter, FileLoader, DataTexture } from 'three';\nimport { RGBELoader } from './RGBELoader.js';\n\nclass HDRCubeTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.hdrLoader = new RGBELoader();\n    this.type = UnsignedByteType;\n  }\n\n  load(urls, onLoad, onProgress, onError) {\n    if (!Array.isArray(urls)) {\n      console.warn('THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.');\n      this.setDataType(urls);\n      urls = onLoad;\n      onLoad = onProgress;\n      onProgress = onError;\n      onError = arguments[4];\n    }\n\n    const texture = new CubeTexture();\n    texture.type = this.type;\n\n    switch (texture.type) {\n      case UnsignedByteType:\n        texture.encoding = RGBEEncoding;\n        texture.format = RGBAFormat;\n        texture.minFilter = NearestFilter;\n        texture.magFilter = NearestFilter;\n        texture.generateMipmaps = false;\n        break;\n\n      case FloatType:\n        texture.encoding = LinearEncoding;\n        texture.format = RGBFormat;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n\n      case HalfFloatType:\n        texture.encoding = LinearEncoding;\n        texture.format = RGBFormat;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n\n    const scope = this;\n    let loaded = 0;\n\n    function loadHDRData(i, onLoad, onProgress, onError) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n        loaded++;\n        const texData = scope.hdrLoader.parse(buffer);\n        if (!texData) return;\n\n        if (texData.data !== undefined) {\n          const dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n          dataTexture.type = texture.type;\n          dataTexture.encoding = texture.encoding;\n          dataTexture.format = texture.format;\n          dataTexture.minFilter = texture.minFilter;\n          dataTexture.magFilter = texture.magFilter;\n          dataTexture.generateMipmaps = texture.generateMipmaps;\n          texture.images[i] = dataTexture;\n        }\n\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, onProgress, onError);\n    }\n\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n\n    return texture;\n  }\n\n  setDataType(value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n\n}\n\nexport { HDRCubeTextureLoader };\n"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,gBAAjB,EAAmCC,WAAnC,EAAgDC,aAAhD,EAA+DC,cAA/D,EAA+EC,SAA/E,EAA0FC,YAA1F,EAAwGC,SAAxG,EAAmHC,YAAnH,EAAiIC,UAAjI,EAA6IC,aAA7I,EAA4JC,UAA5J,EAAwKC,WAAxK,QAA2L,OAA3L;AACA,SAASC,UAAT,QAA2B,iBAA3B;;AAEA,MAAMC,oBAAN,SAAmCd,MAAnC,CAA0C;EACxCe,WAAW,CAACC,OAAD,EAAU;IACnB,MAAMA,OAAN;IACA,KAAKC,SAAL,GAAiB,IAAIJ,UAAJ,EAAjB;IACA,KAAKK,IAAL,GAAYjB,gBAAZ;EACD;;EAEDkB,IAAI,CAACC,IAAD,EAAOC,MAAP,EAAeC,UAAf,EAA2BC,OAA3B,EAAoC;IACtC,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcL,IAAd,CAAL,EAA0B;MACxBM,OAAO,CAACC,IAAR,CAAa,+EAAb;MACA,KAAKC,WAAL,CAAiBR,IAAjB;MACAA,IAAI,GAAGC,MAAP;MACAA,MAAM,GAAGC,UAAT;MACAA,UAAU,GAAGC,OAAb;MACAA,OAAO,GAAGM,SAAS,CAAC,CAAD,CAAnB;IACD;;IAED,MAAMC,OAAO,GAAG,IAAI5B,WAAJ,EAAhB;IACA4B,OAAO,CAACZ,IAAR,GAAe,KAAKA,IAApB;;IAEA,QAAQY,OAAO,CAACZ,IAAhB;MACE,KAAKjB,gBAAL;QACE6B,OAAO,CAACC,QAAR,GAAmBvB,YAAnB;QACAsB,OAAO,CAACE,MAAR,GAAiBvB,UAAjB;QACAqB,OAAO,CAACG,SAAR,GAAoBvB,aAApB;QACAoB,OAAO,CAACI,SAAR,GAAoBxB,aAApB;QACAoB,OAAO,CAACK,eAAR,GAA0B,KAA1B;QACA;;MAEF,KAAK5B,SAAL;QACEuB,OAAO,CAACC,QAAR,GAAmB3B,cAAnB;QACA0B,OAAO,CAACE,MAAR,GAAiB3B,SAAjB;QACAyB,OAAO,CAACG,SAAR,GAAoB3B,YAApB;QACAwB,OAAO,CAACI,SAAR,GAAoB5B,YAApB;QACAwB,OAAO,CAACK,eAAR,GAA0B,KAA1B;QACA;;MAEF,KAAKhC,aAAL;QACE2B,OAAO,CAACC,QAAR,GAAmB3B,cAAnB;QACA0B,OAAO,CAACE,MAAR,GAAiB3B,SAAjB;QACAyB,OAAO,CAACG,SAAR,GAAoB3B,YAApB;QACAwB,OAAO,CAACI,SAAR,GAAoB5B,YAApB;QACAwB,OAAO,CAACK,eAAR,GAA0B,KAA1B;QACA;IAvBJ;;IA0BA,MAAMC,KAAK,GAAG,IAAd;IACA,IAAIC,MAAM,GAAG,CAAb;;IAEA,SAASC,WAAT,CAAqBC,CAArB,EAAwBlB,MAAxB,EAAgCC,UAAhC,EAA4CC,OAA5C,EAAqD;MACnD,IAAIZ,UAAJ,CAAeyB,KAAK,CAACpB,OAArB,EAA8BwB,OAA9B,CAAsCJ,KAAK,CAACK,IAA5C,EAAkDC,eAAlD,CAAkE,aAAlE,EAAiFC,kBAAjF,CAAoGP,KAAK,CAACQ,eAA1G,EAA2HzB,IAA3H,CAAgIC,IAAI,CAACmB,CAAD,CAApI,EAAyI,UAAUM,MAAV,EAAkB;QACzJR,MAAM;QACN,MAAMS,OAAO,GAAGV,KAAK,CAACnB,SAAN,CAAgB8B,KAAhB,CAAsBF,MAAtB,CAAhB;QACA,IAAI,CAACC,OAAL,EAAc;;QAEd,IAAIA,OAAO,CAACE,IAAR,KAAiBC,SAArB,EAAgC;UAC9B,MAAMC,WAAW,GAAG,IAAItC,WAAJ,CAAgBkC,OAAO,CAACE,IAAxB,EAA8BF,OAAO,CAACK,KAAtC,EAA6CL,OAAO,CAACM,MAArD,CAApB;UACAF,WAAW,CAAChC,IAAZ,GAAmBY,OAAO,CAACZ,IAA3B;UACAgC,WAAW,CAACnB,QAAZ,GAAuBD,OAAO,CAACC,QAA/B;UACAmB,WAAW,CAAClB,MAAZ,GAAqBF,OAAO,CAACE,MAA7B;UACAkB,WAAW,CAACjB,SAAZ,GAAwBH,OAAO,CAACG,SAAhC;UACAiB,WAAW,CAAChB,SAAZ,GAAwBJ,OAAO,CAACI,SAAhC;UACAgB,WAAW,CAACf,eAAZ,GAA8BL,OAAO,CAACK,eAAtC;UACAL,OAAO,CAACuB,MAAR,CAAed,CAAf,IAAoBW,WAApB;QACD;;QAED,IAAIb,MAAM,KAAK,CAAf,EAAkB;UAChBP,OAAO,CAACwB,WAAR,GAAsB,IAAtB;UACA,IAAIjC,MAAJ,EAAYA,MAAM,CAACS,OAAD,CAAN;QACb;MACF,CApBD,EAoBGR,UApBH,EAoBeC,OApBf;IAqBD;;IAED,KAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,IAAI,CAACmC,MAAzB,EAAiChB,CAAC,EAAlC,EAAsC;MACpCD,WAAW,CAACC,CAAD,EAAIlB,MAAJ,EAAYC,UAAZ,EAAwBC,OAAxB,CAAX;IACD;;IAED,OAAOO,OAAP;EACD;;EAEDF,WAAW,CAAC4B,KAAD,EAAQ;IACjB,KAAKtC,IAAL,GAAYsC,KAAZ;IACA,KAAKvC,SAAL,CAAeW,WAAf,CAA2B4B,KAA3B;IACA,OAAO,IAAP;EACD;;AApFuC;;AAwF1C,SAAS1C,oBAAT"},"metadata":{},"sourceType":"module","externalDependencies":[]}