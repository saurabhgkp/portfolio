{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TreeBuilder = void 0;\n\nvar cst_1 = require(\"../../cst/cst\");\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar cst_visitor_1 = require(\"../../cst/cst_visitor\");\n\nvar parser_1 = require(\"../parser\");\n/**\n * This trait is responsible for the CST building logic.\n */\n\n\nvar TreeBuilder =\n/** @class */\nfunction () {\n  function TreeBuilder() {}\n\n  TreeBuilder.prototype.initTreeBuilder = function (config) {\n    this.CST_STACK = []; // outputCst is no longer exposed/defined in the pubic API\n\n    this.outputCst = config.outputCst;\n    this.nodeLocationTracking = utils_1.has(config, \"nodeLocationTracking\") ? config.nodeLocationTracking : parser_1.DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n\n    if (!this.outputCst) {\n      this.cstInvocationStateUpdate = utils_1.NOOP;\n      this.cstFinallyStateUpdate = utils_1.NOOP;\n      this.cstPostTerminal = utils_1.NOOP;\n      this.cstPostNonTerminal = utils_1.NOOP;\n      this.cstPostRule = utils_1.NOOP;\n    } else {\n      if (/full/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = cst_1.setNodeLocationFull;\n          this.setNodeLocationFromNode = cst_1.setNodeLocationFull;\n          this.cstPostRule = utils_1.NOOP;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n        } else {\n          this.setNodeLocationFromToken = utils_1.NOOP;\n          this.setNodeLocationFromNode = utils_1.NOOP;\n          this.cstPostRule = this.cstPostRuleFull;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n        }\n      } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = cst_1.setNodeLocationOnlyOffset;\n          this.setNodeLocationFromNode = cst_1.setNodeLocationOnlyOffset;\n          this.cstPostRule = utils_1.NOOP;\n          this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRecovery;\n        } else {\n          this.setNodeLocationFromToken = utils_1.NOOP;\n          this.setNodeLocationFromNode = utils_1.NOOP;\n          this.cstPostRule = this.cstPostRuleOnlyOffset;\n          this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRegular;\n        }\n      } else if (/none/i.test(this.nodeLocationTracking)) {\n        this.setNodeLocationFromToken = utils_1.NOOP;\n        this.setNodeLocationFromNode = utils_1.NOOP;\n        this.cstPostRule = utils_1.NOOP;\n        this.setInitialNodeLocation = utils_1.NOOP;\n      } else {\n        throw Error(\"Invalid <nodeLocationTracking> config option: \\\"\" + config.nodeLocationTracking + \"\\\"\");\n      }\n    }\n  };\n\n  TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRecovery = function (cstNode) {\n    cstNode.location = {\n      startOffset: NaN,\n      endOffset: NaN\n    };\n  };\n\n  TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRegular = function (cstNode) {\n    cstNode.location = {\n      // without error recovery the starting Location of a new CstNode is guaranteed\n      // To be the next Token's startOffset (for valid inputs).\n      // For invalid inputs there won't be any CSTOutput so this potential\n      // inaccuracy does not matter\n      startOffset: this.LA(1).startOffset,\n      endOffset: NaN\n    };\n  };\n\n  TreeBuilder.prototype.setInitialNodeLocationFullRecovery = function (cstNode) {\n    cstNode.location = {\n      startOffset: NaN,\n      startLine: NaN,\n      startColumn: NaN,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN\n    };\n  };\n  /**\n     *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n        * @param cstNode\n     */\n\n\n  TreeBuilder.prototype.setInitialNodeLocationFullRegular = function (cstNode) {\n    var nextToken = this.LA(1);\n    cstNode.location = {\n      startOffset: nextToken.startOffset,\n      startLine: nextToken.startLine,\n      startColumn: nextToken.startColumn,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN\n    };\n  };\n\n  TreeBuilder.prototype.cstInvocationStateUpdate = function (fullRuleName, shortName) {\n    var cstNode = {\n      name: fullRuleName,\n      children: {}\n    };\n    this.setInitialNodeLocation(cstNode);\n    this.CST_STACK.push(cstNode);\n  };\n\n  TreeBuilder.prototype.cstFinallyStateUpdate = function () {\n    this.CST_STACK.pop();\n  };\n\n  TreeBuilder.prototype.cstPostRuleFull = function (ruleCstNode) {\n    var prevToken = this.LA(0);\n    var loc = ruleCstNode.location; // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n      loc.endLine = prevToken.endLine;\n      loc.endColumn = prevToken.endColumn;\n    } // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n      loc.startLine = NaN;\n      loc.startColumn = NaN;\n    }\n  };\n\n  TreeBuilder.prototype.cstPostRuleOnlyOffset = function (ruleCstNode) {\n    var prevToken = this.LA(0);\n    var loc = ruleCstNode.location; // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n    } // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n    }\n  };\n\n  TreeBuilder.prototype.cstPostTerminal = function (key, consumedToken) {\n    var rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n    cst_1.addTerminalToCst(rootCst, consumedToken, key); // This is only used when **both** error recovery and CST Output are enabled.\n\n    this.setNodeLocationFromToken(rootCst.location, consumedToken);\n  };\n\n  TreeBuilder.prototype.cstPostNonTerminal = function (ruleCstResult, ruleName) {\n    var preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n    cst_1.addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult); // This is only used when **both** error recovery and CST Output are enabled.\n\n    this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location);\n  };\n\n  TreeBuilder.prototype.getBaseCstVisitorConstructor = function () {\n    if (utils_1.isUndefined(this.baseCstVisitorConstructor)) {\n      var newBaseCstVisitorConstructor = cst_visitor_1.createBaseSemanticVisitorConstructor(this.className, utils_1.keys(this.gastProductionsCache));\n      this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n      return newBaseCstVisitorConstructor;\n    }\n\n    return this.baseCstVisitorConstructor;\n  };\n\n  TreeBuilder.prototype.getBaseCstVisitorConstructorWithDefaults = function () {\n    if (utils_1.isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {\n      var newConstructor = cst_visitor_1.createBaseVisitorConstructorWithDefaults(this.className, utils_1.keys(this.gastProductionsCache), this.getBaseCstVisitorConstructor());\n      this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n      return newConstructor;\n    }\n\n    return this.baseCstVisitorWithDefaultsConstructor;\n  };\n\n  TreeBuilder.prototype.getLastExplicitRuleShortName = function () {\n    var ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 1];\n  };\n\n  TreeBuilder.prototype.getPreviousExplicitRuleShortName = function () {\n    var ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 2];\n  };\n\n  TreeBuilder.prototype.getLastExplicitRuleOccurrenceIndex = function () {\n    var occurrenceStack = this.RULE_OCCURRENCE_STACK;\n    return occurrenceStack[occurrenceStack.length - 1];\n  };\n\n  return TreeBuilder;\n}();\n\nexports.TreeBuilder = TreeBuilder;","map":{"version":3,"mappings":"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","names":["TreeBuilder","config","CST_STACK","outputCst","nodeLocationTracking","utils_1","parser_1","cstInvocationStateUpdate","cstFinallyStateUpdate","cstPostTerminal","cstPostNonTerminal","cstPostRule","test","recoveryEnabled","setNodeLocationFromToken","cst_1","setNodeLocationFromNode","setInitialNodeLocation","setInitialNodeLocationFullRecovery","cstPostRuleFull","setInitialNodeLocationFullRegular","setInitialNodeLocationOnlyOffsetRecovery","cstPostRuleOnlyOffset","setInitialNodeLocationOnlyOffsetRegular","Error","cstNode","location","startOffset","NaN","endOffset","LA","startLine","startColumn","endLine","endColumn","nextToken","fullRuleName","shortName","name","children","push","pop","ruleCstNode","prevToken","loc","key","consumedToken","rootCst","length","ruleCstResult","ruleName","preCstNode","baseCstVisitorConstructor","newBaseCstVisitorConstructor","cst_visitor_1","className","gastProductionsCache","baseCstVisitorWithDefaultsConstructor","newConstructor","getBaseCstVisitorConstructor","ruleStack","RULE_STACK","occurrenceStack","RULE_OCCURRENCE_STACK","exports"],"sourceRoot":"","sources":["../../../../../src/parse/parser/traits/tree_builder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}