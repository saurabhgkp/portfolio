{"ast":null,"code":"import { Vector2 } from 'three';\nimport { TempNode } from '../core/TempNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { FloatNode } from '../inputs/FloatNode.js';\nimport { Vector2Node } from '../inputs/Vector2Node.js';\nimport { UVNode } from '../accessors/UVNode.js';\nfunction BlurNode(value, uv, radius, size) {\n  TempNode.call(this, 'v4');\n  this.value = value;\n  this.uv = uv || new UVNode();\n  this.radius = radius || new Vector2Node(1, 1);\n  this.size = size;\n  this.blurX = true;\n  this.blurY = true;\n  this.horizontal = new FloatNode(1 / 64);\n  this.vertical = new FloatNode(1 / 64);\n}\nBlurNode.Nodes = function () {\n  var blurX = new FunctionNode(['vec4 blurX( sampler2D tex, vec2 uv, float s ) {', '\tvec4 sum = vec4( 0.0 );', '\tsum += texture2D( tex, vec2( uv.x - 4.0 * s, uv.y ) ) * 0.051;', '\tsum += texture2D( tex, vec2( uv.x - 3.0 * s, uv.y ) ) * 0.0918;', '\tsum += texture2D( tex, vec2( uv.x - 2.0 * s, uv.y ) ) * 0.12245;', '\tsum += texture2D( tex, vec2( uv.x - 1.0 * s, uv.y ) ) * 0.1531;', '\tsum += texture2D( tex, vec2( uv.x, uv.y ) ) * 0.1633;', '\tsum += texture2D( tex, vec2( uv.x + 1.0 * s, uv.y ) ) * 0.1531;', '\tsum += texture2D( tex, vec2( uv.x + 2.0 * s, uv.y ) ) * 0.12245;', '\tsum += texture2D( tex, vec2( uv.x + 3.0 * s, uv.y ) ) * 0.0918;', '\tsum += texture2D( tex, vec2( uv.x + 4.0 * s, uv.y ) ) * 0.051;', '\treturn sum * .667;', '}'].join('\\n'));\n  var blurY = new FunctionNode(['vec4 blurY( sampler2D tex, vec2 uv, float s ) {', '\tvec4 sum = vec4( 0.0 );', '\tsum += texture2D( tex, vec2( uv.x, uv.y - 4.0 * s ) ) * 0.051;', '\tsum += texture2D( tex, vec2( uv.x, uv.y - 3.0 * s ) ) * 0.0918;', '\tsum += texture2D( tex, vec2( uv.x, uv.y - 2.0 * s ) ) * 0.12245;', '\tsum += texture2D( tex, vec2( uv.x, uv.y - 1.0 * s ) ) * 0.1531;', '\tsum += texture2D( tex, vec2( uv.x, uv.y ) ) * 0.1633;', '\tsum += texture2D( tex, vec2( uv.x, uv.y + 1.0 * s ) ) * 0.1531;', '\tsum += texture2D( tex, vec2( uv.x, uv.y + 2.0 * s ) ) * 0.12245;', '\tsum += texture2D( tex, vec2( uv.x, uv.y + 3.0 * s ) ) * 0.0918;', '\tsum += texture2D( tex, vec2( uv.x, uv.y + 4.0 * s ) ) * 0.051;', '\treturn sum * .667;', '}'].join('\\n'));\n  return {\n    blurX: blurX,\n    blurY: blurY\n  };\n}();\nBlurNode.prototype = Object.create(TempNode.prototype);\nBlurNode.prototype.constructor = BlurNode;\nBlurNode.prototype.nodeType = 'Blur';\nBlurNode.prototype.hashProperties = ['blurX', 'blurY'];\nBlurNode.prototype.updateFrame = function () /* frame */\n{\n  if (this.size) {\n    this.horizontal.value = this.radius.x / this.size.x;\n    this.vertical.value = this.radius.y / this.size.y;\n  } else if (this.value.value && this.value.value.image) {\n    var image = this.value.value.image;\n    this.horizontal.value = this.radius.x / image.width;\n    this.vertical.value = this.radius.y / image.height;\n  }\n};\nBlurNode.prototype.generate = function (builder, output) {\n  if (builder.isShader('fragment')) {\n    var blurCode = [],\n      code;\n    var blurX = builder.include(BlurNode.Nodes.blurX),\n      blurY = builder.include(BlurNode.Nodes.blurY);\n    if (this.blurX) {\n      blurCode.push(blurX + '( ' + this.value.build(builder, 'sampler2D') + ', ' + this.uv.build(builder, 'v2') + ', ' + this.horizontal.build(builder, 'f') + ' )');\n    }\n    if (this.blurY) {\n      blurCode.push(blurY + '( ' + this.value.build(builder, 'sampler2D') + ', ' + this.uv.build(builder, 'v2') + ', ' + this.vertical.build(builder, 'f') + ' )');\n    }\n    if (blurCode.length == 2) code = '( ' + blurCode.join(' + ') + ' / 2.0 )';else if (blurCode.length) code = '( ' + blurCode[0] + ' )';else code = 'vec4( 0.0 )';\n    return builder.format(code, this.getType(builder), output);\n  } else {\n    console.warn('THREE.BlurNode is not compatible with ' + builder.shader + ' shader.');\n    return builder.format('vec4( 0.0 )', this.getType(builder), output);\n  }\n};\nBlurNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.value = source.value;\n  this.uv = source.uv;\n  this.radius = source.radius;\n  if (source.size !== undefined) this.size = new Vector2(source.size.x, source.size.y);\n  this.blurX = source.blurX;\n  this.blurY = source.blurY;\n  return this;\n};\nBlurNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.value = this.value.toJSON(meta).uuid;\n    data.uv = this.uv.toJSON(meta).uuid;\n    data.radius = this.radius.toJSON(meta).uuid;\n    if (this.size) data.size = {\n      x: this.size.x,\n      y: this.size.y\n    };\n    data.blurX = this.blurX;\n    data.blurY = this.blurY;\n  }\n  return data;\n};\nexport { BlurNode };","map":null,"metadata":{},"sourceType":"module"}