{"ast":null,"code":"import { Node } from '../core/Node.js';\nfunction BypassNode(code, value) {\n  Node.call(this);\n  this.code = code;\n  this.value = value;\n}\nBypassNode.prototype = Object.create(Node.prototype);\nBypassNode.prototype.constructor = BypassNode;\nBypassNode.prototype.nodeType = 'Bypass';\nBypassNode.prototype.getType = function (builder) {\n  if (this.value) {\n    return this.value.getType(builder);\n  } else if (builder.isShader('fragment')) {\n    return 'f';\n  }\n  return 'void';\n};\nBypassNode.prototype.generate = function (builder, output) {\n  var code = this.code.build(builder, output) + ';';\n  builder.addNodeCode(code);\n  if (builder.isShader('vertex')) {\n    if (this.value) {\n      return this.value.build(builder, output);\n    }\n  } else {\n    return this.value ? this.value.build(builder, output) : builder.format('0.0', 'f', output);\n  }\n};\nBypassNode.prototype.copy = function (source) {\n  Node.prototype.copy.call(this, source);\n  this.code = source.code;\n  this.value = source.value;\n  return this;\n};\nBypassNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.code = this.code.toJSON(meta).uuid;\n    if (this.value) data.value = this.value.toJSON(meta).uuid;\n  }\n  return data;\n};\nexport { BypassNode };","map":null,"metadata":{},"sourceType":"module"}