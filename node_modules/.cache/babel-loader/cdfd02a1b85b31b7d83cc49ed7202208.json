{"ast":null,"code":"import _classCallCheck from \"/home/cliffexpc63/my example/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cliffexpc63/my example/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cliffexpc63/my example/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cliffexpc63/my example/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cliffexpc63/my example/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Loader, FileLoader } from 'three';\nimport * as Nodes from '../nodes/Nodes.js';\nvar NodeMaterialLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(NodeMaterialLoader, _Loader);\n  function NodeMaterialLoader(manager) {\n    var _this;\n    var library = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, NodeMaterialLoader);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NodeMaterialLoader).call(this, manager));\n    _this.nodes = {};\n    _this.materials = {};\n    _this.passes = {};\n    _this.names = {};\n    _this.library = library;\n    return _this;\n  }\n  _createClass(NodeMaterialLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.load(url, function (text) {\n        onLoad(scope.parse(JSON.parse(text)));\n      }, onProgress, onError);\n      return this;\n    }\n  }, {\n    key: \"getObjectByName\",\n    value: function getObjectByName(uuid) {\n      return this.names[uuid];\n    }\n  }, {\n    key: \"getObjectById\",\n    value: function getObjectById(uuid) {\n      return this.library[uuid] || this.nodes[uuid] || this.materials[uuid] || this.passes[uuid] || this.names[uuid];\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode(uuid) {\n      var object = this.getObjectById(uuid);\n      if (!object) {\n        console.warn('Node \"' + uuid + '\" not found.');\n      }\n      return object;\n    }\n  }, {\n    key: \"resolve\",\n    value: function resolve(json) {\n      switch (typeof json) {\n        case 'boolean':\n        case 'number':\n          return json;\n        case 'string':\n          if (/^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$/i.test(json) || this.library[json]) {\n            return this.getNode(json);\n          }\n          return json;\n        default:\n          if (Array.isArray(json)) {\n            for (var i = 0; i < json.length; i++) {\n              json[i] = this.resolve(json[i]);\n            }\n          } else {\n            for (var prop in json) {\n              if (prop === 'uuid') continue;\n              json[prop] = this.resolve(json[prop]);\n            }\n          }\n      }\n      return json;\n    }\n  }, {\n    key: \"declare\",\n    value: function declare(json) {\n      var uuid, node, object;\n      for (uuid in json.nodes) {\n        node = json.nodes[uuid];\n        object = new Nodes[node.nodeType + 'Node']();\n        if (node.name) {\n          object.name = node.name;\n          this.names[object.name] = object;\n        }\n        this.nodes[uuid] = object;\n      }\n      for (uuid in json.materials) {\n        node = json.materials[uuid];\n        object = new Nodes[node.type]();\n        if (node.name) {\n          object.name = node.name;\n          this.names[object.name] = object;\n        }\n        this.materials[uuid] = object;\n      }\n      for (uuid in json.passes) {\n        node = json.passes[uuid];\n        object = new Nodes[node.type]();\n        if (node.name) {\n          object.name = node.name;\n          this.names[object.name] = object;\n        }\n        this.passes[uuid] = object;\n      }\n      if (json.material) this.material = this.materials[json.material];\n      if (json.pass) this.pass = this.passes[json.pass];\n      return json;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(json) {\n      var uuid;\n      json = this.resolve(this.declare(json));\n      for (uuid in json.nodes) {\n        this.nodes[uuid].copy(json.nodes[uuid]);\n      }\n      for (uuid in json.materials) {\n        this.materials[uuid].copy(json.materials[uuid]);\n      }\n      for (uuid in json.passes) {\n        this.passes[uuid].copy(json.passes[uuid]);\n      }\n      return this.material || this.pass || this;\n    }\n  }]);\n  return NodeMaterialLoader;\n}(Loader);\nvar NodeMaterialLoaderUtils = /*#__PURE__*/function () {\n  function NodeMaterialLoaderUtils() {\n    _classCallCheck(this, NodeMaterialLoaderUtils);\n  }\n  _createClass(NodeMaterialLoaderUtils, null, [{\n    key: \"replaceUUIDObject\",\n    value: function replaceUUIDObject(object, uuid, value, recursive) {\n      recursive = recursive !== undefined ? recursive : true;\n      if (typeof uuid === 'object') uuid = uuid.uuid;\n      if (typeof object === 'object') {\n        var keys = Object.keys(object);\n        for (var i = 0; i < keys.length; i++) {\n          var key = keys[i];\n          if (recursive) {\n            object[key] = this.replaceUUIDObject(object[key], uuid, value);\n          }\n          if (key === uuid) {\n            object[uuid] = object[key];\n            delete object[key];\n          }\n        }\n      }\n      return object === uuid ? value : object;\n    }\n  }, {\n    key: \"replaceUUID\",\n    value: function replaceUUID(json, uuid, value) {\n      this.replaceUUIDObject(json, uuid, value, false);\n      this.replaceUUIDObject(json.nodes, uuid, value);\n      this.replaceUUIDObject(json.materials, uuid, value);\n      this.replaceUUIDObject(json.passes, uuid, value);\n      this.replaceUUIDObject(json.library, uuid, value, false);\n      return json;\n    }\n  }]);\n  return NodeMaterialLoaderUtils;\n}();\nexport { NodeMaterialLoader, NodeMaterialLoaderUtils };","map":null,"metadata":{},"sourceType":"module"}