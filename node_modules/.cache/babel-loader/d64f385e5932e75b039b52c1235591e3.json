{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RestWalker = void 0;\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar gast_public_1 = require(\"./gast/gast_public\");\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\n\n\nvar RestWalker =\n/** @class */\nfunction () {\n  function RestWalker() {}\n\n  RestWalker.prototype.walk = function (prod, prevRest) {\n    var _this = this;\n\n    if (prevRest === void 0) {\n      prevRest = [];\n    }\n\n    utils_1.forEach(prod.definition, function (subProd, index) {\n      var currRest = utils_1.drop(prod.definition, index + 1);\n      /* istanbul ignore else */\n\n      if (subProd instanceof gast_public_1.NonTerminal) {\n        _this.walkProdRef(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.Terminal) {\n        _this.walkTerminal(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.Alternative) {\n        _this.walkFlat(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.Option) {\n        _this.walkOption(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.RepetitionMandatory) {\n        _this.walkAtLeastOne(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.RepetitionMandatoryWithSeparator) {\n        _this.walkAtLeastOneSep(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.RepetitionWithSeparator) {\n        _this.walkManySep(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.Repetition) {\n        _this.walkMany(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.Alternation) {\n        _this.walkOr(subProd, currRest, prevRest);\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n  };\n\n  RestWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {};\n\n  RestWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {};\n\n  RestWalker.prototype.walkFlat = function (flatProd, currRest, prevRest) {\n    // ABCDEF => after the D the rest is EF\n    var fullOrRest = currRest.concat(prevRest);\n    this.walk(flatProd, fullOrRest);\n  };\n\n  RestWalker.prototype.walkOption = function (optionProd, currRest, prevRest) {\n    // ABC(DE)?F => after the (DE)? the rest is F\n    var fullOrRest = currRest.concat(prevRest);\n    this.walk(optionProd, fullOrRest);\n  };\n\n  RestWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n    // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n    var fullAtLeastOneRest = [new gast_public_1.Option({\n      definition: atLeastOneProd.definition\n    })].concat(currRest, prevRest);\n    this.walk(atLeastOneProd, fullAtLeastOneRest);\n  };\n\n  RestWalker.prototype.walkAtLeastOneSep = function (atLeastOneSepProd, currRest, prevRest) {\n    // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n    var fullAtLeastOneSepRest = restForRepetitionWithSeparator(atLeastOneSepProd, currRest, prevRest);\n    this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);\n  };\n\n  RestWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n    // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n    var fullManyRest = [new gast_public_1.Option({\n      definition: manyProd.definition\n    })].concat(currRest, prevRest);\n    this.walk(manyProd, fullManyRest);\n  };\n\n  RestWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n    // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n    var fullManySepRest = restForRepetitionWithSeparator(manySepProd, currRest, prevRest);\n    this.walk(manySepProd, fullManySepRest);\n  };\n\n  RestWalker.prototype.walkOr = function (orProd, currRest, prevRest) {\n    var _this = this; // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n\n\n    var fullOrRest = currRest.concat(prevRest); // walk all different alternatives\n\n    utils_1.forEach(orProd.definition, function (alt) {\n      // wrapping each alternative in a single definition wrapper\n      // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n      // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n      var prodWrapper = new gast_public_1.Alternative({\n        definition: [alt]\n      });\n\n      _this.walk(prodWrapper, fullOrRest);\n    });\n  };\n\n  return RestWalker;\n}();\n\nexports.RestWalker = RestWalker;\n\nfunction restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {\n  var repSepRest = [new gast_public_1.Option({\n    definition: [new gast_public_1.Terminal({\n      terminalType: repSepProd.separator\n    })].concat(repSepProd.definition)\n  })];\n  var fullRepSepRest = repSepRest.concat(currRest, prevRest);\n  return fullRepSepRest;\n}","map":{"version":3,"mappings":"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","names":["RestWalker","prod","prevRest","utils_1","definition","subProd","index","currRest","gast_public_1","_this","walkProdRef","walkTerminal","walkFlat","walkOption","walkAtLeastOne","walkAtLeastOneSep","walkManySep","walkMany","walkOr","Error","terminal","refProd","flatProd","fullOrRest","concat","walk","optionProd","atLeastOneProd","fullAtLeastOneRest","atLeastOneSepProd","fullAtLeastOneSepRest","restForRepetitionWithSeparator","manyProd","fullManyRest","manySepProd","fullManySepRest","orProd","alt","prodWrapper","exports","repSepProd","repSepRest","terminalType","separator","fullRepSepRest"],"sourceRoot":"","sources":["../../../../src/parse/grammar/rest.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}